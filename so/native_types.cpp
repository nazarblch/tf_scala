// Generated by JavaCPP version 1.4.1: DO NOT EDIT THIS FILE


#ifdef _WIN32
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __declspec(dllexport)
    #define JNIIMPORT __declspec(dllimport)
    #define JNICALL __stdcall

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#elif defined(__GNUC__) && !defined(__ANDROID__)
    #define _JAVASOFT_JNI_MD_H_

    #define JNIEXPORT __attribute__((visibility("default")))
    #define JNIIMPORT
    #define JNICALL

    typedef int jint;
    typedef long long jlong;
    typedef signed char jbyte;
#endif

#include <jni.h>

#ifdef __ANDROID__
    #include <android/log.h>
#elif defined(__APPLE__) && defined(__OBJC__)
    #include <TargetConditionals.h>
    #include <Foundation/Foundation.h>
#endif

#ifdef __linux__
    #include <malloc.h>
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <sys/sysinfo.h>
    #include <fcntl.h>
    #include <unistd.h>
    #include <dlfcn.h>
    #include <link.h>
#elif defined(__APPLE__)
    #include <sys/types.h>
    #include <sys/sysctl.h>
    #include <mach/mach_init.h>
    #include <mach/mach_host.h>
    #include <mach/task.h>
    #include <unistd.h>
    #include <dlfcn.h>
    #include <mach-o/dyld.h>
#elif defined(_WIN32)
    #define NOMINMAX
    #include <windows.h>
    #include <psapi.h>
#endif

#if defined(__ANDROID__) || TARGET_OS_IPHONE
    #define NewWeakGlobalRef(obj) NewGlobalRef(obj)
    #define DeleteWeakGlobalRef(obj) DeleteGlobalRef(obj)
#endif

#include <limits.h>
#include <stddef.h>
#ifndef _WIN32
    #include <stdint.h>
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <exception>
#include <memory>
#include <new>

#define jlong_to_ptr(a) ((void*)(uintptr_t)(a))
#define ptr_to_jlong(a) ((jlong)(uintptr_t)(a))

#if defined(_MSC_VER)
    #define JavaCPP_noinline __declspec(noinline)
    #define JavaCPP_hidden /* hidden by default */
#elif defined(__GNUC__)
    #define JavaCPP_noinline __attribute__((noinline)) __attribute__ ((unused))
    #define JavaCPP_hidden   __attribute__((visibility("hidden"))) __attribute__ ((unused))
#else
    #define JavaCPP_noinline
    #define JavaCPP_hidden
#endif

#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/core/framework/device_base.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/core/framework/graph_def_util.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/core/framework/op.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/core/framework/tensor.h"
#include "/home/nazar/Downloads/javacpp-presets-master/tensorflow/src/main/resources/org/bytedeco/javacpp/include/tensorflow_adapters.h"
#include <vector>
#include <string>
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/core/framework/tensor_types.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/core/framework/tensor_shape.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/core/framework/versions.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/core/graph/graph.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/core/lib/core/status.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/google/protobuf/message_lite.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/core/protobuf/config.pb.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/core/common_runtime/shape_refiner.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/cc/framework/ops.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/cc/framework/scope.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/cc/framework/scope_internal.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/cc/client/client_session.h"
#include <iostream>
#include <unordered_map>
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/cc/ops/const_op.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/cc/ops/linalg_ops.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/cc/ops/math_ops.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/cc/ops/math_ops_internal.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/c/c_api.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/c/eager/c_api.h"
#include "/home/nazar/tensorflow_scala/jni/src/main/native/include/tensorflow/c/eager/tape.h"

static JavaVM* JavaCPP_vm = NULL;
static bool JavaCPP_haveAllocObject = false;
static bool JavaCPP_haveNonvirtual = false;
static const char* JavaCPP_classNames[223] = {
        "org/bytedeco/javacpp/Pointer",
        "java/lang/String",
        "org/bytedeco/javacpp/Pointer$NativeDeallocator",
        "org/bytedeco/javacpp/Loader",
        "java/nio/Buffer",
        "java/lang/Object",
        "native_types/core/framework/DeviceAttributes",
        "java/lang/RuntimeException",
        "java/lang/NullPointerException",
        "org/bytedeco/javacpp/BytePointer",
        "native_types/core/framework/GraphDef",
        "native_types/core/framework/OpDef",
        "native_types/core/framework/OpRegistrationData",
        "native_types/core/framework/OpRegistry",
        "native_types/core/lib/Status",
        "native_types/core/framework/Tensor",
        "native_types/core/framework/StringTensorPairVector",
        "native_types/core/framework/TensorShape",
        "native_types/core/framework/TensorShapeBase",
        "native_types/core/framework/TensorShapeRep",
        "native_types/core/framework/TensorVector$Iterator",
        "native_types/core/framework/TensorVector",
        "native_types/core/framework/VersionDef",
        "native_types/core/framework/OpRegistryInterface",
        "native_types/core/graph/Graph",
        "native_types/core/common/MessageLite",
        "native_types/core/common/RunMetadata",
        "native_types/core/common/RunOptions",
        "native_types/core/common/ShapeRefiner",
        "native_types/cc/framework/Input$Initializer",
        "native_types/core/graph/Node",
        "native_types/cc/framework/Input",
        "native_types/cc/framework/InputList",
        "native_types/cc/framework/Output",
        "native_types/cc/framework/Operation",
        "native_types/cc/framework/OutputVector$Iterator",
        "native_types/cc/framework/OutputVector",
        "native_types/cc/framework/Scope",
        "native_types/cc/framework/Scope$Impl",
        "native_types/cc/client/ClientSession",
        "native_types/utils/NameMap",
        "native_types/utils/StringArray",
        "native_types/utils/StringVector$Iterator",
        "native_types/utils/StringVector",
        "native_types/ops/linalg_ops$Svd$Attrs",
        "native_types/ops/linalg_ops$Svd",
        "native_types/ops/linalg_ops$SelfAdjointEig$Attrs",
        "native_types/ops/linalg_ops$SelfAdjointEig",
        "native_types/ops/linalg_ops$Qr$Attrs",
        "native_types/ops/linalg_ops$Qr",
        "native_types/ops/linalg_ops$MatrixTriangularSolve$Attrs",
        "native_types/ops/linalg_ops$MatrixTriangularSolve",
        "native_types/ops/linalg_ops$MatrixSolveLs$Attrs",
        "native_types/ops/linalg_ops$MatrixSolveLs",
        "native_types/ops/linalg_ops$MatrixSolve$Attrs",
        "native_types/ops/linalg_ops$MatrixSolve",
        "native_types/ops/linalg_ops$MatrixInverse$Attrs",
        "native_types/ops/linalg_ops$MatrixInverse",
        "native_types/ops/linalg_ops$MatrixExponential",
        "native_types/ops/linalg_ops$MatrixDeterminant",
        "native_types/ops/linalg_ops$LogMatrixDeterminant",
        "native_types/ops/linalg_ops$CholeskyGrad",
        "native_types/ops/linalg_ops$Cholesky",
        "native_types/ops/math_ops$Zeta",
        "native_types/ops/math_ops$UnsortedSegmentSum",
        "native_types/ops/math_ops$UnsortedSegmentProd",
        "native_types/ops/math_ops$UnsortedSegmentMin",
        "native_types/ops/math_ops$UnsortedSegmentMax",
        "native_types/ops/math_ops$TruncateMod",
        "native_types/ops/math_ops$TruncateDiv",
        "native_types/ops/math_ops$Tanh",
        "native_types/ops/math_ops$Tan",
        "native_types/ops/math_ops$Sum$Attrs",
        "native_types/ops/math_ops$Sum",
        "native_types/ops/math_ops$Subtract",
        "native_types/ops/math_ops$SquaredDifference",
        "native_types/ops/math_ops$Square",
        "native_types/ops/math_ops$Sqrt",
        "native_types/ops/math_ops$SparseSegmentSumWithNumSegments",
        "native_types/ops/math_ops$SparseSegmentSum",
        "native_types/ops/math_ops$SparseSegmentSqrtNWithNumSegments",
        "native_types/ops/math_ops$SparseSegmentSqrtNGrad",
        "native_types/ops/math_ops$SparseSegmentSqrtN",
        "native_types/ops/math_ops$SparseSegmentMeanWithNumSegments",
        "native_types/ops/math_ops$SparseSegmentMeanGrad",
        "native_types/ops/math_ops$SparseSegmentMean",
        "native_types/ops/math_ops$SparseMatMul$Attrs",
        "native_types/ops/math_ops$SparseMatMul",
        "native_types/ops/math_ops$Sinh",
        "native_types/ops/math_ops$Sin",
        "native_types/ops/math_ops$Sign",
        "native_types/ops/math_ops$Sigmoid",
        "native_types/ops/math_ops$Where3",
        "native_types/ops/math_ops$SegmentSum",
        "native_types/ops/math_ops$SegmentProd",
        "native_types/ops/math_ops$SegmentMin",
        "native_types/ops/math_ops$SegmentMean",
        "native_types/ops/math_ops$SegmentMax",
        "native_types/ops/math_ops$Rsqrt",
        "native_types/ops/math_ops$Round",
        "native_types/ops/math_ops$Rint",
        "native_types/ops/math_ops$Requantize",
        "native_types/ops/math_ops$RequantizationRange",
        "native_types/ops/math_ops$Reciprocal",
        "native_types/ops/math_ops$RealDiv",
        "native_types/ops/math_ops$Real$Attrs",
        "native_types/ops/math_ops$Real",
        "native_types/ops/math_ops$Range",
        "native_types/ops/math_ops$QuantizedMul$Attrs",
        "native_types/ops/math_ops$QuantizedMul",
        "native_types/ops/math_ops$QuantizedMatMul$Attrs",
        "native_types/ops/math_ops$QuantizedMatMul",
        "native_types/ops/math_ops$QuantizedAdd$Attrs",
        "native_types/ops/math_ops$QuantizedAdd",
        "native_types/ops/math_ops$QuantizeDownAndShrinkRange",
        "native_types/ops/math_ops$Prod$Attrs",
        "native_types/ops/math_ops$Prod",
        "native_types/ops/math_ops$Pow",
        "native_types/ops/math_ops$Polygamma",
        "native_types/ops/math_ops$NotEqual",
        "native_types/ops/math_ops$Negate",
        "native_types/ops/math_ops$Multiply",
        "native_types/ops/math_ops$Mod",
        "native_types/ops/math_ops$Minimum",
        "native_types/ops/math_ops$Min$Attrs",
        "native_types/ops/math_ops$Min",
        "native_types/ops/math_ops$Mean$Attrs",
        "native_types/ops/math_ops$Mean",
        "native_types/ops/math_ops$Maximum",
        "native_types/ops/math_ops$Max$Attrs",
        "native_types/ops/math_ops$Max",
        "native_types/ops/math_ops$MatMul$Attrs",
        "native_types/ops/math_ops$MatMul",
        "native_types/ops/math_ops$LogicalOr",
        "native_types/ops/math_ops$LogicalNot",
        "native_types/ops/math_ops$LogicalAnd",
        "native_types/ops/math_ops$Log1p",
        "native_types/ops/math_ops$Log",
        "native_types/ops/math_ops$LinSpace",
        "native_types/ops/math_ops$Lgamma",
        "native_types/ops/math_ops$LessEqual",
        "native_types/ops/math_ops$Less",
        "native_types/ops/math_ops$IsNan",
        "native_types/ops/math_ops$IsInf",
        "native_types/ops/math_ops$IsFinite",
        "native_types/ops/math_ops$Inv",
        "native_types/ops/math_ops$Imag$Attrs",
        "native_types/ops/math_ops$Imag",
        "native_types/ops/math_ops$Igammac",
        "native_types/ops/math_ops$Igamma",
        "native_types/ops/math_ops$HistogramFixedWidth$Attrs",
        "native_types/ops/math_ops$HistogramFixedWidth",
        "native_types/ops/math_ops$GreaterEqual",
        "native_types/ops/math_ops$Greater",
        "native_types/ops/math_ops$FloorMod",
        "native_types/ops/math_ops$FloorDiv",
        "native_types/ops/math_ops$Floor",
        "native_types/ops/math_ops$Expm1",
        "native_types/ops/math_ops$Exp",
        "native_types/ops/math_ops$Erfc",
        "native_types/ops/math_ops$Erf",
        "native_types/ops/math_ops$Equal",
        "native_types/ops/math_ops$Div",
        "native_types/ops/math_ops$Digamma",
        "native_types/ops/math_ops$Cumsum$Attrs",
        "native_types/ops/math_ops$Cumsum",
        "native_types/ops/math_ops$Cumprod$Attrs",
        "native_types/ops/math_ops$Cumprod",
        "native_types/ops/math_ops$Cross",
        "native_types/ops/math_ops$Cosh",
        "native_types/ops/math_ops$Cos",
        "native_types/ops/math_ops$Conj",
        "native_types/ops/math_ops$ComplexAbs$Attrs",
        "native_types/ops/math_ops$ComplexAbs",
        "native_types/ops/math_ops$Complex$Attrs",
        "native_types/ops/math_ops$Complex",
        "native_types/ops/math_ops$CompareAndBitpack",
        "native_types/ops/math_ops$ClipByValue",
        "native_types/ops/math_ops$Ceil",
        "native_types/ops/math_ops$CastOp",
        "native_types/ops/math_ops$Bucketize",
        "native_types/ops/math_ops$Bincount",
        "native_types/ops/math_ops$Betainc",
        "native_types/ops/math_ops$BatchMatMul$Attrs",
        "native_types/ops/math_ops$BatchMatMul",
        "native_types/ops/math_ops$Atanh",
        "native_types/ops/math_ops$Atan2",
        "native_types/ops/math_ops$Atan",
        "native_types/ops/math_ops$Asinh",
        "native_types/ops/math_ops$Asin",
        "native_types/ops/math_ops$ArgMin$Attrs",
        "native_types/ops/math_ops$ArgMin",
        "native_types/ops/math_ops$ArgMax$Attrs",
        "native_types/ops/math_ops$ArgMax",
        "native_types/ops/math_ops$ApproximateEqual$Attrs",
        "native_types/ops/math_ops$ApproximateEqual",
        "native_types/ops/math_ops$Any$Attrs",
        "native_types/ops/math_ops$Any",
        "native_types/ops/math_ops$Angle$Attrs",
        "native_types/ops/math_ops$Angle",
        "native_types/ops/math_ops$All$Attrs",
        "native_types/ops/math_ops$All",
        "native_types/ops/math_ops$AddV2",
        "native_types/ops/math_ops$AddN",
        "native_types/ops/math_ops$Add",
        "native_types/ops/math_ops$Acosh",
        "native_types/ops/math_ops$Acos",
        "native_types/ops/math_ops$Abs",
        "native_types/c_api/c_api$TF_Output",
        "native_types/c_api/c_api$TF_Operation",
        "native_types/c_api/c_api$TF_Input",
        "native_types/c_api/c_api$Deallocator_Pointer_long_Pointer",
        "native_types/c_api/c_api$TF_Buffer$Data_deallocator_Pointer_long",
        "native_types/c_api/c_api$TF_Buffer",
        "native_types/c_api/c_api$TF_Status",
        "native_types/c_api/c_api$TF_Tensor",
        "native_types/c_api/c_api$TF_SessionOptions",
        "native_types/c_api/c_api$TF_Graph",
        "native_types/c_api/eager/c_api$TFE_Context",
        "native_types/c_api/eager/c_api$TFE_ContextOptions",
        "native_types/c_api/eager/c_api$TFE_TensorHandle",
        "native_types/c_api/eager/c_api$TFE_Op",
        "native_types/c_api/eager/tape_api$GradientTape" };
static jclass JavaCPP_classes[223] = { NULL };
static jfieldID JavaCPP_addressFID = NULL;
static jfieldID JavaCPP_positionFID = NULL;
static jfieldID JavaCPP_limitFID = NULL;
static jfieldID JavaCPP_capacityFID = NULL;
static jfieldID JavaCPP_deallocatorFID = NULL;
static jfieldID JavaCPP_ownerAddressFID = NULL;
static jmethodID JavaCPP_initMID = NULL;
static jmethodID JavaCPP_arrayMID = NULL;
static jmethodID JavaCPP_stringMID = NULL;
static jmethodID JavaCPP_getBytesMID = NULL;
static jmethodID JavaCPP_toStringMID = NULL;

static inline void JavaCPP_log(const char* fmt, ...) {
    va_list ap;
    va_start(ap, fmt);
#ifdef __ANDROID__
    __android_log_vprint(ANDROID_LOG_ERROR, "javacpp", fmt, ap);
#elif defined(__APPLE__) && defined(__OBJC__)
    NSLogv([NSString stringWithUTF8String:fmt], ap);
#else
    vfprintf(stderr, fmt, ap);
    fprintf(stderr, "\n");
#endif
    va_end(ap);
}

static JavaCPP_noinline jclass JavaCPP_getClass(JNIEnv* env, int i) {
    if (JavaCPP_classes[i] == NULL && env->PushLocalFrame(1) == 0) {
        jclass cls = env->FindClass(JavaCPP_classNames[i]);
        if (cls == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error loading class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        JavaCPP_classes[i] = (jclass)env->NewWeakGlobalRef(cls);
        if (JavaCPP_classes[i] == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error creating global reference of class %s.", JavaCPP_classNames[i]);
            return NULL;
        }
        env->PopLocalFrame(NULL);
    }
    return JavaCPP_classes[i];
}

static JavaCPP_noinline jfieldID JavaCPP_getFieldID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jfieldID fid = env->GetFieldID(cls, name, sig);
    if (fid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting field ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return fid;
}

static JavaCPP_noinline jmethodID JavaCPP_getMethodID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jmethodID mid = env->GetMethodID(cls, name, sig);
    if (mid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting method ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return mid;
}

static JavaCPP_noinline jmethodID JavaCPP_getStaticMethodID(JNIEnv* env, int i, const char* name, const char* sig) {
    jclass cls = JavaCPP_getClass(env, i);
    if (cls == NULL) {
        return NULL;
    }
    jmethodID mid = env->GetStaticMethodID(cls, name, sig);
    if (mid == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting static method ID of %s/%s", JavaCPP_classNames[i], name);
        return NULL;
    }
    return mid;
}

static JavaCPP_noinline jobject JavaCPP_createPointer(JNIEnv* env, int i, jclass cls = NULL) {
    if (cls == NULL && (cls = JavaCPP_getClass(env, i)) == NULL) {
        return NULL;
    }
    if (JavaCPP_haveAllocObject) {
        return env->AllocObject(cls);
    } else {
        jmethodID mid = env->GetMethodID(cls, "<init>", "(Lorg/bytedeco/javacpp/Pointer;)V");
        if (mid == NULL || env->ExceptionCheck()) {
            JavaCPP_log("Error getting Pointer constructor of %s, while VM does not support AllocObject()", JavaCPP_classNames[i]);
            return NULL;
        }
        return env->NewObject(cls, mid, NULL);
    }
}

static JavaCPP_noinline void JavaCPP_initPointer(JNIEnv* env, jobject obj, const void* ptr, jlong size, void* owner, void (*deallocator)(void*)) {
    if (deallocator != NULL) {
        jvalue args[4];
        args[0].j = ptr_to_jlong(ptr);
        args[1].j = size;
        args[2].j = ptr_to_jlong(owner);
        args[3].j = ptr_to_jlong(deallocator);
        if (JavaCPP_haveNonvirtual) {
            env->CallNonvirtualVoidMethodA(obj, JavaCPP_getClass(env, 0), JavaCPP_initMID, args);
        } else {
            env->CallVoidMethodA(obj, JavaCPP_initMID, args);
        }
    } else {
        env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(ptr));
        env->SetLongField(obj, JavaCPP_limitFID, (jlong)size);
        env->SetLongField(obj, JavaCPP_capacityFID, (jlong)size);
    }
}

static JavaCPP_noinline jstring JavaCPP_createString(JNIEnv* env, const char* ptr) {
    if (ptr == NULL) {
        return NULL;
    }
#ifdef MODIFIED_UTF8_STRING
    return env->NewStringUTF(ptr);
#else
    size_t length = strlen(ptr);
    jbyteArray bytes = env->NewByteArray(length < INT_MAX ? length : INT_MAX);
    env->SetByteArrayRegion(bytes, 0, length < INT_MAX ? length : INT_MAX, (signed char*)ptr);
    return (jstring)env->NewObject(JavaCPP_getClass(env, 1), JavaCPP_stringMID, bytes);
#endif
}

static JavaCPP_noinline const char* JavaCPP_getStringBytes(JNIEnv* env, jstring str) {
    if (str == NULL) {
        return NULL;
    }
#ifdef MODIFIED_UTF8_STRING
    return env->GetStringUTFChars(str, NULL);
#else
    jbyteArray bytes = (jbyteArray)env->CallObjectMethod(str, JavaCPP_getBytesMID);
    if (bytes == NULL || env->ExceptionCheck()) {
        JavaCPP_log("Error getting bytes from string.");
        return NULL;
    }
    jsize length = env->GetArrayLength(bytes);
    signed char* ptr = new (std::nothrow) signed char[length + 1];
    if (ptr != NULL) {
        env->GetByteArrayRegion(bytes, 0, length, ptr);
        ptr[length] = 0;
    }
    return (const char*)ptr;
#endif
}

static JavaCPP_noinline void JavaCPP_releaseStringBytes(JNIEnv* env, jstring str, const char* ptr) {
#ifdef MODIFIED_UTF8_STRING
    if (str != NULL) {
        env->ReleaseStringUTFChars(str, ptr);
    }
#else
    delete[] ptr;
#endif
}

class JavaCPP_hidden JavaCPP_exception : public std::exception {
public:
    JavaCPP_exception(const char* str) throw() {
        if (str == NULL) {
            strcpy(msg, "Unknown exception.");
        } else {
            strncpy(msg, str, sizeof(msg));
            msg[sizeof(msg) - 1] = 0;
        }
    }
    virtual const char* what() const throw() { return msg; }
    char msg[1024];
};

#ifndef GENERIC_EXCEPTION_CLASS
#define GENERIC_EXCEPTION_CLASS std::exception
#endif
static JavaCPP_noinline jthrowable JavaCPP_handleException(JNIEnv* env, int i) {
    jstring str = NULL;
    try {
        throw;
    } catch (GENERIC_EXCEPTION_CLASS& e) {
        str = JavaCPP_createString(env, e.what());
    } catch (...) {
        str = JavaCPP_createString(env, "Unknown exception.");
    }
    jmethodID mid = JavaCPP_getMethodID(env, i, "<init>", "(Ljava/lang/String;)V");
    if (mid == NULL) {
        return NULL;
    }
    return (jthrowable)env->NewObject(JavaCPP_getClass(env, i), mid, str);
}

static JavaCPP_noinline void* JavaCPP_getPointerOwner(JNIEnv* env, jobject obj) {
    if (obj != NULL) {
        jobject deallocator = env->GetObjectField(obj, JavaCPP_deallocatorFID);
        if (deallocator != NULL && env->IsInstanceOf(deallocator, JavaCPP_getClass(env, 2))) {
            return jlong_to_ptr(env->GetLongField(deallocator, JavaCPP_ownerAddressFID));
        }
    }
    return NULL;
}

#include <vector>
template<typename P, typename T = P> class JavaCPP_hidden VectorAdapter {
public:
    VectorAdapter(const P* ptr, typename std::vector<T>::size_type size, void* owner) : ptr((P*)ptr), size(size), owner(owner),
        vec2(ptr ? std::vector<T>((P*)ptr, (P*)ptr + size) : std::vector<T>()), vec(vec2) { }
    VectorAdapter(const std::vector<T>& vec) : ptr(0), size(0), owner(0), vec2(vec), vec(vec2) { }
    VectorAdapter(      std::vector<T>& vec) : ptr(0), size(0), owner(0), vec(vec) { }
    VectorAdapter(const std::vector<T>* vec) : ptr(0), size(0), owner(0), vec(*(std::vector<T>*)vec) { }
    void assign(P* ptr, typename std::vector<T>::size_type size, void* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        vec.assign(ptr, ptr + size);
    }
    static void deallocate(void* owner) { operator delete(owner); }
    operator P*() {
        if (vec.size() > size) {
            ptr = (P*)(operator new(sizeof(P) * vec.size(), std::nothrow_t()));
        }
        if (ptr) {
            std::copy(vec.begin(), vec.end(), ptr);
        }
        size = vec.size();
        owner = ptr;
        return ptr;
    }
    operator const P*()        { return &vec[0]; }
    operator std::vector<T>&() { return vec; }
    operator std::vector<T>*() { return ptr ? &vec : 0; }
    P* ptr;
    typename std::vector<T>::size_type size;
    void* owner;
    std::vector<T> vec2;
    std::vector<T>& vec;
};

#include <string>
class JavaCPP_hidden StringAdapter {
public:
    StringAdapter(const          char* ptr, size_t size, void* owner) : ptr((char*)ptr), size(size), owner(owner),
        str2(ptr ? (char*)ptr : "", ptr ? (size > 0 ? size : strlen((char*)ptr)) : 0), str(str2) { }
    StringAdapter(const signed   char* ptr, size_t size, void* owner) : ptr((char*)ptr), size(size), owner(owner),
        str2(ptr ? (char*)ptr : "", ptr ? (size > 0 ? size : strlen((char*)ptr)) : 0), str(str2) { }
    StringAdapter(const unsigned char* ptr, size_t size, void* owner) : ptr((char*)ptr), size(size), owner(owner),
        str2(ptr ? (char*)ptr : "", ptr ? (size > 0 ? size : strlen((char*)ptr)) : 0), str(str2) { }
    StringAdapter(const std::string& str) : ptr(0), size(0), owner(0), str2(str), str(str2) { }
    StringAdapter(      std::string& str) : ptr(0), size(0), owner(0), str(str) { }
    StringAdapter(const std::string* str) : ptr(0), size(0), owner(0), str(*(std::string*)str) { }
    void assign(char* ptr, size_t size, void* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        str.assign(ptr ? ptr : "", ptr ? (size > 0 ? size : strlen((char*)ptr)) : 0);
    }
    void assign(const          char* ptr, size_t size, void* owner) { assign((char*)ptr, size, owner); }
    void assign(const signed   char* ptr, size_t size, void* owner) { assign((char*)ptr, size, owner); }
    void assign(const unsigned char* ptr, size_t size, void* owner) { assign((char*)ptr, size, owner); }
    static void deallocate(void* owner) { delete[] (char*)owner; }
    operator char*() {
        const char* data = str.data();
        if (str.size() > size) {
            ptr = new (std::nothrow) char[str.size()+1];
            if (ptr) memset(ptr, 0, str.size()+1);
        }
        if (ptr && memcmp(ptr, data, str.size()) != 0) {
            memcpy(ptr, data, str.size());
            if (size > str.size()) ptr[str.size()] = 0;
        }
        size = str.size();
        owner = ptr;
        return ptr;
    }
    operator       signed   char*() { return (signed   char*)(operator char*)(); }
    operator       unsigned char*() { return (unsigned char*)(operator char*)(); }
    operator const          char*() { return                 str.c_str(); }
    operator const signed   char*() { return (signed   char*)str.c_str(); }
    operator const unsigned char*() { return (unsigned char*)str.c_str(); }
    operator         std::string&() { return str; }
    operator         std::string*() { return ptr ? &str : 0; }
    char* ptr;
    size_t size;
    void* owner;
    std::string str2;
    std::string& str;
};

#ifdef SHARED_PTR_NAMESPACE
template<class T> class SharedPtrAdapter {
public:
    typedef SHARED_PTR_NAMESPACE::shared_ptr<T> S;
    SharedPtrAdapter(const T* ptr, size_t size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
            sharedPtr2(owner != NULL && owner != ptr ? *(S*)owner : S((T*)ptr)), sharedPtr(sharedPtr2) { }
    SharedPtrAdapter(const S& sharedPtr) : ptr(0), size(0), owner(0), sharedPtr2(sharedPtr), sharedPtr(sharedPtr2) { }
    SharedPtrAdapter(      S& sharedPtr) : ptr(0), size(0), owner(0), sharedPtr(sharedPtr) { }
    SharedPtrAdapter(const S* sharedPtr) : ptr(0), size(0), owner(0), sharedPtr(*(S*)sharedPtr) { }
    void assign(T* ptr, size_t size, S* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        this->sharedPtr = owner != NULL && owner != ptr ? *(S*)owner : S((T*)ptr);
    }
    static void deallocate(void* owner) { delete (S*)owner; }
    operator typename SHARED_PTR_NAMESPACE::remove_const<T>::type*() {
        ptr = sharedPtr.get();
        if (owner == NULL || owner == ptr) {
            owner = new S(sharedPtr);
        }
        return (typename SHARED_PTR_NAMESPACE::remove_const<T>::type*)ptr;
    }
    operator S&() { return sharedPtr; }
    operator S*() { return &sharedPtr; }
    T* ptr;
    size_t size;
    void* owner;
    S sharedPtr2;
    S& sharedPtr;
};
#endif

#ifdef UNIQUE_PTR_NAMESPACE
template<class T> class UniquePtrAdapter {
public:
    typedef UNIQUE_PTR_NAMESPACE::unique_ptr<T> U;
    UniquePtrAdapter(const T* ptr, size_t size, void* owner) : ptr((T*)ptr), size(size), owner(owner),
            uniquePtr2(owner != NULL && owner != ptr ? U() : U((T*)ptr)),
            uniquePtr(owner != NULL && owner != ptr ? *(U*)owner : uniquePtr2) { }
    UniquePtrAdapter(U&& uniquePtr) : ptr(0), size(0), owner(0), uniquePtr2(UNIQUE_PTR_NAMESPACE::move(uniquePtr)), uniquePtr(uniquePtr2) { }
    UniquePtrAdapter(const U& uniquePtr) : ptr(0), size(0), owner(0), uniquePtr((U&)uniquePtr) { }
    UniquePtrAdapter(      U& uniquePtr) : ptr(0), size(0), owner(0), uniquePtr(uniquePtr) { }
    UniquePtrAdapter(const U* uniquePtr) : ptr(0), size(0), owner(0), uniquePtr(*(U*)uniquePtr) { }
    void assign(T* ptr, size_t size, U* owner) {
        this->ptr = ptr;
        this->size = size;
        this->owner = owner;
        this->uniquePtr = owner != NULL && owner != ptr ? *(U*)owner : U((T*)ptr);
    }
    static void deallocate(void* owner) { delete (U*)owner; }
    operator typename UNIQUE_PTR_NAMESPACE::remove_const<T>::type*() {
        ptr = uniquePtr.get();
        if (ptr == uniquePtr2.get() && (owner == NULL || owner == ptr)) {
            // only move the pointer if we actually own it through uniquePtr2
            owner = new U(UNIQUE_PTR_NAMESPACE::move(uniquePtr));
        }
        return (typename UNIQUE_PTR_NAMESPACE::remove_const<T>::type*)ptr;
    }
    operator U&() { return uniquePtr; }
    operator U*() { return &uniquePtr; }
    T* ptr;
    size_t size;
    void* owner;
    U uniquePtr2;
    U& uniquePtr;
};
#endif

static JavaCPP_noinline void JavaCPP_detach(bool detach) {
#ifndef NO_JNI_DETACH_THREAD
    if (detach && JavaCPP_vm->DetachCurrentThread() != JNI_OK) {
        JavaCPP_log("Could not detach the JavaVM from the current thread.");
    }
#endif
}

static JavaCPP_noinline bool JavaCPP_getEnv(JNIEnv** env) {
    bool attached = false;
    JavaVM *vm = JavaCPP_vm;
    if (vm == NULL) {
            JavaCPP_log("Could not get any created JavaVM.");
            *env = NULL;
            return false;
    }
    if (vm->GetEnv((void**)env, JNI_VERSION_1_4) != JNI_OK) {
        struct {
            JNIEnv **env;
            operator JNIEnv**() { return env; } // Android JNI
            operator void**() { return (void**)env; } // standard JNI
        } env2 = { env };
        if (vm->AttachCurrentThread(env2, NULL) != JNI_OK) {
            JavaCPP_log("Could not attach the JavaVM to the current thread.");
            *env = NULL;
            return false;
        }
        attached = true;
    }
    if (JavaCPP_vm == NULL) {
        if (JNI_OnLoad(vm, NULL) < 0) {
            JavaCPP_detach(attached);
            *env = NULL;
            return false;
        }
    }
    return attached;
}

struct JavaCPP_hidden JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer {
    JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer() : ptr(NULL), obj(NULL) { }
    void operator()(void* arg0, size_t arg1, void* arg2);
    void (*ptr)(void* arg0, size_t arg1, void* arg2);
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer::mid = NULL;
struct JavaCPP_hidden JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long {
    JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long() : ptr(NULL), obj(NULL) { }
    void operator()(void* arg0, size_t arg1);
    void (*ptr)(void* arg0, size_t arg1);
    jobject obj; static jmethodID mid;
};
jmethodID JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long::mid = NULL;


static JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer_allocate_callback_instance;
static JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long_allocate_callback_instance;

static void JavaCPP_org_bytedeco_javacpp_Pointer_deallocate(void *p) { delete (void*)p; }
static void JavaCPP_native_1types_core_framework_DeviceAttributes_deallocate(void *p) { delete (tensorflow::DeviceAttributes*)p; }
static void JavaCPP_native_1types_core_framework_GraphDef_deallocate(void *p) { delete (tensorflow::GraphDef*)p; }
static void JavaCPP_native_1types_core_framework_OpDef_deallocate(void *p) { delete (tensorflow::OpDef*)p; }
static void JavaCPP_native_1types_core_framework_OpRegistrationData_deallocate(void *p) { delete (tensorflow::OpRegistrationData*)p; }
static void JavaCPP_native_1types_core_lib_Status_deallocate(void *p) { delete (tensorflow::Status*)p; }
static void JavaCPP_native_1types_core_framework_OpRegistry_deallocate(void *p) { delete (tensorflow::OpRegistry*)p; }
static void JavaCPP_native_1types_core_framework_StringTensorPairVector_deallocate(void *p) { delete (std::vector<std::pair<std::string,tensorflow::Tensor> >*)p; }
static void JavaCPP_native_1types_core_framework_Tensor_deallocate(void *p) { delete (tensorflow::Tensor*)p; }
static void JavaCPP_native_1types_core_framework_TensorShapeBase_deallocate(void *p) { delete (tensorflow::TensorShapeBase<tensorflow::TensorShape>*)p; }
static void JavaCPP_native_1types_core_framework_TensorShape_deallocate(void *p) { delete (tensorflow::TensorShape*)p; }
static void JavaCPP_native_1types_core_framework_TensorShapeRep_deallocate(void *p) { delete (tensorflow::TensorShapeRep*)p; }
static void JavaCPP_native_1types_core_framework_TensorVector_00024Iterator_deallocate(void *p) { delete (std::vector<tensorflow::Tensor>::iterator*)p; }
static void JavaCPP_native_1types_core_framework_TensorVector_deallocate(void *p) { delete (std::vector<tensorflow::Tensor>*)p; }
static void JavaCPP_native_1types_core_framework_VersionDef_deallocate(void *p) { delete (tensorflow::VersionDef*)p; }
static void JavaCPP_native_1types_core_graph_Graph_deallocate(void *p) { delete (tensorflow::Graph*)p; }
static void JavaCPP_native_1types_core_common_RunMetadata_deallocate(void *p) { delete (tensorflow::RunMetadata*)p; }
static void JavaCPP_native_1types_core_common_RunOptions_deallocate(void *p) { delete (tensorflow::RunOptions*)p; }
static void JavaCPP_native_1types_core_common_ShapeRefiner_deallocate(void *p) { delete (tensorflow::ShapeRefiner*)p; }
static void JavaCPP_native_1types_cc_framework_Input_00024Initializer_deallocate(void *p) { delete (tensorflow::Input::Initializer*)p; }
static void JavaCPP_native_1types_cc_framework_Input_deallocate(void *p) { delete (tensorflow::Input*)p; }
static void JavaCPP_native_1types_cc_framework_InputList_deallocate(void *p) { delete (tensorflow::InputList*)p; }
static void JavaCPP_native_1types_cc_framework_Output_deallocate(void *p) { delete (tensorflow::Output*)p; }
static void JavaCPP_native_1types_cc_framework_Operation_deallocate(void *p) { delete (tensorflow::Operation*)p; }
static void JavaCPP_native_1types_cc_framework_OutputVector_00024Iterator_deallocate(void *p) { delete (std::vector<tensorflow::Output>::iterator*)p; }
static void JavaCPP_native_1types_cc_framework_OutputVector_deallocate(void *p) { delete (std::vector<tensorflow::Output>*)p; }
static void JavaCPP_native_1types_cc_framework_Scope_deallocate(void *p) { delete (tensorflow::Scope*)p; }
static void JavaCPP_native_1types_cc_client_ClientSession_deallocate(void *p) { delete (tensorflow::ClientSession*)p; }
static void JavaCPP_native_1types_utils_NameMap_deallocate(void *p) { delete (std::unordered_map<string, int>*)p; }
static void JavaCPP_native_1types_utils_StringArray_deallocate(void *p) { delete (std::string*)p; }
static void JavaCPP_native_1types_utils_StringVector_00024Iterator_deallocate(void *p) { delete (std::vector<std::string>::iterator*)p; }
static void JavaCPP_native_1types_utils_StringVector_deallocate(void *p) { delete (std::vector<std::string>*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024Svd_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::Svd::Attrs*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024Svd_deallocate(void *p) { delete (::tensorflow::ops::Svd*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024SelfAdjointEig_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::SelfAdjointEig::Attrs*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024SelfAdjointEig_deallocate(void *p) { delete (::tensorflow::ops::SelfAdjointEig*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024Qr_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::Qr::Attrs*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024Qr_deallocate(void *p) { delete (::tensorflow::ops::Qr*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::MatrixTriangularSolve::Attrs*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_deallocate(void *p) { delete (::tensorflow::ops::MatrixTriangularSolve*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolveLs_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::MatrixSolveLs::Attrs*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolveLs_deallocate(void *p) { delete (::tensorflow::ops::MatrixSolveLs*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolve_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::MatrixSolve::Attrs*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolve_deallocate(void *p) { delete (::tensorflow::ops::MatrixSolve*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024MatrixInverse_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::MatrixInverse::Attrs*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024MatrixInverse_deallocate(void *p) { delete (::tensorflow::ops::MatrixInverse*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024MatrixExponential_deallocate(void *p) { delete (::tensorflow::ops::MatrixExponential*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024MatrixDeterminant_deallocate(void *p) { delete (::tensorflow::ops::MatrixDeterminant*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024LogMatrixDeterminant_deallocate(void *p) { delete (::tensorflow::ops::LogMatrixDeterminant*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024CholeskyGrad_deallocate(void *p) { delete (::tensorflow::ops::CholeskyGrad*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024Cholesky_deallocate(void *p) { delete (::tensorflow::ops::Cholesky*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Zeta_deallocate(void *p) { delete (::tensorflow::ops::Zeta*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024UnsortedSegmentSum_deallocate(void *p) { delete (::tensorflow::ops::UnsortedSegmentSum*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024UnsortedSegmentProd_deallocate(void *p) { delete (::tensorflow::ops::UnsortedSegmentProd*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024UnsortedSegmentMin_deallocate(void *p) { delete (::tensorflow::ops::UnsortedSegmentMin*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024UnsortedSegmentMax_deallocate(void *p) { delete (::tensorflow::ops::UnsortedSegmentMax*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024TruncateMod_deallocate(void *p) { delete (::tensorflow::ops::TruncateMod*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024TruncateDiv_deallocate(void *p) { delete (::tensorflow::ops::TruncateDiv*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Tanh_deallocate(void *p) { delete (::tensorflow::ops::Tanh*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Tan_deallocate(void *p) { delete (::tensorflow::ops::Tan*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Sum_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::Sum::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Sum_deallocate(void *p) { delete (::tensorflow::ops::Sum*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Subtract_deallocate(void *p) { delete (::tensorflow::ops::Subtract*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SquaredDifference_deallocate(void *p) { delete (::tensorflow::ops::SquaredDifference*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Square_deallocate(void *p) { delete (::tensorflow::ops::Square*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Sqrt_deallocate(void *p) { delete (::tensorflow::ops::Sqrt*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SparseSegmentSumWithNumSegments_deallocate(void *p) { delete (::tensorflow::ops::SparseSegmentSumWithNumSegments*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SparseSegmentSum_deallocate(void *p) { delete (::tensorflow::ops::SparseSegmentSum*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SparseSegmentSqrtNWithNumSegments_deallocate(void *p) { delete (::tensorflow::ops::SparseSegmentSqrtNWithNumSegments*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SparseSegmentSqrtNGrad_deallocate(void *p) { delete (::tensorflow::ops::SparseSegmentSqrtNGrad*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SparseSegmentSqrtN_deallocate(void *p) { delete (::tensorflow::ops::SparseSegmentSqrtN*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SparseSegmentMeanWithNumSegments_deallocate(void *p) { delete (::tensorflow::ops::SparseSegmentMeanWithNumSegments*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SparseSegmentMeanGrad_deallocate(void *p) { delete (::tensorflow::ops::SparseSegmentMeanGrad*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SparseSegmentMean_deallocate(void *p) { delete (::tensorflow::ops::SparseSegmentMean*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::SparseMatMul::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SparseMatMul_deallocate(void *p) { delete (::tensorflow::ops::SparseMatMul*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Sinh_deallocate(void *p) { delete (::tensorflow::ops::Sinh*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Sin_deallocate(void *p) { delete (::tensorflow::ops::Sin*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Sign_deallocate(void *p) { delete (::tensorflow::ops::Sign*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Sigmoid_deallocate(void *p) { delete (::tensorflow::ops::Sigmoid*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Where3_deallocate(void *p) { delete (::tensorflow::ops::Where3*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SegmentSum_deallocate(void *p) { delete (::tensorflow::ops::SegmentSum*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SegmentProd_deallocate(void *p) { delete (::tensorflow::ops::SegmentProd*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SegmentMin_deallocate(void *p) { delete (::tensorflow::ops::SegmentMin*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SegmentMean_deallocate(void *p) { delete (::tensorflow::ops::SegmentMean*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SegmentMax_deallocate(void *p) { delete (::tensorflow::ops::SegmentMax*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Rsqrt_deallocate(void *p) { delete (::tensorflow::ops::Rsqrt*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Round_deallocate(void *p) { delete (::tensorflow::ops::Round*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Rint_deallocate(void *p) { delete (::tensorflow::ops::Rint*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Requantize_deallocate(void *p) { delete (::tensorflow::ops::Requantize*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024RequantizationRange_deallocate(void *p) { delete (::tensorflow::ops::RequantizationRange*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Reciprocal_deallocate(void *p) { delete (::tensorflow::ops::Reciprocal*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024RealDiv_deallocate(void *p) { delete (::tensorflow::ops::RealDiv*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Real_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::Real::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Real_deallocate(void *p) { delete (::tensorflow::ops::Real*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Range_deallocate(void *p) { delete (::tensorflow::ops::Range*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024QuantizedMul_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::QuantizedMul::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024QuantizedMul_deallocate(void *p) { delete (::tensorflow::ops::QuantizedMul*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::QuantizedMatMul::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024QuantizedMatMul_deallocate(void *p) { delete (::tensorflow::ops::QuantizedMatMul*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024QuantizedAdd_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::QuantizedAdd::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024QuantizedAdd_deallocate(void *p) { delete (::tensorflow::ops::QuantizedAdd*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024QuantizeDownAndShrinkRange_deallocate(void *p) { delete (::tensorflow::ops::QuantizeDownAndShrinkRange*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Prod_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::Prod::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Prod_deallocate(void *p) { delete (::tensorflow::ops::Prod*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Pow_deallocate(void *p) { delete (::tensorflow::ops::Pow*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Polygamma_deallocate(void *p) { delete (::tensorflow::ops::Polygamma*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024NotEqual_deallocate(void *p) { delete (::tensorflow::ops::NotEqual*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Negate_deallocate(void *p) { delete (::tensorflow::ops::Negate*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Multiply_deallocate(void *p) { delete (::tensorflow::ops::Multiply*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Mod_deallocate(void *p) { delete (::tensorflow::ops::Mod*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Minimum_deallocate(void *p) { delete (::tensorflow::ops::Minimum*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Min_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::Min::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Min_deallocate(void *p) { delete (::tensorflow::ops::Min*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Mean_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::Mean::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Mean_deallocate(void *p) { delete (::tensorflow::ops::Mean*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Maximum_deallocate(void *p) { delete (::tensorflow::ops::Maximum*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Max_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::Max::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Max_deallocate(void *p) { delete (::tensorflow::ops::Max*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024MatMul_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::MatMul::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024MatMul_deallocate(void *p) { delete (::tensorflow::ops::MatMul*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024LogicalOr_deallocate(void *p) { delete (::tensorflow::ops::LogicalOr*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024LogicalNot_deallocate(void *p) { delete (::tensorflow::ops::LogicalNot*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024LogicalAnd_deallocate(void *p) { delete (::tensorflow::ops::LogicalAnd*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Log1p_deallocate(void *p) { delete (::tensorflow::ops::Log1p*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Log_deallocate(void *p) { delete (::tensorflow::ops::Log*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024LinSpace_deallocate(void *p) { delete (::tensorflow::ops::LinSpace*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Lgamma_deallocate(void *p) { delete (::tensorflow::ops::Lgamma*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024LessEqual_deallocate(void *p) { delete (::tensorflow::ops::LessEqual*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Less_deallocate(void *p) { delete (::tensorflow::ops::Less*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024IsNan_deallocate(void *p) { delete (::tensorflow::ops::IsNan*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024IsInf_deallocate(void *p) { delete (::tensorflow::ops::IsInf*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024IsFinite_deallocate(void *p) { delete (::tensorflow::ops::IsFinite*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Inv_deallocate(void *p) { delete (::tensorflow::ops::Inv*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Imag_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::Imag::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Imag_deallocate(void *p) { delete (::tensorflow::ops::Imag*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Igammac_deallocate(void *p) { delete (::tensorflow::ops::Igammac*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Igamma_deallocate(void *p) { delete (::tensorflow::ops::Igamma*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024HistogramFixedWidth_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::HistogramFixedWidth::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024HistogramFixedWidth_deallocate(void *p) { delete (::tensorflow::ops::HistogramFixedWidth*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024GreaterEqual_deallocate(void *p) { delete (::tensorflow::ops::GreaterEqual*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Greater_deallocate(void *p) { delete (::tensorflow::ops::Greater*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024FloorMod_deallocate(void *p) { delete (::tensorflow::ops::FloorMod*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024FloorDiv_deallocate(void *p) { delete (::tensorflow::ops::FloorDiv*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Floor_deallocate(void *p) { delete (::tensorflow::ops::Floor*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Expm1_deallocate(void *p) { delete (::tensorflow::ops::Expm1*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Exp_deallocate(void *p) { delete (::tensorflow::ops::Exp*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Erfc_deallocate(void *p) { delete (::tensorflow::ops::Erfc*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Erf_deallocate(void *p) { delete (::tensorflow::ops::Erf*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Equal_deallocate(void *p) { delete (::tensorflow::ops::Equal*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Div_deallocate(void *p) { delete (::tensorflow::ops::Div*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Digamma_deallocate(void *p) { delete (::tensorflow::ops::Digamma*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Cumsum_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::Cumsum::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Cumsum_deallocate(void *p) { delete (::tensorflow::ops::Cumsum*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Cumprod_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::Cumprod::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Cumprod_deallocate(void *p) { delete (::tensorflow::ops::Cumprod*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Cross_deallocate(void *p) { delete (::tensorflow::ops::Cross*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Cosh_deallocate(void *p) { delete (::tensorflow::ops::Cosh*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Cos_deallocate(void *p) { delete (::tensorflow::ops::Cos*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Conj_deallocate(void *p) { delete (::tensorflow::ops::Conj*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024ComplexAbs_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::ComplexAbs::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024ComplexAbs_deallocate(void *p) { delete (::tensorflow::ops::ComplexAbs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Complex_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::Complex::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Complex_deallocate(void *p) { delete (::tensorflow::ops::Complex*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024CompareAndBitpack_deallocate(void *p) { delete (::tensorflow::ops::CompareAndBitpack*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024ClipByValue_deallocate(void *p) { delete (::tensorflow::ops::ClipByValue*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Ceil_deallocate(void *p) { delete (::tensorflow::ops::Ceil*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024CastOp_deallocate(void *p) { delete (class tensorflow::ops::Cast*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Bucketize_deallocate(void *p) { delete (::tensorflow::ops::Bucketize*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Bincount_deallocate(void *p) { delete (::tensorflow::ops::Bincount*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Betainc_deallocate(void *p) { delete (::tensorflow::ops::Betainc*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::BatchMatMul::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024BatchMatMul_deallocate(void *p) { delete (::tensorflow::ops::BatchMatMul*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Atanh_deallocate(void *p) { delete (::tensorflow::ops::Atanh*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Atan2_deallocate(void *p) { delete (::tensorflow::ops::Atan2*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Atan_deallocate(void *p) { delete (::tensorflow::ops::Atan*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Asinh_deallocate(void *p) { delete (::tensorflow::ops::Asinh*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Asin_deallocate(void *p) { delete (::tensorflow::ops::Asin*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024ArgMin_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::ArgMin::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024ArgMin_deallocate(void *p) { delete (::tensorflow::ops::ArgMin*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024ArgMax_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::ArgMax::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024ArgMax_deallocate(void *p) { delete (::tensorflow::ops::ArgMax*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024ApproximateEqual_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::ApproximateEqual::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024ApproximateEqual_deallocate(void *p) { delete (::tensorflow::ops::ApproximateEqual*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Any_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::Any::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Any_deallocate(void *p) { delete (::tensorflow::ops::Any*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Angle_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::Angle::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Angle_deallocate(void *p) { delete (::tensorflow::ops::Angle*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024All_00024Attrs_deallocate(void *p) { delete (::tensorflow::ops::All::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024All_deallocate(void *p) { delete (::tensorflow::ops::All*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024AddV2_deallocate(void *p) { delete (::tensorflow::ops::AddV2*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024AddN_deallocate(void *p) { delete (::tensorflow::ops::AddN*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Add_deallocate(void *p) { delete (::tensorflow::ops::Add*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Acosh_deallocate(void *p) { delete (::tensorflow::ops::Acosh*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Acos_deallocate(void *p) { delete (::tensorflow::ops::Acos*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Abs_deallocate(void *p) { delete (::tensorflow::ops::Abs*)p; }
static void JavaCPP_native_1types_c_1api_c_1api_00024TF_1Output_deallocate(void *p) { delete (::TF_Output*)p; }
static void JavaCPP_native_1types_c_1api_c_1api_00024TF_1Input_deallocate(void *p) { delete (::TF_Input*)p; }
static void JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer_deallocate(void *p) { JNIEnv *e; bool a = JavaCPP_getEnv(&e); if (e != NULL) e->DeleteWeakGlobalRef((jweak)((JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer*)p)->obj); delete (JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer*)p; JavaCPP_detach(a); }
static void JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long_deallocate(void *p) { JNIEnv *e; bool a = JavaCPP_getEnv(&e); if (e != NULL) e->DeleteWeakGlobalRef((jweak)((JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long*)p)->obj); delete (JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long*)p; JavaCPP_detach(a); }
static void JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_deallocate(void *p) { delete (::TF_Buffer*)p; }
static void JavaCPP_native_1types_c_1api_eager_tape_1api_00024GradientTape_deallocate(void *p) { delete (tensorflow::eager:: GradientTape< int*, int* (int*) >*)p; }
static void JavaCPP_native_1types_core_framework_DeviceAttributes_deallocateArray(void* p) { delete[] (tensorflow::DeviceAttributes*)p; }
static void JavaCPP_native_1types_core_framework_GraphDef_deallocateArray(void* p) { delete[] (tensorflow::GraphDef*)p; }
static void JavaCPP_native_1types_core_framework_OpDef_deallocateArray(void* p) { delete[] (tensorflow::OpDef*)p; }
static void JavaCPP_native_1types_core_framework_OpRegistrationData_deallocateArray(void* p) { delete[] (tensorflow::OpRegistrationData*)p; }
static void JavaCPP_native_1types_core_framework_OpRegistry_deallocateArray(void* p) { delete[] (tensorflow::OpRegistry*)p; }
static void JavaCPP_native_1types_core_framework_TensorShapeBase_deallocateArray(void* p) { delete[] (tensorflow::TensorShapeBase<tensorflow::TensorShape>*)p; }
static void JavaCPP_native_1types_core_framework_TensorShape_deallocateArray(void* p) { delete[] (tensorflow::TensorShape*)p; }
static void JavaCPP_native_1types_core_framework_VersionDef_deallocateArray(void* p) { delete[] (tensorflow::VersionDef*)p; }
static void JavaCPP_native_1types_core_lib_Status_deallocateArray(void* p) { delete[] (tensorflow::Status*)p; }
static void JavaCPP_native_1types_core_common_RunMetadata_deallocateArray(void* p) { delete[] (tensorflow::RunMetadata*)p; }
static void JavaCPP_native_1types_core_common_RunOptions_deallocateArray(void* p) { delete[] (tensorflow::RunOptions*)p; }
static void JavaCPP_native_1types_cc_framework_Operation_deallocateArray(void* p) { delete[] (tensorflow::Operation*)p; }
static void JavaCPP_native_1types_cc_framework_Output_deallocateArray(void* p) { delete[] (tensorflow::Output*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024Svd_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::Svd::Attrs*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024SelfAdjointEig_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::SelfAdjointEig::Attrs*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024Qr_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::Qr::Attrs*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::MatrixTriangularSolve::Attrs*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolveLs_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::MatrixSolveLs::Attrs*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolve_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::MatrixSolve::Attrs*)p; }
static void JavaCPP_native_1types_ops_linalg_1ops_00024MatrixInverse_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::MatrixInverse::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Sum_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::Sum::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::SparseMatMul::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Real_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::Real::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024QuantizedMul_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::QuantizedMul::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::QuantizedMatMul::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024QuantizedAdd_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::QuantizedAdd::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Prod_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::Prod::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Min_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::Min::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Mean_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::Mean::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Max_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::Max::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024MatMul_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::MatMul::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Imag_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::Imag::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024HistogramFixedWidth_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::HistogramFixedWidth::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Cumsum_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::Cumsum::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Cumprod_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::Cumprod::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024ComplexAbs_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::ComplexAbs::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Complex_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::Complex::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::BatchMatMul::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024ArgMin_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::ArgMin::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024ArgMax_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::ArgMax::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024ApproximateEqual_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::ApproximateEqual::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Any_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::Any::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024Angle_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::Angle::Attrs*)p; }
static void JavaCPP_native_1types_ops_math_1ops_00024All_00024Attrs_deallocateArray(void* p) { delete[] (::tensorflow::ops::All::Attrs*)p; }
static void JavaCPP_native_1types_c_1api_c_1api_00024TF_1Output_deallocateArray(void* p) { delete[] (::TF_Output*)p; }
static void JavaCPP_native_1types_c_1api_c_1api_00024TF_1Input_deallocateArray(void* p) { delete[] (::TF_Input*)p; }
static void JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_deallocateArray(void* p) { delete[] (::TF_Buffer*)p; }

static const char* JavaCPP_members[223][51] = {
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { "sizeof" },
        { NULL },
        { NULL },
        { NULL },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { NULL },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { NULL },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "compute_uv_", "full_matrices_" },
        { "sizeof" },
        { "sizeof", "compute_v_" },
        { "sizeof" },
        { "sizeof", "full_matrices_" },
        { "sizeof" },
        { "sizeof", "adjoint_", "lower_" },
        { "sizeof" },
        { "sizeof", "fast_" },
        { "sizeof" },
        { "sizeof", "adjoint_" },
        { "sizeof" },
        { "sizeof", "adjoint_" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "keep_dims_" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "transpose_a_", "transpose_b_", "a_is_sparse_", "b_is_sparse_" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "Tout_" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "Toutput_" },
        { "sizeof" },
        { "sizeof", "transpose_a_", "transpose_b_", "Toutput_", "Tactivation_" },
        { "sizeof" },
        { "sizeof", "Toutput_" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "keep_dims_" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "keep_dims_" },
        { "sizeof" },
        { "sizeof", "keep_dims_" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "keep_dims_" },
        { "sizeof" },
        { "sizeof", "transpose_a_", "transpose_b_" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "Tout_" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "dtype_" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "exclusive_", "reverse_" },
        { "sizeof" },
        { "sizeof", "exclusive_", "reverse_" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "Tout_" },
        { "sizeof" },
        { "sizeof", "Tout_" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "adj_x_", "adj_y_" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "output_type_" },
        { "sizeof" },
        { "sizeof", "output_type_" },
        { "sizeof" },
        { "sizeof", "tolerance_" },
        { "sizeof" },
        { "sizeof", "keep_dims_" },
        { "sizeof" },
        { "sizeof", "Tout_" },
        { "sizeof" },
        { "sizeof", "keep_dims_" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof" },
        { "sizeof", "oper", "index" },
        { NULL },
        { "sizeof", "oper", "index" },
        { NULL },
        { NULL },
        { "sizeof", "data", "data_deallocator", "length" },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { NULL },
        { "sizeof" } };
static int JavaCPP_offsets[223][51] = {
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { sizeof(tensorflow::DeviceAttributes) },
        { -1 },
        { -1 },
        { -1 },
        { sizeof(tensorflow::GraphDef) },
        { sizeof(tensorflow::OpDef) },
        { sizeof(tensorflow::OpRegistrationData) },
        { sizeof(tensorflow::OpRegistry) },
        { sizeof(tensorflow::Status) },
        { sizeof(tensorflow::Tensor) },
        { sizeof(std::vector<std::pair<std::string,tensorflow::Tensor> >) },
        { sizeof(tensorflow::TensorShape) },
        { sizeof(tensorflow::TensorShapeBase<tensorflow::TensorShape>) },
        { sizeof(tensorflow::TensorShapeRep) },
        { sizeof(std::vector<tensorflow::Tensor>::iterator) },
        { sizeof(std::vector<tensorflow::Tensor>) },
        { sizeof(tensorflow::VersionDef) },
        { sizeof(tensorflow::OpRegistryInterface) },
        { sizeof(tensorflow::Graph) },
        { sizeof(google::protobuf::MessageLite) },
        { sizeof(tensorflow::RunMetadata) },
        { sizeof(tensorflow::RunOptions) },
        { -1 },
        { sizeof(tensorflow::Input::Initializer) },
        { sizeof(tensorflow::Node) },
        { sizeof(tensorflow::Input) },
        { sizeof(tensorflow::InputList) },
        { sizeof(tensorflow::Output) },
        { sizeof(tensorflow::Operation) },
        { sizeof(std::vector<tensorflow::Output>::iterator) },
        { sizeof(std::vector<tensorflow::Output>) },
        { sizeof(tensorflow::Scope) },
        { -1 },
        { sizeof(tensorflow::ClientSession) },
        { sizeof(std::unordered_map<string, int>) },
        { sizeof(std::string) },
        { sizeof(std::vector<std::string>::iterator) },
        { sizeof(std::vector<std::string>) },
        { sizeof(::tensorflow::ops::Svd::Attrs), offsetof(::tensorflow::ops::Svd::Attrs, compute_uv_), offsetof(::tensorflow::ops::Svd::Attrs, full_matrices_) },
        { sizeof(::tensorflow::ops::Svd) },
        { sizeof(::tensorflow::ops::SelfAdjointEig::Attrs), offsetof(::tensorflow::ops::SelfAdjointEig::Attrs, compute_v_) },
        { sizeof(::tensorflow::ops::SelfAdjointEig) },
        { sizeof(::tensorflow::ops::Qr::Attrs), offsetof(::tensorflow::ops::Qr::Attrs, full_matrices_) },
        { sizeof(::tensorflow::ops::Qr) },
        { sizeof(::tensorflow::ops::MatrixTriangularSolve::Attrs), offsetof(::tensorflow::ops::MatrixTriangularSolve::Attrs, adjoint_), offsetof(::tensorflow::ops::MatrixTriangularSolve::Attrs, lower_) },
        { sizeof(::tensorflow::ops::MatrixTriangularSolve) },
        { sizeof(::tensorflow::ops::MatrixSolveLs::Attrs), offsetof(::tensorflow::ops::MatrixSolveLs::Attrs, fast_) },
        { sizeof(::tensorflow::ops::MatrixSolveLs) },
        { sizeof(::tensorflow::ops::MatrixSolve::Attrs), offsetof(::tensorflow::ops::MatrixSolve::Attrs, adjoint_) },
        { sizeof(::tensorflow::ops::MatrixSolve) },
        { sizeof(::tensorflow::ops::MatrixInverse::Attrs), offsetof(::tensorflow::ops::MatrixInverse::Attrs, adjoint_) },
        { sizeof(::tensorflow::ops::MatrixInverse) },
        { sizeof(::tensorflow::ops::MatrixExponential) },
        { sizeof(::tensorflow::ops::MatrixDeterminant) },
        { sizeof(::tensorflow::ops::LogMatrixDeterminant) },
        { sizeof(::tensorflow::ops::CholeskyGrad) },
        { sizeof(::tensorflow::ops::Cholesky) },
        { sizeof(::tensorflow::ops::Zeta) },
        { sizeof(::tensorflow::ops::UnsortedSegmentSum) },
        { sizeof(::tensorflow::ops::UnsortedSegmentProd) },
        { sizeof(::tensorflow::ops::UnsortedSegmentMin) },
        { sizeof(::tensorflow::ops::UnsortedSegmentMax) },
        { sizeof(::tensorflow::ops::TruncateMod) },
        { sizeof(::tensorflow::ops::TruncateDiv) },
        { sizeof(::tensorflow::ops::Tanh) },
        { sizeof(::tensorflow::ops::Tan) },
        { sizeof(::tensorflow::ops::Sum::Attrs), offsetof(::tensorflow::ops::Sum::Attrs, keep_dims_) },
        { sizeof(::tensorflow::ops::Sum) },
        { sizeof(::tensorflow::ops::Subtract) },
        { sizeof(::tensorflow::ops::SquaredDifference) },
        { sizeof(::tensorflow::ops::Square) },
        { sizeof(::tensorflow::ops::Sqrt) },
        { sizeof(::tensorflow::ops::SparseSegmentSumWithNumSegments) },
        { sizeof(::tensorflow::ops::SparseSegmentSum) },
        { sizeof(::tensorflow::ops::SparseSegmentSqrtNWithNumSegments) },
        { sizeof(::tensorflow::ops::SparseSegmentSqrtNGrad) },
        { sizeof(::tensorflow::ops::SparseSegmentSqrtN) },
        { sizeof(::tensorflow::ops::SparseSegmentMeanWithNumSegments) },
        { sizeof(::tensorflow::ops::SparseSegmentMeanGrad) },
        { sizeof(::tensorflow::ops::SparseSegmentMean) },
        { sizeof(::tensorflow::ops::SparseMatMul::Attrs), offsetof(::tensorflow::ops::SparseMatMul::Attrs, transpose_a_), offsetof(::tensorflow::ops::SparseMatMul::Attrs, transpose_b_), offsetof(::tensorflow::ops::SparseMatMul::Attrs, a_is_sparse_), offsetof(::tensorflow::ops::SparseMatMul::Attrs, b_is_sparse_) },
        { sizeof(::tensorflow::ops::SparseMatMul) },
        { sizeof(::tensorflow::ops::Sinh) },
        { sizeof(::tensorflow::ops::Sin) },
        { sizeof(::tensorflow::ops::Sign) },
        { sizeof(::tensorflow::ops::Sigmoid) },
        { sizeof(::tensorflow::ops::Where3) },
        { sizeof(::tensorflow::ops::SegmentSum) },
        { sizeof(::tensorflow::ops::SegmentProd) },
        { sizeof(::tensorflow::ops::SegmentMin) },
        { sizeof(::tensorflow::ops::SegmentMean) },
        { sizeof(::tensorflow::ops::SegmentMax) },
        { sizeof(::tensorflow::ops::Rsqrt) },
        { sizeof(::tensorflow::ops::Round) },
        { sizeof(::tensorflow::ops::Rint) },
        { sizeof(::tensorflow::ops::Requantize) },
        { sizeof(::tensorflow::ops::RequantizationRange) },
        { sizeof(::tensorflow::ops::Reciprocal) },
        { sizeof(::tensorflow::ops::RealDiv) },
        { sizeof(::tensorflow::ops::Real::Attrs), offsetof(::tensorflow::ops::Real::Attrs, Tout_) },
        { sizeof(::tensorflow::ops::Real) },
        { sizeof(::tensorflow::ops::Range) },
        { sizeof(::tensorflow::ops::QuantizedMul::Attrs), offsetof(::tensorflow::ops::QuantizedMul::Attrs, Toutput_) },
        { sizeof(::tensorflow::ops::QuantizedMul) },
        { sizeof(::tensorflow::ops::QuantizedMatMul::Attrs), offsetof(::tensorflow::ops::QuantizedMatMul::Attrs, transpose_a_), offsetof(::tensorflow::ops::QuantizedMatMul::Attrs, transpose_b_), offsetof(::tensorflow::ops::QuantizedMatMul::Attrs, Toutput_), offsetof(::tensorflow::ops::QuantizedMatMul::Attrs, Tactivation_) },
        { sizeof(::tensorflow::ops::QuantizedMatMul) },
        { sizeof(::tensorflow::ops::QuantizedAdd::Attrs), offsetof(::tensorflow::ops::QuantizedAdd::Attrs, Toutput_) },
        { sizeof(::tensorflow::ops::QuantizedAdd) },
        { sizeof(::tensorflow::ops::QuantizeDownAndShrinkRange) },
        { sizeof(::tensorflow::ops::Prod::Attrs), offsetof(::tensorflow::ops::Prod::Attrs, keep_dims_) },
        { sizeof(::tensorflow::ops::Prod) },
        { sizeof(::tensorflow::ops::Pow) },
        { sizeof(::tensorflow::ops::Polygamma) },
        { sizeof(::tensorflow::ops::NotEqual) },
        { sizeof(::tensorflow::ops::Negate) },
        { sizeof(::tensorflow::ops::Multiply) },
        { sizeof(::tensorflow::ops::Mod) },
        { sizeof(::tensorflow::ops::Minimum) },
        { sizeof(::tensorflow::ops::Min::Attrs), offsetof(::tensorflow::ops::Min::Attrs, keep_dims_) },
        { sizeof(::tensorflow::ops::Min) },
        { sizeof(::tensorflow::ops::Mean::Attrs), offsetof(::tensorflow::ops::Mean::Attrs, keep_dims_) },
        { sizeof(::tensorflow::ops::Mean) },
        { sizeof(::tensorflow::ops::Maximum) },
        { sizeof(::tensorflow::ops::Max::Attrs), offsetof(::tensorflow::ops::Max::Attrs, keep_dims_) },
        { sizeof(::tensorflow::ops::Max) },
        { sizeof(::tensorflow::ops::MatMul::Attrs), offsetof(::tensorflow::ops::MatMul::Attrs, transpose_a_), offsetof(::tensorflow::ops::MatMul::Attrs, transpose_b_) },
        { sizeof(::tensorflow::ops::MatMul) },
        { sizeof(::tensorflow::ops::LogicalOr) },
        { sizeof(::tensorflow::ops::LogicalNot) },
        { sizeof(::tensorflow::ops::LogicalAnd) },
        { sizeof(::tensorflow::ops::Log1p) },
        { sizeof(::tensorflow::ops::Log) },
        { sizeof(::tensorflow::ops::LinSpace) },
        { sizeof(::tensorflow::ops::Lgamma) },
        { sizeof(::tensorflow::ops::LessEqual) },
        { sizeof(::tensorflow::ops::Less) },
        { sizeof(::tensorflow::ops::IsNan) },
        { sizeof(::tensorflow::ops::IsInf) },
        { sizeof(::tensorflow::ops::IsFinite) },
        { sizeof(::tensorflow::ops::Inv) },
        { sizeof(::tensorflow::ops::Imag::Attrs), offsetof(::tensorflow::ops::Imag::Attrs, Tout_) },
        { sizeof(::tensorflow::ops::Imag) },
        { sizeof(::tensorflow::ops::Igammac) },
        { sizeof(::tensorflow::ops::Igamma) },
        { sizeof(::tensorflow::ops::HistogramFixedWidth::Attrs), offsetof(::tensorflow::ops::HistogramFixedWidth::Attrs, dtype_) },
        { sizeof(::tensorflow::ops::HistogramFixedWidth) },
        { sizeof(::tensorflow::ops::GreaterEqual) },
        { sizeof(::tensorflow::ops::Greater) },
        { sizeof(::tensorflow::ops::FloorMod) },
        { sizeof(::tensorflow::ops::FloorDiv) },
        { sizeof(::tensorflow::ops::Floor) },
        { sizeof(::tensorflow::ops::Expm1) },
        { sizeof(::tensorflow::ops::Exp) },
        { sizeof(::tensorflow::ops::Erfc) },
        { sizeof(::tensorflow::ops::Erf) },
        { sizeof(::tensorflow::ops::Equal) },
        { sizeof(::tensorflow::ops::Div) },
        { sizeof(::tensorflow::ops::Digamma) },
        { sizeof(::tensorflow::ops::Cumsum::Attrs), offsetof(::tensorflow::ops::Cumsum::Attrs, exclusive_), offsetof(::tensorflow::ops::Cumsum::Attrs, reverse_) },
        { sizeof(::tensorflow::ops::Cumsum) },
        { sizeof(::tensorflow::ops::Cumprod::Attrs), offsetof(::tensorflow::ops::Cumprod::Attrs, exclusive_), offsetof(::tensorflow::ops::Cumprod::Attrs, reverse_) },
        { sizeof(::tensorflow::ops::Cumprod) },
        { sizeof(::tensorflow::ops::Cross) },
        { sizeof(::tensorflow::ops::Cosh) },
        { sizeof(::tensorflow::ops::Cos) },
        { sizeof(::tensorflow::ops::Conj) },
        { sizeof(::tensorflow::ops::ComplexAbs::Attrs), offsetof(::tensorflow::ops::ComplexAbs::Attrs, Tout_) },
        { sizeof(::tensorflow::ops::ComplexAbs) },
        { sizeof(::tensorflow::ops::Complex::Attrs), offsetof(::tensorflow::ops::Complex::Attrs, Tout_) },
        { sizeof(::tensorflow::ops::Complex) },
        { sizeof(::tensorflow::ops::CompareAndBitpack) },
        { sizeof(::tensorflow::ops::ClipByValue) },
        { sizeof(::tensorflow::ops::Ceil) },
        { sizeof(class tensorflow::ops::Cast) },
        { sizeof(::tensorflow::ops::Bucketize) },
        { sizeof(::tensorflow::ops::Bincount) },
        { sizeof(::tensorflow::ops::Betainc) },
        { sizeof(::tensorflow::ops::BatchMatMul::Attrs), offsetof(::tensorflow::ops::BatchMatMul::Attrs, adj_x_), offsetof(::tensorflow::ops::BatchMatMul::Attrs, adj_y_) },
        { sizeof(::tensorflow::ops::BatchMatMul) },
        { sizeof(::tensorflow::ops::Atanh) },
        { sizeof(::tensorflow::ops::Atan2) },
        { sizeof(::tensorflow::ops::Atan) },
        { sizeof(::tensorflow::ops::Asinh) },
        { sizeof(::tensorflow::ops::Asin) },
        { sizeof(::tensorflow::ops::ArgMin::Attrs), offsetof(::tensorflow::ops::ArgMin::Attrs, output_type_) },
        { sizeof(::tensorflow::ops::ArgMin) },
        { sizeof(::tensorflow::ops::ArgMax::Attrs), offsetof(::tensorflow::ops::ArgMax::Attrs, output_type_) },
        { sizeof(::tensorflow::ops::ArgMax) },
        { sizeof(::tensorflow::ops::ApproximateEqual::Attrs), offsetof(::tensorflow::ops::ApproximateEqual::Attrs, tolerance_) },
        { sizeof(::tensorflow::ops::ApproximateEqual) },
        { sizeof(::tensorflow::ops::Any::Attrs), offsetof(::tensorflow::ops::Any::Attrs, keep_dims_) },
        { sizeof(::tensorflow::ops::Any) },
        { sizeof(::tensorflow::ops::Angle::Attrs), offsetof(::tensorflow::ops::Angle::Attrs, Tout_) },
        { sizeof(::tensorflow::ops::Angle) },
        { sizeof(::tensorflow::ops::All::Attrs), offsetof(::tensorflow::ops::All::Attrs, keep_dims_) },
        { sizeof(::tensorflow::ops::All) },
        { sizeof(::tensorflow::ops::AddV2) },
        { sizeof(::tensorflow::ops::AddN) },
        { sizeof(::tensorflow::ops::Add) },
        { sizeof(::tensorflow::ops::Acosh) },
        { sizeof(::tensorflow::ops::Acos) },
        { sizeof(::tensorflow::ops::Abs) },
        { sizeof(::TF_Output), offsetof(::TF_Output, oper), offsetof(::TF_Output, index) },
        { -1 },
        { sizeof(::TF_Input), offsetof(::TF_Input, oper), offsetof(::TF_Input, index) },
        { -1 },
        { -1 },
        { sizeof(::TF_Buffer), offsetof(::TF_Buffer, data), offsetof(::TF_Buffer, data_deallocator), offsetof(::TF_Buffer, length) },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { -1 },
        { sizeof(tensorflow::eager:: GradientTape< int*, int* (int*) >) } };
static int JavaCPP_memberOffsetSizes[223] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 2, 1, 3, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 5, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

extern "C" {

JNIEXPORT jint JNICALL JNI_OnLoad_jnijavacpp(JavaVM* vm, void* reserved);
JNIEXPORT void JNICALL JNI_OnUnload_jnijavacpp(JavaVM* vm, void* reserved);

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
    if (JNI_OnLoad_jnijavacpp(vm, reserved) == JNI_ERR) {
        return JNI_ERR;
    }
    JNIEnv* env;
    if (vm->GetEnv((void**)&env, JNI_VERSION_1_4) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_4 inside JNI_OnLoad().");
        return JNI_ERR;
    }
    if (JavaCPP_vm == vm) {
        return env->GetVersion();
    }
    JavaCPP_vm = vm;
    JavaCPP_haveAllocObject = env->functions->AllocObject != NULL;
    JavaCPP_haveNonvirtual = env->functions->CallNonvirtualVoidMethodA != NULL;
    jmethodID putMemberOffsetMID = JavaCPP_getStaticMethodID(env, 3, "putMemberOffset", "(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/Class;");
    if (putMemberOffsetMID == NULL) {
        return JNI_ERR;
    }
    for (int i = 0; i < 223 && !env->ExceptionCheck(); i++) {
        for (int j = 0; j < JavaCPP_memberOffsetSizes[i] && !env->ExceptionCheck(); j++) {
            if (env->PushLocalFrame(3) == 0) {
                jvalue args[3];
                args[0].l = env->NewStringUTF(JavaCPP_classNames[i]);
                args[1].l = JavaCPP_members[i][j] == NULL ? NULL : env->NewStringUTF(JavaCPP_members[i][j]);
                args[2].i = JavaCPP_offsets[i][j];
                jclass cls = (jclass)env->CallStaticObjectMethodA(JavaCPP_getClass(env, 3), putMemberOffsetMID, args);
                if (env->ExceptionCheck()) {
                    JavaCPP_log("Error putting member offsets for class %s.", JavaCPP_classNames[i]);
                    return JNI_ERR;
                }
                JavaCPP_classes[i] = cls == NULL ? NULL : (jclass)env->NewWeakGlobalRef(cls);
                if (env->ExceptionCheck()) {
                    JavaCPP_log("Error creating global reference of class %s.", JavaCPP_classNames[i]);
                    return JNI_ERR;
                }
                env->PopLocalFrame(NULL);
            }
        }
    }
    JavaCPP_addressFID = JavaCPP_getFieldID(env, 0, "address", "J");
    if (JavaCPP_addressFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_positionFID = JavaCPP_getFieldID(env, 0, "position", "J");
    if (JavaCPP_positionFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_limitFID = JavaCPP_getFieldID(env, 0, "limit", "J");
    if (JavaCPP_limitFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_capacityFID = JavaCPP_getFieldID(env, 0, "capacity", "J");
    if (JavaCPP_capacityFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_deallocatorFID = JavaCPP_getFieldID(env, 0, "deallocator", "Lorg/bytedeco/javacpp/Pointer$Deallocator;");
    if (JavaCPP_deallocatorFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_ownerAddressFID = JavaCPP_getFieldID(env, 2, "ownerAddress", "J");
    if (JavaCPP_ownerAddressFID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_initMID = JavaCPP_getMethodID(env, 0, "init", "(JJJJ)V");
    if (JavaCPP_initMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_arrayMID = JavaCPP_getMethodID(env, 4, "array", "()Ljava/lang/Object;");
    if (JavaCPP_arrayMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_stringMID = JavaCPP_getMethodID(env, 1, "<init>", "([B)V");
    if (JavaCPP_stringMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_getBytesMID = JavaCPP_getMethodID(env, 1, "getBytes", "()[B");
    if (JavaCPP_getBytesMID == NULL) {
        return JNI_ERR;
    }
    JavaCPP_toStringMID = JavaCPP_getMethodID(env, 5, "toString", "()Ljava/lang/String;");
    if (JavaCPP_toStringMID == NULL) {
        return JNI_ERR;
    }
    return env->GetVersion();
}


JNIEXPORT void JNICALL JNI_OnUnload(JavaVM* vm, void* reserved) {
    JNIEnv* env;
    if (vm->GetEnv((void**)&env, JNI_VERSION_1_4) != JNI_OK) {
        JavaCPP_log("Could not get JNIEnv for JNI_VERSION_1_4 inside JNI_OnUnLoad().");
        return;
    }
    for (int i = 0; i < 223; i++) {
        env->DeleteWeakGlobalRef((jweak)JavaCPP_classes[i]);
        JavaCPP_classes[i] = NULL;
    }
    JNI_OnUnload_jnijavacpp(vm, reserved);
    JavaCPP_vm = NULL;
}

JNIEXPORT jint JNICALL Java_native_1types_core_framework_DeviceAttributes_kNameFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::DeviceAttributes::kNameFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_DeviceAttributes_kDeviceTypeFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::DeviceAttributes::kDeviceTypeFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_DeviceAttributes_kPhysicalDeviceDescFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::DeviceAttributes::kPhysicalDeviceDescFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_DeviceAttributes_kLocalityFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::DeviceAttributes::kLocalityFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_DeviceAttributes_kMemoryLimitFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::DeviceAttributes::kMemoryLimitFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_DeviceAttributes_kIncarnationFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::DeviceAttributes::kIncarnationFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::DeviceAttributes* rptr = new tensorflow::DeviceAttributes[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_DeviceAttributes_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_GetMaybeArenaPointer(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    void* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->GetMaybeArenaPointer();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_descriptor(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const google::protobuf::Descriptor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const google::protobuf::Descriptor*)tensorflow::DeviceAttributes::descriptor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_default_1instance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const tensorflow::DeviceAttributes* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::DeviceAttributes*)&tensorflow::DeviceAttributes::default_instance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 6);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_InitAsDefaultInstance(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        tensorflow::DeviceAttributes::InitAsDefaultInstance();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_internal_1default_1instance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const tensorflow::DeviceAttributes* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::DeviceAttributes*)tensorflow::DeviceAttributes::internal_default_instance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 6);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_UnsafeArenaSwap(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::DeviceAttributes* ptr0 = arg0 == NULL ? NULL : (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->UnsafeArenaSwap(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_Swap(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::DeviceAttributes* ptr0 = arg0 == NULL ? NULL : (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->Swap(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_New(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::DeviceAttributes* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->New();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 6);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_CopyFrom__Lnative_1types_core_framework_DeviceAttributes_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::DeviceAttributes* ptr0 = arg0 == NULL ? NULL : (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->CopyFrom(*(const tensorflow::DeviceAttributes*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_CopyFrom__Lnative_1types_core_common_MessageLite_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    google::protobuf::MessageLite* ptr0 = arg0 == NULL ? NULL : (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->CopyFrom(*(const google::protobuf::Message*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_MergeFrom__Lnative_1types_core_framework_DeviceAttributes_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::DeviceAttributes* ptr0 = arg0 == NULL ? NULL : (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->MergeFrom(*(const tensorflow::DeviceAttributes*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_MergeFrom__Lnative_1types_core_common_MessageLite_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    google::protobuf::MessageLite* ptr0 = arg0 == NULL ? NULL : (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->MergeFrom(*(const google::protobuf::Message*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_Clear(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Clear();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_DeviceAttributes_IsInitialized(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsInitialized();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_core_framework_DeviceAttributes_ByteSizeLong(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)ptr->ByteSizeLong();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_InternalSerializeWithCachedSizesToArray__ZLorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jboolean arg0, jobject arg1) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_InternalSerializeWithCachedSizesToArray__ZLjava_nio_ByteBuffer_2(JNIEnv* env, jobject obj, jboolean arg0, jobject arg1) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL);
        }
    }
    jobject rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        jlong rcapacity = rptr != NULL ? 1 : 0;
        if (rptr != NULL) {
            jlong rcapacityptr = rcapacity * sizeof(rptr[0]);
            rarg = env->NewDirectByteBuffer((void*)rptr, rcapacityptr < INT_MAX ? rcapacityptr : INT_MAX);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jbyteArray JNICALL Java_native_1types_core_framework_DeviceAttributes_InternalSerializeWithCachedSizesToArray__Z_3B(JNIEnv* env, jobject obj, jboolean arg0, jbyteArray arg1) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : env->GetByteArrayElements(arg1, NULL);
    jbyteArray rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        jlong rcapacity = rptr != NULL ? 1 : 0;
        if (rptr != NULL) {
            rarg = env->NewByteArray(rcapacity < INT_MAX ? rcapacity : INT_MAX);
            env->SetByteArrayRegion(rarg, 0, rcapacity < INT_MAX ? rcapacity : INT_MAX, (jbyte*)rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arg1 != NULL) env->ReleaseByteArrayElements(arg1, (jbyte*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_DeviceAttributes_GetCachedSize(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->GetCachedSize();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_GetMetadata(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    google::protobuf::Metadata* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::Metadata*)new (std::nothrow) google::protobuf::Metadata(ptr->GetMetadata());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_org_bytedeco_javacpp_Pointer_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_clear_1name(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_name();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1name__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_name((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1name__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_name((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1name__Ljava_lang_String_2J(JNIEnv* env, jobject obj, jstring arg0, jlong arg1) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jthrowable exc = NULL;
    try {
        ptr->set_name(ptr0, (size_t)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1name__Lorg_bytedeco_javacpp_BytePointer_2J(JNIEnv* env, jobject obj, jobject arg0, jlong arg1) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->set_name((const char*)ptr0, (size_t)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_mutable_1name(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->mutable_name());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_release_1name(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->release_name());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1allocated_1name(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0((char*)ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_allocated_name((std::string*)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    char* rptr0 = (char*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (char*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_unsafe_1arena_1release_1name(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->unsafe_arena_release_name());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_unsafe_1arena_1set_1allocated_1name(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0((char*)ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->unsafe_arena_set_allocated_name((std::string*)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    char* rptr0 = (char*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (char*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_clear_1device_1type(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_device_type();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_device_1type(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->device_type());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1device_1type__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_device_type((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1device_1type__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_device_type((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1device_1type__Lorg_bytedeco_javacpp_BytePointer_2J(JNIEnv* env, jobject obj, jobject arg0, jlong arg1) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->set_device_type((const char*)ptr0, (size_t)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1device_1type__Ljava_lang_String_2J(JNIEnv* env, jobject obj, jstring arg0, jlong arg1) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jthrowable exc = NULL;
    try {
        ptr->set_device_type(ptr0, (size_t)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_mutable_1device_1type(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->mutable_device_type());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_release_1device_1type(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->release_device_type());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1allocated_1device_1type(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0((char*)ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_allocated_device_type((std::string*)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    char* rptr0 = (char*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (char*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_DeviceAttributes_has_1locality(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->has_locality();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_DeviceAttributes_kIndexInFileMessages(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::DeviceAttributes::kIndexInFileMessages;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_unsafe_1arena_1release_1device_1type(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->unsafe_arena_release_device_type());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_unsafe_1arena_1set_1allocated_1device_1type(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0((char*)ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->unsafe_arena_set_allocated_device_type((std::string*)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    char* rptr0 = (char*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (char*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_clear_1physical_1device_1desc(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_physical_device_desc();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_physical_1device_1desc(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->physical_device_desc());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1physical_1device_1desc__Lorg_bytedeco_javacpp_BytePointer_2J(JNIEnv* env, jobject obj, jobject arg0, jlong arg1) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->set_physical_device_desc((const char*)ptr0, (size_t)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1physical_1device_1desc__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_physical_device_desc((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1physical_1device_1desc__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_physical_device_desc((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1physical_1device_1desc__Ljava_lang_String_2J(JNIEnv* env, jobject obj, jstring arg0, jlong arg1) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jthrowable exc = NULL;
    try {
        ptr->set_physical_device_desc(ptr0, (size_t)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_mutable_1physical_1device_1desc(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->mutable_physical_device_desc());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_release_1physical_1device_1desc(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->release_physical_device_desc());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1allocated_1physical_1device_1desc(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0((char*)ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_allocated_physical_device_desc((std::string*)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    char* rptr0 = (char*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (char*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_unsafe_1arena_1release_1physical_1device_1desc(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->unsafe_arena_release_physical_device_desc());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_unsafe_1arena_1set_1allocated_1physical_1device_1desc(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0((char*)ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->unsafe_arena_set_allocated_physical_device_desc((std::string*)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    char* rptr0 = (char*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (char*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_clear_1locality(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_locality();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_clear_1memory_1limit(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_memory_limit();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jlong JNICALL Java_native_1types_core_framework_DeviceAttributes_memory_1limit(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        google::protobuf::int64 rval = (google::protobuf::int64)ptr->memory_limit();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1memory_1limit(JNIEnv* env, jobject obj, jlong arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_memory_limit((google::protobuf::int64)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_clear_1incarnation(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_incarnation();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jlong JNICALL Java_native_1types_core_framework_DeviceAttributes_incarnation(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        google::protobuf::uint64 rval = (google::protobuf::uint64)ptr->incarnation();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_set_1incarnation(JNIEnv* env, jobject obj, jlong arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_incarnation((google::protobuf::uint64)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_name(JNIEnv* env, jobject obj) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->name());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_DeviceAttributes_put(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr = (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::DeviceAttributes* ptr0 = arg0 == NULL ? NULL : (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    tensorflow::DeviceAttributes* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*(const tensorflow::DeviceAttributes*)ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 6);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        tensorflow::DeviceAttributes* rptr = new tensorflow::DeviceAttributes();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_DeviceAttributes_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_DeviceAttributes_allocate__Lnative_1types_core_framework_DeviceAttributes_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::DeviceAttributes* ptr0 = arg0 == NULL ? NULL : (tensorflow::DeviceAttributes*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::DeviceAttributes* rptr = new tensorflow::DeviceAttributes(*(const tensorflow::DeviceAttributes*)ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_DeviceAttributes_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_core_framework_GraphDef_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::GraphDef* rptr = new tensorflow::GraphDef[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_GraphDef_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_GraphDef_GetMaybeArenaPointer(JNIEnv* env, jobject obj) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    void* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->GetMaybeArenaPointer();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_GraphDef_descriptor(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const google::protobuf::Descriptor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const google::protobuf::Descriptor*)tensorflow::GraphDef::descriptor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_GraphDef_default_1instance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const tensorflow::GraphDef* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::GraphDef*)&tensorflow::GraphDef::default_instance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_GraphDef_InitAsDefaultInstance(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        tensorflow::GraphDef::InitAsDefaultInstance();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_GraphDef_internal_1default_1instance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const tensorflow::GraphDef* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::GraphDef*)tensorflow::GraphDef::internal_default_instance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_GraphDef_UnsafeArenaSwap(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::GraphDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->UnsafeArenaSwap(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_GraphDef_Swap(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::GraphDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->Swap(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_GraphDef_New(JNIEnv* env, jobject obj) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::GraphDef* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->New();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_GraphDef_CopyFrom__Lnative_1types_core_framework_GraphDef_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::GraphDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->CopyFrom(*(const tensorflow::GraphDef*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_GraphDef_CopyFrom__Lnative_1types_core_common_MessageLite_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    google::protobuf::MessageLite* ptr0 = arg0 == NULL ? NULL : (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->CopyFrom(*(const google::protobuf::Message*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_GraphDef_MergeFrom__Lnative_1types_core_framework_GraphDef_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::GraphDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->MergeFrom(*(const tensorflow::GraphDef*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_GraphDef_MergeFrom__Lnative_1types_core_common_MessageLite_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    google::protobuf::MessageLite* ptr0 = arg0 == NULL ? NULL : (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->MergeFrom(*(const google::protobuf::Message*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_GraphDef_Clear(JNIEnv* env, jobject obj) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Clear();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_GraphDef_IsInitialized(JNIEnv* env, jobject obj) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsInitialized();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_core_framework_GraphDef_ByteSizeLong(JNIEnv* env, jobject obj) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)ptr->ByteSizeLong();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jbyteArray JNICALL Java_native_1types_core_framework_GraphDef_InternalSerializeWithCachedSizesToArray__Z_3B(JNIEnv* env, jobject obj, jboolean arg0, jbyteArray arg1) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : env->GetByteArrayElements(arg1, NULL);
    jbyteArray rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        jlong rcapacity = rptr != NULL ? 1 : 0;
        if (rptr != NULL) {
            rarg = env->NewByteArray(rcapacity < INT_MAX ? rcapacity : INT_MAX);
            env->SetByteArrayRegion(rarg, 0, rcapacity < INT_MAX ? rcapacity : INT_MAX, (jbyte*)rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arg1 != NULL) env->ReleaseByteArrayElements(arg1, (jbyte*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_GraphDef_InternalSerializeWithCachedSizesToArray__ZLjava_nio_ByteBuffer_2(JNIEnv* env, jobject obj, jboolean arg0, jobject arg1) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL);
        }
    }
    jobject rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        jlong rcapacity = rptr != NULL ? 1 : 0;
        if (rptr != NULL) {
            jlong rcapacityptr = rcapacity * sizeof(rptr[0]);
            rarg = env->NewDirectByteBuffer((void*)rptr, rcapacityptr < INT_MAX ? rcapacityptr : INT_MAX);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_GraphDef_InternalSerializeWithCachedSizesToArray__ZLorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jboolean arg0, jobject arg1) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_GraphDef_GetCachedSize(JNIEnv* env, jobject obj) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->GetCachedSize();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_GraphDef_GetMetadata(JNIEnv* env, jobject obj) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    google::protobuf::Metadata* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::Metadata*)new (std::nothrow) google::protobuf::Metadata(ptr->GetMetadata());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_org_bytedeco_javacpp_Pointer_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_GraphDef_kIndexInFileMessages(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::GraphDef::kIndexInFileMessages;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_GraphDef_kLibraryFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::GraphDef::kLibraryFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_GraphDef_kVersionsFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::GraphDef::kVersionsFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_GraphDef_kVersionFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::GraphDef::kVersionFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_GraphDef_clear_1node(JNIEnv* env, jobject obj) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_node();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_GraphDef_has_1library(JNIEnv* env, jobject obj) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->has_library();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_GraphDef_clear_1library(JNIEnv* env, jobject obj) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_library();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_GraphDef_has_1versions(JNIEnv* env, jobject obj) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->has_versions();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_GraphDef_clear_1versions(JNIEnv* env, jobject obj) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_versions();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_GraphDef_clear_1version(JNIEnv* env, jobject obj) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_version();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_GraphDef_set_1version(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_version((google::protobuf::int32)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_GraphDef_kNodeFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::GraphDef::kNodeFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_GraphDef_node_1size(JNIEnv* env, jobject obj) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->node_size();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_GraphDef_put(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::GraphDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    tensorflow::GraphDef* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*(const tensorflow::GraphDef*)ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_GraphDef_version(JNIEnv* env, jobject obj) {
    tensorflow::GraphDef* ptr = (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        google::protobuf::int32 rval = (google::protobuf::int32)ptr->version();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_GraphDef_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        tensorflow::GraphDef* rptr = new tensorflow::GraphDef();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_GraphDef_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_GraphDef_allocate__Lnative_1types_core_framework_GraphDef_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::GraphDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::GraphDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::GraphDef* rptr = new tensorflow::GraphDef(*(const tensorflow::GraphDef*)ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_GraphDef_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jint JNICALL Java_native_1types_core_framework_OpDef_kNameFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::OpDef::kNameFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::OpDef* rptr = new tensorflow::OpDef[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_OpDef_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_GetMaybeArenaPointer(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    void* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->GetMaybeArenaPointer();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_descriptor(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const google::protobuf::Descriptor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const google::protobuf::Descriptor*)tensorflow::OpDef::descriptor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_default_1instance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const tensorflow::OpDef* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::OpDef*)&tensorflow::OpDef::default_instance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_InitAsDefaultInstance(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        tensorflow::OpDef::InitAsDefaultInstance();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_internal_1default_1instance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const tensorflow::OpDef* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::OpDef*)tensorflow::OpDef::internal_default_instance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_UnsafeArenaSwap(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::OpDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->UnsafeArenaSwap(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_Swap(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::OpDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->Swap(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_New(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::OpDef* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->New();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_CopyFrom__Lnative_1types_core_common_MessageLite_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    google::protobuf::MessageLite* ptr0 = arg0 == NULL ? NULL : (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->CopyFrom(*(const google::protobuf::Message*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_CopyFrom__Lnative_1types_core_framework_OpDef_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::OpDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->CopyFrom(*(const tensorflow::OpDef*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_MergeFrom__Lnative_1types_core_framework_OpDef_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::OpDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->MergeFrom(*(const tensorflow::OpDef*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_MergeFrom__Lnative_1types_core_common_MessageLite_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    google::protobuf::MessageLite* ptr0 = arg0 == NULL ? NULL : (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->MergeFrom(*(const google::protobuf::Message*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_Clear(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Clear();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_OpDef_IsInitialized(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsInitialized();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_core_framework_OpDef_ByteSizeLong(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)ptr->ByteSizeLong();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jbyteArray JNICALL Java_native_1types_core_framework_OpDef_InternalSerializeWithCachedSizesToArray__Z_3B(JNIEnv* env, jobject obj, jboolean arg0, jbyteArray arg1) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : env->GetByteArrayElements(arg1, NULL);
    jbyteArray rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        jlong rcapacity = rptr != NULL ? 1 : 0;
        if (rptr != NULL) {
            rarg = env->NewByteArray(rcapacity < INT_MAX ? rcapacity : INT_MAX);
            env->SetByteArrayRegion(rarg, 0, rcapacity < INT_MAX ? rcapacity : INT_MAX, (jbyte*)rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arg1 != NULL) env->ReleaseByteArrayElements(arg1, (jbyte*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_InternalSerializeWithCachedSizesToArray__ZLjava_nio_ByteBuffer_2(JNIEnv* env, jobject obj, jboolean arg0, jobject arg1) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL);
        }
    }
    jobject rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        jlong rcapacity = rptr != NULL ? 1 : 0;
        if (rptr != NULL) {
            jlong rcapacityptr = rcapacity * sizeof(rptr[0]);
            rarg = env->NewDirectByteBuffer((void*)rptr, rcapacityptr < INT_MAX ? rcapacityptr : INT_MAX);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_InternalSerializeWithCachedSizesToArray__ZLorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jboolean arg0, jobject arg1) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_OpDef_GetCachedSize(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->GetCachedSize();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_GetMetadata(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    google::protobuf::Metadata* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::Metadata*)new (std::nothrow) google::protobuf::Metadata(ptr->GetMetadata());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_org_bytedeco_javacpp_Pointer_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_clear_1name(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_name();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1name__Ljava_lang_String_2J(JNIEnv* env, jobject obj, jstring arg0, jlong arg1) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jthrowable exc = NULL;
    try {
        ptr->set_name(ptr0, (size_t)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1name__Lorg_bytedeco_javacpp_BytePointer_2J(JNIEnv* env, jobject obj, jobject arg0, jlong arg1) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->set_name((const char*)ptr0, (size_t)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1name__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_name((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1name__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_name((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_mutable_1name(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->mutable_name());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_release_1name(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->release_name());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1allocated_1name(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0((char*)ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_allocated_name((std::string*)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    char* rptr0 = (char*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (char*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_unsafe_1arena_1release_1name(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->unsafe_arena_release_name());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_unsafe_1arena_1set_1allocated_1name(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0((char*)ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->unsafe_arena_set_allocated_name((std::string*)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    char* rptr0 = (char*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (char*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_OpDef_kIndexInFileMessages(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::OpDef::kIndexInFileMessages;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_OpDef_kAllowsUninitializedInputFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::OpDef::kAllowsUninitializedInputFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_OpDef_kOutputArgFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::OpDef::kOutputArgFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_OpDef_kAttrFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::OpDef::kAttrFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_OpDef_kSummaryFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::OpDef::kSummaryFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_OpDef_kDescriptionFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::OpDef::kDescriptionFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_OpDef_kDeprecationFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::OpDef::kDeprecationFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_OpDef_kIsCommutativeFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::OpDef::kIsCommutativeFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_OpDef_kIsAggregateFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::OpDef::kIsAggregateFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_OpDef_kIsStatefulFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::OpDef::kIsStatefulFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_OpDef_output_1arg_1size(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->output_arg_size();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_clear_1output_1arg(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_output_arg();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_OpDef_attr_1size(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->attr_size();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_clear_1attr(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_attr();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_clear_1summary(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_summary();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_summary(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->summary());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1summary__Lorg_bytedeco_javacpp_BytePointer_2J(JNIEnv* env, jobject obj, jobject arg0, jlong arg1) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->set_summary((const char*)ptr0, (size_t)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1summary__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_summary((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1summary__Ljava_lang_String_2J(JNIEnv* env, jobject obj, jstring arg0, jlong arg1) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jthrowable exc = NULL;
    try {
        ptr->set_summary(ptr0, (size_t)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1summary__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_summary((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_mutable_1summary(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->mutable_summary());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_release_1summary(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->release_summary());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1allocated_1summary(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0((char*)ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_allocated_summary((std::string*)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    char* rptr0 = (char*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (char*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_unsafe_1arena_1release_1summary(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->unsafe_arena_release_summary());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_unsafe_1arena_1set_1allocated_1summary(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0((char*)ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->unsafe_arena_set_allocated_summary((std::string*)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    char* rptr0 = (char*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (char*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_clear_1description(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_description();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_description(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->description());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1description__Lorg_bytedeco_javacpp_BytePointer_2J(JNIEnv* env, jobject obj, jobject arg0, jlong arg1) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->set_description((const char*)ptr0, (size_t)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1description__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_description((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1description__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_description((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1description__Ljava_lang_String_2J(JNIEnv* env, jobject obj, jstring arg0, jlong arg1) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jthrowable exc = NULL;
    try {
        ptr->set_description(ptr0, (size_t)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_mutable_1description(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->mutable_description());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_release_1description(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->release_description());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1allocated_1description(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0((char*)ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_allocated_description((std::string*)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    char* rptr0 = (char*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (char*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_unsafe_1arena_1release_1description(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->unsafe_arena_release_description());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_unsafe_1arena_1set_1allocated_1description(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0((char*)ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->unsafe_arena_set_allocated_description((std::string*)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    char* rptr0 = (char*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (char*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_OpDef_has_1deprecation(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->has_deprecation();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_clear_1deprecation(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_deprecation();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_clear_1is_1commutative(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_is_commutative();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_OpDef_is_1commutative(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->is_commutative();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1is_1commutative(JNIEnv* env, jobject obj, jboolean arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_is_commutative((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_clear_1is_1aggregate(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_is_aggregate();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_OpDef_is_1aggregate(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->is_aggregate();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1is_1aggregate(JNIEnv* env, jobject obj, jboolean arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_is_aggregate((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_clear_1is_1stateful(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_is_stateful();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_OpDef_is_1stateful(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->is_stateful();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1is_1stateful(JNIEnv* env, jobject obj, jboolean arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_is_stateful((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_clear_1allows_1uninitialized_1input(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_allows_uninitialized_input();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_OpDef_allows_1uninitialized_1input(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->allows_uninitialized_input();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_set_1allows_1uninitialized_1input(JNIEnv* env, jobject obj, jboolean arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_allows_uninitialized_input((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_name(JNIEnv* env, jobject obj) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->name());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpDef_put(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr = (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::OpDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    tensorflow::OpDef* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*(const tensorflow::OpDef*)ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 11);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        tensorflow::OpDef* rptr = new tensorflow::OpDef();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_OpDef_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpDef_allocate__Lnative_1types_core_framework_OpDef_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::OpDef* rptr = new tensorflow::OpDef(*(const tensorflow::OpDef*)ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_OpDef_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_core_framework_OpRegistrationData_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::OpRegistrationData* rptr = new tensorflow::OpRegistrationData[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_OpRegistrationData_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpRegistrationData_op_1def__(JNIEnv* env, jobject obj) {
    tensorflow::OpRegistrationData* ptr = (tensorflow::OpRegistrationData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::OpDef* rptr;
    rptr = &ptr->op_def;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 11);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpRegistrationData_op_1def__Lnative_1types_core_framework_OpDef_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpRegistrationData* ptr = (tensorflow::OpRegistrationData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::OpDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->op_def = *ptr0;
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_OpRegistrationData_is_1function_1op__(JNIEnv* env, jobject obj) {
    tensorflow::OpRegistrationData* ptr = (tensorflow::OpRegistrationData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->is_function_op;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpRegistrationData_is_1function_1op__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    tensorflow::OpRegistrationData* ptr = (tensorflow::OpRegistrationData*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->is_function_op = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpRegistrationData_allocate__Lnative_1types_core_framework_OpDef_2Lorg_bytedeco_javacpp_Pointer_2Z(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jboolean arg2) {
    tensorflow::OpDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        tensorflow::OpRegistrationData* rptr = new tensorflow::OpRegistrationData(*(const tensorflow::OpDef*)ptr0, *(const tensorflow::OpShapeInferenceFn*)ptr1, (bool)arg2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_OpRegistrationData_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpRegistrationData_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        tensorflow::OpRegistrationData* rptr = new tensorflow::OpRegistrationData();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_OpRegistrationData_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpRegistrationData_allocate__Lnative_1types_core_framework_OpDef_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::OpRegistrationData* rptr = new tensorflow::OpRegistrationData(*(const tensorflow::OpDef*)ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_OpRegistrationData_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpRegistrationData_allocate__Lnative_1types_core_framework_OpDef_2Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::OpDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        tensorflow::OpRegistrationData* rptr = new tensorflow::OpRegistrationData(*(const tensorflow::OpDef*)ptr0, *(const tensorflow::OpShapeInferenceFn*)ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_OpRegistrationData_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_core_framework_OpRegistry_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::OpRegistry* rptr = new tensorflow::OpRegistry[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_OpRegistry_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpRegistry_DebugString(JNIEnv* env, jobject obj, jboolean arg0) {
    tensorflow::OpRegistry* ptr = (tensorflow::OpRegistry*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->DebugString((bool)arg0));
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpRegistry_Global(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    tensorflow::OpRegistry* rptr;
    jthrowable exc = NULL;
    try {
        rptr = tensorflow::OpRegistry::Global();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 13);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpRegistry_GetRegisteredOps(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpRegistry* ptr = (tensorflow::OpRegistry*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::OpDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    VectorAdapter< tensorflow::OpDef > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->GetRegisteredOps(adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    tensorflow::OpDef* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &VectorAdapter< tensorflow::OpDef >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpRegistry_GetOpRegistrationData(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpRegistry* ptr = (tensorflow::OpRegistry*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::OpRegistrationData* ptr0 = arg0 == NULL ? NULL : (tensorflow::OpRegistrationData*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    VectorAdapter< tensorflow::OpRegistrationData > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->GetOpRegistrationData(adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    tensorflow::OpRegistrationData* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &VectorAdapter< tensorflow::OpRegistrationData >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpRegistry_SetWatcher(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpRegistry* ptr = (tensorflow::OpRegistry*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(ptr->SetWatcher(*(const tensorflow::OpRegistry::Watcher*)ptr0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpRegistry_ProcessRegistrations(JNIEnv* env, jobject obj) {
    tensorflow::OpRegistry* ptr = (tensorflow::OpRegistry*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(ptr->ProcessRegistrations());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpRegistry_DeferRegistrations(JNIEnv* env, jobject obj) {
    tensorflow::OpRegistry* ptr = (tensorflow::OpRegistry*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->DeferRegistrations();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpRegistry_ClearDeferredRegistrations(JNIEnv* env, jobject obj) {
    tensorflow::OpRegistry* ptr = (tensorflow::OpRegistry*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->ClearDeferredRegistrations();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpRegistry_Register(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpRegistry* ptr = (tensorflow::OpRegistry*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->Register(*(const tensorflow::OpRegistry::OpRegistrationDataFactory*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpRegistry_LookUp__Ljava_lang_String_2Lnative_1types_core_framework_OpRegistrationData_2(JNIEnv* env, jobject obj, jstring arg0, jobject arg1) {
    tensorflow::OpRegistry* ptr = (tensorflow::OpRegistry*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    tensorflow::OpRegistrationData* ptr1 = arg1 == NULL ? NULL : (tensorflow::OpRegistrationData*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(ptr->LookUp((std::string&)adapter0, (const tensorflow::OpRegistrationData**)(arg1 == NULL ? NULL : &ptr1)));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    ptr1 -= position1;
    if (arg1 != NULL) env->SetLongField(arg1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpRegistry_LookUp__Lorg_bytedeco_javacpp_BytePointer_2Lnative_1types_core_framework_OpRegistrationData_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::OpRegistry* ptr = (tensorflow::OpRegistry*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    tensorflow::OpRegistrationData* ptr1 = arg1 == NULL ? NULL : (tensorflow::OpRegistrationData*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(ptr->LookUp((std::string&)adapter0, (const tensorflow::OpRegistrationData**)(arg1 == NULL ? NULL : &ptr1)));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    ptr1 -= position1;
    if (arg1 != NULL) env->SetLongField(arg1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpRegistry_LookUp__Lorg_bytedeco_javacpp_BytePointer_2Lorg_bytedeco_javacpp_PointerPointer_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::OpRegistry* ptr = (tensorflow::OpRegistry*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    void** ptr1 = arg1 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(ptr->LookUp((std::string&)adapter0, (const tensorflow::OpRegistrationData**)ptr1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_OpRegistry_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        tensorflow::OpRegistry* rptr = new tensorflow::OpRegistry();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_OpRegistry_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpRegistryInterface_LookUp__Lorg_bytedeco_javacpp_BytePointer_2Lnative_1types_core_framework_OpRegistrationData_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::OpRegistryInterface* ptr = (tensorflow::OpRegistryInterface*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    tensorflow::OpRegistrationData* ptr1 = arg1 == NULL ? NULL : (tensorflow::OpRegistrationData*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(ptr->LookUp((std::string&)adapter0, (const tensorflow::OpRegistrationData**)(arg1 == NULL ? NULL : &ptr1)));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    ptr1 -= position1;
    if (arg1 != NULL) env->SetLongField(arg1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpRegistryInterface_LookUp__Lorg_bytedeco_javacpp_BytePointer_2Lorg_bytedeco_javacpp_PointerPointer_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::OpRegistryInterface* ptr = (tensorflow::OpRegistryInterface*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    void** ptr1 = arg1 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(ptr->LookUp((std::string&)adapter0, (const tensorflow::OpRegistrationData**)ptr1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpRegistryInterface_LookUp__Ljava_lang_String_2Lnative_1types_core_framework_OpRegistrationData_2(JNIEnv* env, jobject obj, jstring arg0, jobject arg1) {
    tensorflow::OpRegistryInterface* ptr = (tensorflow::OpRegistryInterface*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    tensorflow::OpRegistrationData* ptr1 = arg1 == NULL ? NULL : (tensorflow::OpRegistrationData*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(ptr->LookUp((std::string&)adapter0, (const tensorflow::OpRegistrationData**)(arg1 == NULL ? NULL : &ptr1)));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    ptr1 -= position1;
    if (arg1 != NULL) env->SetLongField(arg1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpRegistryInterface_LookUpOpDef__Lorg_bytedeco_javacpp_BytePointer_2Lnative_1types_core_framework_OpDef_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::OpRegistryInterface* ptr = (tensorflow::OpRegistryInterface*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    tensorflow::OpDef* ptr1 = arg1 == NULL ? NULL : (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(ptr->LookUpOpDef((std::string&)adapter0, (const tensorflow::OpDef**)(arg1 == NULL ? NULL : &ptr1)));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    ptr1 -= position1;
    if (arg1 != NULL) env->SetLongField(arg1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpRegistryInterface_LookUpOpDef__Lorg_bytedeco_javacpp_BytePointer_2Lorg_bytedeco_javacpp_PointerPointer_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::OpRegistryInterface* ptr = (tensorflow::OpRegistryInterface*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    void** ptr1 = arg1 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(ptr->LookUpOpDef((std::string&)adapter0, (const tensorflow::OpDef**)ptr1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_OpRegistryInterface_LookUpOpDef__Ljava_lang_String_2Lnative_1types_core_framework_OpDef_2(JNIEnv* env, jobject obj, jstring arg0, jobject arg1) {
    tensorflow::OpRegistryInterface* ptr = (tensorflow::OpRegistryInterface*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    tensorflow::OpDef* ptr1 = arg1 == NULL ? NULL : (tensorflow::OpDef*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(ptr->LookUpOpDef((std::string&)adapter0, (const tensorflow::OpDef**)(arg1 == NULL ? NULL : &ptr1)));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    ptr1 -= position1;
    if (arg1 != NULL) env->SetLongField(arg1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_native_1types_core_framework_StringTensorPairVector_second__J(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<std::pair<std::string,tensorflow::Tensor> >* ptr = (std::vector<std::pair<std::string,tensorflow::Tensor> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &(*ptr).at((size_t)arg0).second;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_StringTensorPairVector_second__JLnative_1types_core_framework_Tensor_2(JNIEnv* env, jobject obj, jlong arg0, jobject arg1) {
    std::vector<std::pair<std::string,tensorflow::Tensor> >* ptr = (std::vector<std::pair<std::string,tensorflow::Tensor> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Tensor* ptr1 = arg1 == NULL ? NULL : (tensorflow::Tensor*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0).second = *ptr1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_StringTensorPairVector_put(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<std::pair<std::string,tensorflow::Tensor> >* ptr = (std::vector<std::pair<std::string,tensorflow::Tensor> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<std::pair<std::string,tensorflow::Tensor> >* ptr0 = arg0 == NULL ? NULL : (std::vector<std::pair<std::string,tensorflow::Tensor> >*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::vector<std::pair<std::string,tensorflow::Tensor> >* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 16);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_core_framework_StringTensorPairVector_size(JNIEnv* env, jobject obj) {
    std::vector<std::pair<std::string,tensorflow::Tensor> >* ptr = (std::vector<std::pair<std::string,tensorflow::Tensor> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rval = ptr->size();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_StringTensorPairVector_first__JLjava_lang_String_2(JNIEnv* env, jobject obj, jlong arg0, jstring arg1) {
    std::vector<std::pair<std::string,tensorflow::Tensor> >* ptr = (std::vector<std::pair<std::string,tensorflow::Tensor> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    jlong size1 = 0;
    void* owner1 = (void*)ptr1;
    StringAdapter adapter1(ptr1, size1, owner1);
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0).first = (std::string&)adapter1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_StringTensorPairVector_first__JLorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jlong arg0, jobject arg1) {
    std::vector<std::pair<std::string,tensorflow::Tensor> >* ptr = (std::vector<std::pair<std::string,tensorflow::Tensor> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong size1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_limitFID);
    void* owner1 = JavaCPP_getPointerOwner(env, arg1);
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    size1 -= position1;
    StringAdapter adapter1(ptr1, size1, owner1);
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0).first = (std::string&)adapter1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_StringTensorPairVector_first__J(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<std::pair<std::string,tensorflow::Tensor> >* ptr = (std::vector<std::pair<std::string,tensorflow::Tensor> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter((*ptr).at((size_t)arg0).first);
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_StringTensorPairVector_resize(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<std::pair<std::string,tensorflow::Tensor> >* ptr = (std::vector<std::pair<std::string,tensorflow::Tensor> >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->resize((size_t)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_StringTensorPairVector_allocate__J(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        std::vector<std::pair<std::string,tensorflow::Tensor> >* rptr = new std::vector<std::pair<std::string,tensorflow::Tensor> >((size_t)arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_StringTensorPairVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_StringTensorPairVector_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        std::vector<std::pair<std::string,tensorflow::Tensor> >* rptr = new std::vector<std::pair<std::string,tensorflow::Tensor> >();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_StringTensorPairVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_core_framework_Tensor_shape(JNIEnv* env, jobject obj) {
    tensorflow::Tensor* ptr = (tensorflow::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    const tensorflow::TensorShape* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::TensorShape*)&ptr->shape();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 17);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_Tensor_dtype(JNIEnv* env, jobject obj) {
    tensorflow::Tensor* ptr = (tensorflow::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        tensorflow::DataType rval = (tensorflow::DataType)ptr->dtype();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_Tensor_dims(JNIEnv* env, jobject obj) {
    tensorflow::Tensor* ptr = (tensorflow::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->dims();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_core_framework_Tensor_dim_1size(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::Tensor* ptr = (tensorflow::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        tensorflow::int64 rval = (tensorflow::int64)ptr->dim_size(arg0);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_Tensor_tensor_1data(JNIEnv* env, jobject obj) {
    tensorflow::Tensor* ptr = (tensorflow::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringPieceAdapter radapter(ptr->tensor_data());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringPieceAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_core_framework_Tensor_TotalBytes(JNIEnv* env, jobject obj) {
    tensorflow::Tensor* ptr = (tensorflow::Tensor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)ptr->TotalBytes();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_Tensor_allocate(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    tensorflow::TensorShape* ptr1 = arg1 == NULL ? NULL : (tensorflow::TensorShape*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        tensorflow::Tensor* rptr = new tensorflow::Tensor((tensorflow::DataType)arg0, *(const tensorflow::TensorShape*)ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_Tensor_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShapeBase_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::TensorShapeBase<tensorflow::TensorShape>* rptr = new tensorflow::TensorShapeBase<tensorflow::TensorShape>[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_TensorShapeBase_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_TensorShapeBase_dims(JNIEnv* env, jobject obj) {
    tensorflow::TensorShapeBase<tensorflow::TensorShape>* ptr = (tensorflow::TensorShapeBase<tensorflow::TensorShape>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->dims();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_core_framework_TensorShapeBase_dim_1size(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::TensorShapeBase<tensorflow::TensorShape>* ptr = (tensorflow::TensorShapeBase<tensorflow::TensorShape>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        tensorflow::int64 rval = (tensorflow::int64)ptr->dim_size(arg0);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShapeBase_AddDim(JNIEnv* env, jobject obj, jlong arg0) {
    tensorflow::TensorShapeBase<tensorflow::TensorShape>* ptr = (tensorflow::TensorShapeBase<tensorflow::TensorShape>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->AddDim((tensorflow::int64)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShapeBase_AppendShape(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::TensorShapeBase<tensorflow::TensorShape>* ptr = (tensorflow::TensorShapeBase<tensorflow::TensorShape>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::TensorShapeBase<tensorflow::TensorShape>* ptr0 = arg0 == NULL ? NULL : (tensorflow::TensorShapeBase<tensorflow::TensorShape>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->AppendShape(*(const tensorflow::TensorShapeBase<tensorflow::TensorShape>*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShapeBase_InsertDim(JNIEnv* env, jobject obj, jint arg0, jlong arg1) {
    tensorflow::TensorShapeBase<tensorflow::TensorShape>* ptr = (tensorflow::TensorShapeBase<tensorflow::TensorShape>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->InsertDim(arg0, (tensorflow::int64)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShapeBase_set_1dim(JNIEnv* env, jobject obj, jint arg0, jlong arg1) {
    tensorflow::TensorShapeBase<tensorflow::TensorShape>* ptr = (tensorflow::TensorShapeBase<tensorflow::TensorShape>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_dim(arg0, (tensorflow::int64)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShapeBase_RemoveDim(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::TensorShapeBase<tensorflow::TensorShape>* ptr = (tensorflow::TensorShapeBase<tensorflow::TensorShape>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->RemoveDim(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShapeBase_RemoveLastDims(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::TensorShapeBase<tensorflow::TensorShape>* ptr = (tensorflow::TensorShapeBase<tensorflow::TensorShape>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->RemoveLastDims(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShapeBase_RemoveDimRange(JNIEnv* env, jobject obj, jint arg0, jint arg1) {
    tensorflow::TensorShapeBase<tensorflow::TensorShape>* ptr = (tensorflow::TensorShapeBase<tensorflow::TensorShape>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->RemoveDimRange(arg0, arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_TensorShapeBase_unknown_1rank(JNIEnv* env, jobject obj) {
    tensorflow::TensorShapeBase<tensorflow::TensorShape>* ptr = (tensorflow::TensorShapeBase<tensorflow::TensorShape>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->unknown_rank();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_TensorShapeBase_IsFullyDefined(JNIEnv* env, jobject obj) {
    tensorflow::TensorShapeBase<tensorflow::TensorShape>* ptr = (tensorflow::TensorShapeBase<tensorflow::TensorShape>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsFullyDefined();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShapeBase_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        tensorflow::TensorShapeBase<tensorflow::TensorShape>* rptr = new tensorflow::TensorShapeBase<tensorflow::TensorShape>();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_TensorShapeBase_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShape_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::TensorShape* rptr = new tensorflow::TensorShape[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_TensorShape_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_TensorShape_IsSameSize(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::TensorShape* ptr = (tensorflow::TensorShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::TensorShape* ptr0 = arg0 == NULL ? NULL : (tensorflow::TensorShape*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsSameSize(*(const tensorflow::TensorShape*)ptr0);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_TensorShape_notEquals(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::TensorShape* ptr = (tensorflow::TensorShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::TensorShape* ptr0 = arg0 == NULL ? NULL : (tensorflow::TensorShape*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)((*ptr)!=(*(const tensorflow::TensorShape*)ptr0));
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_TensorShape_equals(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::TensorShape* ptr = (tensorflow::TensorShape*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::TensorShape* ptr0 = arg0 == NULL ? NULL : (tensorflow::TensorShape*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)((*ptr)==(*(const tensorflow::TensorShape*)ptr0));
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShape_allocate___3J(JNIEnv* env, jobject obj, jlongArray arg0) {
    jlong* ptr0 = arg0 == NULL ? NULL : env->GetLongArrayElements(arg0, NULL);
    jlong size0 = arg0 == NULL ? 0 : env->GetArrayLength(arg0);
    void* owner0 = (void*)ptr0;
    ArraySliceAdapter< tensorflow::int64 > adapter0((tensorflow::int64*)ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        tensorflow::TensorShape* rptr = new tensorflow::TensorShape((tensorflow::gtl::ArraySlice< tensorflow::int64 >&)adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_TensorShape_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    tensorflow::int64* rptr0 = (tensorflow::int64*)adapter0;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (tensorflow::int64*)ptr0) {
        ArraySliceAdapter< tensorflow::int64 >::deallocate(rowner0);
    }
    if (arg0 != NULL) env->ReleaseLongArrayElements(arg0, (jlong*)ptr0, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShape_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        tensorflow::TensorShape* rptr = new tensorflow::TensorShape();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_TensorShape_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShape_allocate__Ljava_nio_LongBuffer_2(JNIEnv* env, jobject obj, jobject arg0) {
    jlong* ptr0 = arg0 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg0);
    jlong size0 = arg0 == NULL ? 0 : env->GetDirectBufferCapacity(arg0);
    void* owner0 = (void*)ptr0;
    jlongArray arr0 = NULL;
    if (arg0 != NULL && ptr0 == NULL) {
        arr0 = (jlongArray)env->CallObjectMethod(arg0, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr0 = arr0 == NULL ? NULL : env->GetLongArrayElements(arr0, NULL);
            size0 = env->GetArrayLength(arr0);
        }
    }
    ArraySliceAdapter< tensorflow::int64 > adapter0((tensorflow::int64*)ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        tensorflow::TensorShape* rptr = new tensorflow::TensorShape((tensorflow::gtl::ArraySlice< tensorflow::int64 >&)adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_TensorShape_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    tensorflow::int64* rptr0 = (tensorflow::int64*)adapter0;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (tensorflow::int64*)ptr0) {
        ArraySliceAdapter< tensorflow::int64 >::deallocate(rowner0);
    }
    if (arr0 != NULL) env->ReleaseLongArrayElements(arr0, (jlong*)ptr0, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShape_allocate__Lorg_bytedeco_javacpp_LongPointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    jlong* ptr0 = arg0 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    ArraySliceAdapter< tensorflow::int64 > adapter0((tensorflow::int64*)ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        tensorflow::TensorShape* rptr = new tensorflow::TensorShape((tensorflow::gtl::ArraySlice< tensorflow::int64 >&)adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_TensorShape_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    tensorflow::int64* rptr0 = (tensorflow::int64*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (tensorflow::int64*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &ArraySliceAdapter< tensorflow::int64 >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShapeRep_Clear(JNIEnv* env, jobject obj) {
    tensorflow::TensorShapeRep* ptr = (tensorflow::TensorShapeRep*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Clear();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_TensorShapeRep_DebugString(JNIEnv* env, jobject obj) {
    tensorflow::TensorShapeRep* ptr = (tensorflow::TensorShapeRep*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->DebugString());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_TensorShapeRep_MaxDimensions(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = tensorflow::TensorShapeRep::MaxDimensions();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_core_framework_TensorShapeRep_num_1elements(JNIEnv* env, jobject obj) {
    tensorflow::TensorShapeRep* ptr = (tensorflow::TensorShapeRep*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        tensorflow::int64 rval = (tensorflow::int64)ptr->num_elements();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShapeRep_DumpRep(JNIEnv* env, jobject obj) {
    tensorflow::TensorShapeRep* ptr = (tensorflow::TensorShapeRep*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->DumpRep();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShapeRep_put(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::TensorShapeRep* ptr = (tensorflow::TensorShapeRep*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::TensorShapeRep* ptr0 = arg0 == NULL ? NULL : (tensorflow::TensorShapeRep*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ((*ptr)=(*(const tensorflow::TensorShapeRep*)ptr0));
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorShapeRep_allocate(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::TensorShapeRep* ptr0 = arg0 == NULL ? NULL : (tensorflow::TensorShapeRep*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::TensorShapeRep* rptr = new tensorflow::TensorShapeRep(*(const tensorflow::TensorShapeRep*)ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_TensorShapeRep_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_core_framework_TensorVector_00024Iterator_get(JNIEnv* env, jobject obj) {
    std::vector<tensorflow::Tensor>::iterator* ptr = (std::vector<tensorflow::Tensor>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    const tensorflow::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::Tensor*)&ptr->operator*();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_TensorVector_00024Iterator_equals(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<tensorflow::Tensor>::iterator* ptr = (std::vector<tensorflow::Tensor>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<tensorflow::Tensor>::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<tensorflow::Tensor>::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ((*ptr)==(*ptr0));
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_TensorVector_00024Iterator_increment(JNIEnv* env, jobject obj) {
    std::vector<tensorflow::Tensor>::iterator* ptr = (std::vector<tensorflow::Tensor>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<tensorflow::Tensor>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->operator++();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 20);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_native_1types_core_framework_TensorVector_end(JNIEnv* env, jobject obj) {
    std::vector<tensorflow::Tensor>* ptr = (std::vector<tensorflow::Tensor>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<tensorflow::Tensor>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<tensorflow::Tensor>::iterator(ptr->end());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_framework_TensorVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 20);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_TensorVector_begin(JNIEnv* env, jobject obj) {
    std::vector<tensorflow::Tensor>* ptr = (std::vector<tensorflow::Tensor>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<tensorflow::Tensor>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<tensorflow::Tensor>::iterator(ptr->begin());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_framework_TensorVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 20);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_TensorVector_get(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<tensorflow::Tensor>* ptr = (std::vector<tensorflow::Tensor>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &(*ptr).at((size_t)arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_TensorVector_put__JLnative_1types_core_framework_Tensor_2(JNIEnv* env, jobject obj, jlong arg0, jobject arg1) {
    std::vector<tensorflow::Tensor>* ptr = (std::vector<tensorflow::Tensor>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Tensor* ptr1 = arg1 == NULL ? NULL : (tensorflow::Tensor*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0) = *ptr1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_TensorVector_put__Lnative_1types_core_framework_TensorVector_2(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<tensorflow::Tensor>* ptr = (std::vector<tensorflow::Tensor>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<tensorflow::Tensor>* ptr0 = arg0 == NULL ? NULL : (std::vector<tensorflow::Tensor>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::vector<tensorflow::Tensor>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 21);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_core_framework_TensorVector_size(JNIEnv* env, jobject obj) {
    std::vector<tensorflow::Tensor>* ptr = (std::vector<tensorflow::Tensor>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rval = ptr->size();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorVector_resize(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<tensorflow::Tensor>* ptr = (std::vector<tensorflow::Tensor>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->resize((size_t)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorVector_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        std::vector<tensorflow::Tensor>* rptr = new std::vector<tensorflow::Tensor>();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_TensorVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_TensorVector_allocate__J(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        std::vector<tensorflow::Tensor>* rptr = new std::vector<tensorflow::Tensor>((size_t)arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_TensorVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::VersionDef* rptr = new tensorflow::VersionDef[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_VersionDef_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_VersionDef_GetMaybeArenaPointer(JNIEnv* env, jobject obj) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    void* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->GetMaybeArenaPointer();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_VersionDef_descriptor(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const google::protobuf::Descriptor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const google::protobuf::Descriptor*)tensorflow::VersionDef::descriptor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_VersionDef_default_1instance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const tensorflow::VersionDef* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::VersionDef*)&tensorflow::VersionDef::default_instance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 22);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_InitAsDefaultInstance(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        tensorflow::VersionDef::InitAsDefaultInstance();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_VersionDef_internal_1default_1instance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const tensorflow::VersionDef* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::VersionDef*)tensorflow::VersionDef::internal_default_instance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 22);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_UnsafeArenaSwap(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::VersionDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->UnsafeArenaSwap(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_Swap(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::VersionDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->Swap(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_VersionDef_New(JNIEnv* env, jobject obj) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::VersionDef* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->New();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 22);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_CopyFrom__Lnative_1types_core_framework_VersionDef_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::VersionDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->CopyFrom(*(const tensorflow::VersionDef*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_CopyFrom__Lnative_1types_core_common_MessageLite_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    google::protobuf::MessageLite* ptr0 = arg0 == NULL ? NULL : (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->CopyFrom(*(const google::protobuf::Message*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_MergeFrom__Lnative_1types_core_framework_VersionDef_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::VersionDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->MergeFrom(*(const tensorflow::VersionDef*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_MergeFrom__Lnative_1types_core_common_MessageLite_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    google::protobuf::MessageLite* ptr0 = arg0 == NULL ? NULL : (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->MergeFrom(*(const google::protobuf::Message*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_Clear(JNIEnv* env, jobject obj) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Clear();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_framework_VersionDef_IsInitialized(JNIEnv* env, jobject obj) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsInitialized();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_core_framework_VersionDef_ByteSizeLong(JNIEnv* env, jobject obj) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)ptr->ByteSizeLong();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jbyteArray JNICALL Java_native_1types_core_framework_VersionDef_InternalSerializeWithCachedSizesToArray__Z_3B(JNIEnv* env, jobject obj, jboolean arg0, jbyteArray arg1) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : env->GetByteArrayElements(arg1, NULL);
    jbyteArray rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        jlong rcapacity = rptr != NULL ? 1 : 0;
        if (rptr != NULL) {
            rarg = env->NewByteArray(rcapacity < INT_MAX ? rcapacity : INT_MAX);
            env->SetByteArrayRegion(rarg, 0, rcapacity < INT_MAX ? rcapacity : INT_MAX, (jbyte*)rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arg1 != NULL) env->ReleaseByteArrayElements(arg1, (jbyte*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_VersionDef_InternalSerializeWithCachedSizesToArray__ZLorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jboolean arg0, jobject arg1) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_VersionDef_InternalSerializeWithCachedSizesToArray__ZLjava_nio_ByteBuffer_2(JNIEnv* env, jobject obj, jboolean arg0, jobject arg1) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL);
        }
    }
    jobject rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        jlong rcapacity = rptr != NULL ? 1 : 0;
        if (rptr != NULL) {
            jlong rcapacityptr = rcapacity * sizeof(rptr[0]);
            rarg = env->NewDirectByteBuffer((void*)rptr, rcapacityptr < INT_MAX ? rcapacityptr : INT_MAX);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_VersionDef_GetCachedSize(JNIEnv* env, jobject obj) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->GetCachedSize();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_VersionDef_GetMetadata(JNIEnv* env, jobject obj) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    google::protobuf::Metadata* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::Metadata*)new (std::nothrow) google::protobuf::Metadata(ptr->GetMetadata());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_org_bytedeco_javacpp_Pointer_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_VersionDef_kIndexInFileMessages(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::VersionDef::kIndexInFileMessages;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_VersionDef_kBadConsumersFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::VersionDef::kBadConsumersFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_VersionDef_kProducerFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::VersionDef::kProducerFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_VersionDef_kMinConsumerFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::VersionDef::kMinConsumerFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_VersionDef_bad_1consumers_1size(JNIEnv* env, jobject obj) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->bad_consumers_size();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_clear_1bad_1consumers(JNIEnv* env, jobject obj) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_bad_consumers();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_VersionDef_bad_1consumers(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        google::protobuf::int32 rval = (google::protobuf::int32)ptr->bad_consumers(arg0);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_set_1bad_1consumers(JNIEnv* env, jobject obj, jint arg0, jint arg1) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_bad_consumers(arg0, (google::protobuf::int32)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_add_1bad_1consumers(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->add_bad_consumers((google::protobuf::int32)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_clear_1producer(JNIEnv* env, jobject obj) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_producer();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_VersionDef_producer(JNIEnv* env, jobject obj) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        google::protobuf::int32 rval = (google::protobuf::int32)ptr->producer();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_set_1producer(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_producer((google::protobuf::int32)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_clear_1min_1consumer(JNIEnv* env, jobject obj) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_min_consumer();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_native_1types_core_framework_VersionDef_min_1consumer(JNIEnv* env, jobject obj) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        google::protobuf::int32 rval = (google::protobuf::int32)ptr->min_consumer();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_set_1min_1consumer(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_min_consumer((google::protobuf::int32)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_framework_VersionDef_put(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::VersionDef* ptr = (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::VersionDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    tensorflow::VersionDef* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*(const tensorflow::VersionDef*)ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 22);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        tensorflow::VersionDef* rptr = new tensorflow::VersionDef();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_VersionDef_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_framework_VersionDef_allocate__Lnative_1types_core_framework_VersionDef_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::VersionDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::VersionDef* rptr = new tensorflow::VersionDef(*(const tensorflow::VersionDef*)ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_framework_VersionDef_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_core_graph_Graph_versions(JNIEnv* env, jobject obj) {
    tensorflow::Graph* ptr = (tensorflow::Graph*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    const tensorflow::VersionDef* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::VersionDef*)&ptr->versions();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 22);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_graph_Graph_op_1registry(JNIEnv* env, jobject obj) {
    tensorflow::Graph* ptr = (tensorflow::Graph*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    const tensorflow::OpRegistryInterface* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::OpRegistryInterface*)ptr->op_registry();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 23);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_graph_Graph_allocate(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::OpRegistryInterface* ptr0 = arg0 == NULL ? NULL : (tensorflow::OpRegistryInterface*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::Graph* rptr = new tensorflow::Graph((const tensorflow::OpRegistryInterface*)ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_graph_Graph_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_core_graph_Node_DebugString(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->DebugString());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_graph_Node_type_1string(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->type_string());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_graph_Node_cost_1id(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->cost_id();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_graph_Node_num_1outputs(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->num_outputs();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_graph_Node_output_1type(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        tensorflow::DataType rval = (tensorflow::DataType)ptr->output_type(arg0);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_graph_Node_requested_1device(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->requested_device());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_graph_Node_set_1requested_1device__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_requested_device((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_graph_Node_set_1requested_1device__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_requested_device((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_graph_Node_assigned_1device_1name(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->assigned_device_name());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_graph_Node_set_1assigned_1device_1name__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_assigned_device_name((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_graph_Node_set_1assigned_1device_1name__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->set_assigned_device_name((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_has_1assigned_1device_1name(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->has_assigned_device_name();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_graph_Node_assigned_1device_1name_1index(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->assigned_device_name_index();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_graph_Node_set_1assigned_1device_1name_1index(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_assigned_device_name_index(arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsSource(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsSource();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsSink(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsSink();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsOp(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsOp();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsSwitch(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsSwitch();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsMerge(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsMerge();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsEnter(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsEnter();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsExit(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsExit();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsNextIteration(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsNextIteration();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsLoopCond(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsLoopCond();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsControlTrigger(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsControlTrigger();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsSend(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsSend();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsRecv(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsRecv();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsConstant(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsConstant();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsVariable(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsVariable();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsIdentity(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsIdentity();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsGetSessionHandle(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsGetSessionHandle();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsGetSessionTensor(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsGetSessionTensor();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsDeleteSessionTensor(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsDeleteSessionTensor();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsControlFlow(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsControlFlow();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsHostSend(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsHostSend();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsHostRecv(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsHostRecv();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsScopedAllocator(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsScopedAllocator();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_graph_Node_IsMetadata(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsMetadata();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_graph_Node_ClearAttr__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->ClearAttr((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_graph_Node_ClearAttr__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        ptr->ClearAttr((std::string&)adapter0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_graph_Node_input_1edge(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    void** ptr1 = arg1 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(ptr->input_edge(arg0, (const tensorflow::Edge**)ptr1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_graph_Node_input_1node__ILorg_bytedeco_javacpp_PointerPointer_2(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    void** ptr1 = arg1 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(ptr->input_node(arg0, (const tensorflow::Node**)ptr1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_graph_Node_input_1node__ILnative_1types_core_graph_Node_2(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Node* ptr1 = arg1 == NULL ? NULL : (tensorflow::Node*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(ptr->input_node(arg0, (const tensorflow::Node**)(arg1 == NULL ? NULL : &ptr1)));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ptr1 -= position1;
    if (arg1 != NULL) env->SetLongField(arg1, JavaCPP_addressFID, ptr_to_jlong(ptr1));
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_graph_Node_num_1inputs(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->num_inputs();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_graph_Node_input_1type(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        tensorflow::DataType rval = (tensorflow::DataType)ptr->input_type(arg0);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_graph_Node_name(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->name());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_graph_Node_id(JNIEnv* env, jobject obj) {
    tensorflow::Node* ptr = (tensorflow::Node*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->id();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_native_1types_core_lib_Status_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::Status* rptr = new tensorflow::Status[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_lib_Status_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_lib_Status_notEquals(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Status* ptr = (tensorflow::Status*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Status* ptr0 = arg0 == NULL ? NULL : (tensorflow::Status*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)((*ptr)!=(*(const tensorflow::Status*)ptr0));
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_lib_Status_IgnoreError(JNIEnv* env, jobject obj) {
    tensorflow::Status* ptr = (tensorflow::Status*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->IgnoreError();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_native_1types_core_lib_Status_code(JNIEnv* env, jobject obj) {
    tensorflow::Status* ptr = (tensorflow::Status*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        tensorflow::error::Code rval = (tensorflow::error::Code)ptr->code();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_lib_Status_OK(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(tensorflow::Status::OK());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_lib_Status_ok(JNIEnv* env, jobject obj) {
    tensorflow::Status* ptr = (tensorflow::Status*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->ok();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_lib_Status_error_1message(JNIEnv* env, jobject obj) {
    tensorflow::Status* ptr = (tensorflow::Status*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->error_message());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_lib_Status_Update(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Status* ptr = (tensorflow::Status*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Status* ptr0 = arg0 == NULL ? NULL : (tensorflow::Status*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->Update(*(const tensorflow::Status*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_lib_Status_ToString(JNIEnv* env, jobject obj) {
    tensorflow::Status* ptr = (tensorflow::Status*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->ToString());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_lib_Status_put(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Status* ptr = (tensorflow::Status*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Status* ptr0 = arg0 == NULL ? NULL : (tensorflow::Status*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ((*ptr)=(*(const tensorflow::Status*)ptr0));
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_lib_Status_equals(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Status* ptr = (tensorflow::Status*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Status* ptr0 = arg0 == NULL ? NULL : (tensorflow::Status*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)((*ptr)==(*(const tensorflow::Status*)ptr0));
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_lib_Status_allocate__Lnative_1types_core_lib_Status_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Status* ptr0 = arg0 == NULL ? NULL : (tensorflow::Status*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::Status* rptr = new tensorflow::Status(*(const tensorflow::Status*)ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_lib_Status_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_lib_Status_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        tensorflow::Status* rptr = new tensorflow::Status();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_lib_Status_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_lib_Status_allocate__ILorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jint arg0, jobject arg1) {
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong size1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_limitFID);
    void* owner1 = JavaCPP_getPointerOwner(env, arg1);
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    size1 -= position1;
    StringPieceAdapter adapter1(ptr1, size1, owner1);
    jthrowable exc = NULL;
    try {
        tensorflow::Status* rptr = new tensorflow::Status((tensorflow::error::Code)arg0, (tensorflow::StringPiece&)adapter1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_lib_Status_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr1 = adapter1;
    jlong rsize1 = (jlong)adapter1.size;
    void* rowner1 = adapter1.owner;
    if (rptr1 != ptr1) {
        JavaCPP_initPointer(env, arg1, rptr1, rsize1, rowner1, &StringPieceAdapter::deallocate);
    } else {
        env->SetLongField(arg1, JavaCPP_limitFID, rsize1 + position1);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_lib_Status_allocate__ILjava_lang_String_2(JNIEnv* env, jobject obj, jint arg0, jstring arg1) {
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    jlong size1 = 0;
    void* owner1 = (void*)ptr1;
    StringPieceAdapter adapter1(ptr1, size1, owner1);
    jthrowable exc = NULL;
    try {
        tensorflow::Status* rptr = new tensorflow::Status((tensorflow::error::Code)arg0, (tensorflow::StringPiece&)adapter1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_lib_Status_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_core_common_MessageLite_GetMaybeArenaPointer(JNIEnv* env, jobject obj) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    void* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->GetMaybeArenaPointer();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_MessageLite_New(JNIEnv* env, jobject obj) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    google::protobuf::MessageLite* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->New();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 25);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_MessageLite_Clear(JNIEnv* env, jobject obj) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Clear();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_MessageLite_IsInitialized(JNIEnv* env, jobject obj) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsInitialized();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_core_common_MessageLite_ByteSizeLong(JNIEnv* env, jobject obj) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)ptr->ByteSizeLong();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_MessageLite_InternalSerializeWithCachedSizesToArray__ZLorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jboolean arg0, jobject arg1) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_MessageLite_InternalSerializeWithCachedSizesToArray__ZLjava_nio_ByteBuffer_2(JNIEnv* env, jobject obj, jboolean arg0, jobject arg1) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL);
        }
    }
    jobject rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        jlong rcapacity = rptr != NULL ? 1 : 0;
        if (rptr != NULL) {
            jlong rcapacityptr = rcapacity * sizeof(rptr[0]);
            rarg = env->NewDirectByteBuffer((void*)rptr, rcapacityptr < INT_MAX ? rcapacityptr : INT_MAX);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jbyteArray JNICALL Java_native_1types_core_common_MessageLite_InternalSerializeWithCachedSizesToArray__Z_3B(JNIEnv* env, jobject obj, jboolean arg0, jbyteArray arg1) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : env->GetByteArrayElements(arg1, NULL);
    jbyteArray rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        jlong rcapacity = rptr != NULL ? 1 : 0;
        if (rptr != NULL) {
            rarg = env->NewByteArray(rcapacity < INT_MAX ? rcapacity : INT_MAX);
            env->SetByteArrayRegion(rarg, 0, rcapacity < INT_MAX ? rcapacity : INT_MAX, (jbyte*)rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arg1 != NULL) env->ReleaseByteArrayElements(arg1, (jbyte*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_MessageLite_GetCachedSize(JNIEnv* env, jobject obj) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->GetCachedSize();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_MessageLite_GetTypeName(JNIEnv* env, jobject obj) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->GetTypeName());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_MessageLite_InitializationErrorString(JNIEnv* env, jobject obj) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->InitializationErrorString());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_MessageLite_CheckTypeAndMergeFrom(JNIEnv* env, jobject obj, jobject arg0) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    google::protobuf::MessageLite* ptr0 = arg0 == NULL ? NULL : (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->CheckTypeAndMergeFrom(*(const google::protobuf::MessageLite*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_MessageLite_ParseFromString__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->ParseFromString((std::string&)adapter0);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_MessageLite_ParseFromString__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->ParseFromString((std::string&)adapter0);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_MessageLite_ParsePartialFromString__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->ParsePartialFromString((std::string&)adapter0);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_MessageLite_ParsePartialFromString__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->ParsePartialFromString((std::string&)adapter0);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_MessageLite_ParseFromArray(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->ParseFromArray((const void*)ptr0, arg1);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_MessageLite_ParsePartialFromArray(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->ParsePartialFromArray((const void*)ptr0, arg1);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_MessageLite_SerializeToString(JNIEnv* env, jobject obj, jobject arg0) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0((char*)ptr0, size0, owner0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->SerializeToString((std::string*)adapter0);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    char* rptr0 = (char*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (char*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_MessageLite_SerializePartialToString(JNIEnv* env, jobject obj, jobject arg0) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0((char*)ptr0, size0, owner0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->SerializePartialToString((std::string*)adapter0);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    char* rptr0 = (char*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (char*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_MessageLite_SerializeToArray(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->SerializeToArray(ptr0, arg1);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_MessageLite_SerializePartialToArray(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->SerializePartialToArray(ptr0, arg1);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_MessageLite_SerializeAsString(JNIEnv* env, jobject obj) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->SerializeAsString());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_MessageLite_SerializePartialAsString(JNIEnv* env, jobject obj) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->SerializePartialAsString());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_MessageLite_AppendToString(JNIEnv* env, jobject obj, jobject arg0) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0((char*)ptr0, size0, owner0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->AppendToString((std::string*)adapter0);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    char* rptr0 = (char*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (char*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_MessageLite_AppendPartialToString(JNIEnv* env, jobject obj, jobject arg0) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0((char*)ptr0, size0, owner0);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->AppendPartialToString((std::string*)adapter0);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    char* rptr0 = (char*)adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != (char*)ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_MessageLite_ByteSize(JNIEnv* env, jobject obj) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->ByteSize();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_MessageLite_SerializeWithCachedSizesToArray__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->SerializeWithCachedSizesToArray((google::protobuf::uint8*)ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_MessageLite_SerializeWithCachedSizesToArray__Ljava_nio_ByteBuffer_2(JNIEnv* env, jobject obj, jobject arg0) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg0);
    jbyteArray arr0 = NULL;
    if (arg0 != NULL && ptr0 == NULL) {
        arr0 = (jbyteArray)env->CallObjectMethod(arg0, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr0 = arr0 == NULL ? NULL : env->GetByteArrayElements(arr0, NULL);
        }
    }
    jobject rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->SerializeWithCachedSizesToArray((google::protobuf::uint8*)ptr0);
        jlong rcapacity = rptr != NULL ? 1 : 0;
        if (rptr != NULL) {
            jlong rcapacityptr = rcapacity * sizeof(rptr[0]);
            rarg = env->NewDirectByteBuffer((void*)rptr, rcapacityptr < INT_MAX ? rcapacityptr : INT_MAX);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arr0 != NULL) env->ReleaseByteArrayElements(arr0, (jbyte*)ptr0, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jbyteArray JNICALL Java_native_1types_core_common_MessageLite_SerializeWithCachedSizesToArray___3B(JNIEnv* env, jobject obj, jbyteArray arg0) {
    google::protobuf::MessageLite* ptr = (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr0 = arg0 == NULL ? NULL : env->GetByteArrayElements(arg0, NULL);
    jbyteArray rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->SerializeWithCachedSizesToArray((google::protobuf::uint8*)ptr0);
        jlong rcapacity = rptr != NULL ? 1 : 0;
        if (rptr != NULL) {
            rarg = env->NewByteArray(rcapacity < INT_MAX ? rcapacity : INT_MAX);
            env->SetByteArrayRegion(rarg, 0, rcapacity < INT_MAX ? rcapacity : INT_MAX, (jbyte*)rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arg0 != NULL) env->ReleaseByteArrayElements(arg0, (jbyte*)ptr0, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_native_1types_core_common_RunMetadata_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::RunMetadata* rptr = new tensorflow::RunMetadata[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_common_RunMetadata_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunMetadata_GetMaybeArenaPointer(JNIEnv* env, jobject obj) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    void* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->GetMaybeArenaPointer();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunMetadata_descriptor(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const google::protobuf::Descriptor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const google::protobuf::Descriptor*)tensorflow::RunMetadata::descriptor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunMetadata_default_1instance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const tensorflow::RunMetadata* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::RunMetadata*)&tensorflow::RunMetadata::default_instance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 26);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunMetadata_InitAsDefaultInstance(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        tensorflow::RunMetadata::InitAsDefaultInstance();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunMetadata_internal_1default_1instance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const tensorflow::RunMetadata* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::RunMetadata*)tensorflow::RunMetadata::internal_default_instance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 26);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunMetadata_UnsafeArenaSwap(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::RunMetadata* ptr0 = arg0 == NULL ? NULL : (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->UnsafeArenaSwap(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunMetadata_Swap(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::RunMetadata* ptr0 = arg0 == NULL ? NULL : (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->Swap(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunMetadata_New(JNIEnv* env, jobject obj) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::RunMetadata* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->New();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 26);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunMetadata_CopyFrom__Lnative_1types_core_common_RunMetadata_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::RunMetadata* ptr0 = arg0 == NULL ? NULL : (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->CopyFrom(*(const tensorflow::RunMetadata*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunMetadata_CopyFrom__Lnative_1types_core_common_MessageLite_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    google::protobuf::MessageLite* ptr0 = arg0 == NULL ? NULL : (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->CopyFrom(*(const google::protobuf::Message*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunMetadata_MergeFrom__Lnative_1types_core_common_MessageLite_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    google::protobuf::MessageLite* ptr0 = arg0 == NULL ? NULL : (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->MergeFrom(*(const google::protobuf::Message*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunMetadata_MergeFrom__Lnative_1types_core_common_RunMetadata_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::RunMetadata* ptr0 = arg0 == NULL ? NULL : (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->MergeFrom(*(const tensorflow::RunMetadata*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunMetadata_Clear(JNIEnv* env, jobject obj) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Clear();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_RunMetadata_IsInitialized(JNIEnv* env, jobject obj) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsInitialized();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_core_common_RunMetadata_ByteSizeLong(JNIEnv* env, jobject obj) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)ptr->ByteSizeLong();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunMetadata_InternalSerializeWithCachedSizesToArray__ZLorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jboolean arg0, jobject arg1) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunMetadata_InternalSerializeWithCachedSizesToArray__ZLjava_nio_ByteBuffer_2(JNIEnv* env, jobject obj, jboolean arg0, jobject arg1) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL);
        }
    }
    jobject rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        jlong rcapacity = rptr != NULL ? 1 : 0;
        if (rptr != NULL) {
            jlong rcapacityptr = rcapacity * sizeof(rptr[0]);
            rarg = env->NewDirectByteBuffer((void*)rptr, rcapacityptr < INT_MAX ? rcapacityptr : INT_MAX);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jbyteArray JNICALL Java_native_1types_core_common_RunMetadata_InternalSerializeWithCachedSizesToArray__Z_3B(JNIEnv* env, jobject obj, jboolean arg0, jbyteArray arg1) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : env->GetByteArrayElements(arg1, NULL);
    jbyteArray rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        jlong rcapacity = rptr != NULL ? 1 : 0;
        if (rptr != NULL) {
            rarg = env->NewByteArray(rcapacity < INT_MAX ? rcapacity : INT_MAX);
            env->SetByteArrayRegion(rarg, 0, rcapacity < INT_MAX ? rcapacity : INT_MAX, (jbyte*)rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arg1 != NULL) env->ReleaseByteArrayElements(arg1, (jbyte*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunMetadata_GetCachedSize(JNIEnv* env, jobject obj) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->GetCachedSize();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunMetadata_GetMetadata(JNIEnv* env, jobject obj) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    google::protobuf::Metadata* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::Metadata*)new (std::nothrow) google::protobuf::Metadata(ptr->GetMetadata());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_org_bytedeco_javacpp_Pointer_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunMetadata_kIndexInFileMessages(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::RunMetadata::kIndexInFileMessages;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunMetadata_kPartitionGraphsFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::RunMetadata::kPartitionGraphsFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunMetadata_kStepStatsFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::RunMetadata::kStepStatsFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunMetadata_kCostGraphFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::RunMetadata::kCostGraphFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunMetadata_partition_1graphs_1size(JNIEnv* env, jobject obj) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->partition_graphs_size();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunMetadata_clear_1partition_1graphs(JNIEnv* env, jobject obj) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_partition_graphs();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunMetadata_mutable_1partition_1graphs(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::GraphDef* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->mutable_partition_graphs(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunMetadata_partition_1graphs(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    const tensorflow::GraphDef* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::GraphDef*)&ptr->partition_graphs(arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunMetadata_add_1partition_1graphs(JNIEnv* env, jobject obj) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::GraphDef* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->add_partition_graphs();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 10);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_RunMetadata_has_1step_1stats(JNIEnv* env, jobject obj) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->has_step_stats();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunMetadata_clear_1step_1stats(JNIEnv* env, jobject obj) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_step_stats();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_RunMetadata_has_1cost_1graph(JNIEnv* env, jobject obj) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->has_cost_graph();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunMetadata_clear_1cost_1graph(JNIEnv* env, jobject obj) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_cost_graph();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunMetadata_put(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::RunMetadata* ptr = (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::RunMetadata* ptr0 = arg0 == NULL ? NULL : (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    tensorflow::RunMetadata* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*(const tensorflow::RunMetadata*)ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 26);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunMetadata_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        tensorflow::RunMetadata* rptr = new tensorflow::RunMetadata();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_common_RunMetadata_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunMetadata_allocate__Lnative_1types_core_common_RunMetadata_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::RunMetadata* ptr0 = arg0 == NULL ? NULL : (tensorflow::RunMetadata*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::RunMetadata* rptr = new tensorflow::RunMetadata(*(const tensorflow::RunMetadata*)ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_common_RunMetadata_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::RunOptions* rptr = new tensorflow::RunOptions[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_common_RunOptions_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunOptions_GetMaybeArenaPointer(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    void* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->GetMaybeArenaPointer();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunOptions_descriptor(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const google::protobuf::Descriptor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const google::protobuf::Descriptor*)tensorflow::RunOptions::descriptor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunOptions_default_1instance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const tensorflow::RunOptions* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::RunOptions*)&tensorflow::RunOptions::default_instance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 27);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_InitAsDefaultInstance(JNIEnv* env, jclass cls) {
    jthrowable exc = NULL;
    try {
        tensorflow::RunOptions::InitAsDefaultInstance();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunOptions_internal_1default_1instance(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const tensorflow::RunOptions* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::RunOptions*)tensorflow::RunOptions::internal_default_instance();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 27);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_UnsafeArenaSwap(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::RunOptions* ptr0 = arg0 == NULL ? NULL : (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->UnsafeArenaSwap(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_Swap(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::RunOptions* ptr0 = arg0 == NULL ? NULL : (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->Swap(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunOptions_New(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::RunOptions* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->New();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 27);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_CopyFrom__Lnative_1types_core_common_MessageLite_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    google::protobuf::MessageLite* ptr0 = arg0 == NULL ? NULL : (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->CopyFrom(*(const google::protobuf::Message*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_CopyFrom__Lnative_1types_core_common_RunOptions_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::RunOptions* ptr0 = arg0 == NULL ? NULL : (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->CopyFrom(*(const tensorflow::RunOptions*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_MergeFrom__Lnative_1types_core_common_MessageLite_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    google::protobuf::MessageLite* ptr0 = arg0 == NULL ? NULL : (google::protobuf::MessageLite*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->MergeFrom(*(const google::protobuf::Message*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_MergeFrom__Lnative_1types_core_common_RunOptions_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::RunOptions* ptr0 = arg0 == NULL ? NULL : (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        ptr->MergeFrom(*(const tensorflow::RunOptions*)ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_Clear(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Clear();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_RunOptions_IsInitialized(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->IsInitialized();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_core_common_RunOptions_ByteSizeLong(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)ptr->ByteSizeLong();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunOptions_InternalSerializeWithCachedSizesToArray__ZLjava_nio_ByteBuffer_2(JNIEnv* env, jobject obj, jboolean arg0, jobject arg1) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg1);
    jbyteArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jbyteArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetByteArrayElements(arr1, NULL);
        }
    }
    jobject rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        jlong rcapacity = rptr != NULL ? 1 : 0;
        if (rptr != NULL) {
            jlong rcapacityptr = rcapacity * sizeof(rptr[0]);
            rarg = env->NewDirectByteBuffer((void*)rptr, rcapacityptr < INT_MAX ? rcapacityptr : INT_MAX);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arr1 != NULL) env->ReleaseByteArrayElements(arr1, (jbyte*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunOptions_InternalSerializeWithCachedSizesToArray__ZLorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jboolean arg0, jobject arg1) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jbyteArray JNICALL Java_native_1types_core_common_RunOptions_InternalSerializeWithCachedSizesToArray__Z_3B(JNIEnv* env, jobject obj, jboolean arg0, jbyteArray arg1) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : env->GetByteArrayElements(arg1, NULL);
    jbyteArray rarg = NULL;
    google::protobuf::uint8* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::uint8*)ptr->InternalSerializeWithCachedSizesToArray((bool)arg0, (google::protobuf::uint8*)ptr1);
        jlong rcapacity = rptr != NULL ? 1 : 0;
        if (rptr != NULL) {
            rarg = env->NewByteArray(rcapacity < INT_MAX ? rcapacity : INT_MAX);
            env->SetByteArrayRegion(rarg, 0, rcapacity < INT_MAX ? rcapacity : INT_MAX, (jbyte*)rptr);
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arg1 != NULL) env->ReleaseByteArrayElements(arg1, (jbyte*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_GetCachedSize(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->GetCachedSize();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunOptions_GetMetadata(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    google::protobuf::Metadata* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (google::protobuf::Metadata*)new (std::nothrow) google::protobuf::Metadata(ptr->GetMetadata());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_org_bytedeco_javacpp_Pointer_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_kIndexInFileMessages(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::RunOptions::kIndexInFileMessages;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_NO_1TRACE(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    const tensorflow::RunOptions::TraceLevel rval = (const tensorflow::RunOptions::TraceLevel)tensorflow::RunOptions::NO_TRACE;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_SOFTWARE_1TRACE(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    const tensorflow::RunOptions::TraceLevel rval = (const tensorflow::RunOptions::TraceLevel)tensorflow::RunOptions::SOFTWARE_TRACE;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_HARDWARE_1TRACE(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    const tensorflow::RunOptions::TraceLevel rval = (const tensorflow::RunOptions::TraceLevel)tensorflow::RunOptions::HARDWARE_TRACE;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_FULL_1TRACE(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    const tensorflow::RunOptions::TraceLevel rval = (const tensorflow::RunOptions::TraceLevel)tensorflow::RunOptions::FULL_TRACE;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_TraceLevel_1MIN(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    const tensorflow::RunOptions::TraceLevel rval = (const tensorflow::RunOptions::TraceLevel)tensorflow::RunOptions::TraceLevel_MIN;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_TraceLevel_1MAX(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    const tensorflow::RunOptions::TraceLevel rval = (const tensorflow::RunOptions::TraceLevel)tensorflow::RunOptions::TraceLevel_MAX;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_TraceLevel_1ARRAYSIZE(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::RunOptions::TraceLevel_ARRAYSIZE;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_kDebugOptionsFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::RunOptions::kDebugOptionsFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_kTimeoutInMsFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::RunOptions::kTimeoutInMsFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_kTraceLevelFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::RunOptions::kTraceLevelFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_kInterOpThreadPoolFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::RunOptions::kInterOpThreadPoolFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_kOutputPartitionGraphsFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::RunOptions::kOutputPartitionGraphsFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_kReportTensorAllocationsUponOomFieldNumber(JNIEnv* env, jclass cls) {
    jint rarg = 0;
    int rval = tensorflow::RunOptions::kReportTensorAllocationsUponOomFieldNumber;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_RunOptions_TraceLevel_1IsValid(JNIEnv* env, jclass cls, jint arg0) {
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)tensorflow::RunOptions::TraceLevel_IsValid(arg0);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunOptions_TraceLevel_1descriptor(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    const google::protobuf::EnumDescriptor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const google::protobuf::EnumDescriptor*)tensorflow::RunOptions::TraceLevel_descriptor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunOptions_TraceLevel_1Name(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(tensorflow::RunOptions::TraceLevel_Name((tensorflow::RunOptions::TraceLevel)arg0));
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_RunOptions_TraceLevel_1Parse__Ljava_lang_String_2Lorg_bytedeco_javacpp_IntPointer_2(JNIEnv* env, jclass cls, jstring arg0, jobject arg1) {
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    int* ptr1 = arg1 == NULL ? NULL : (int*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)tensorflow::RunOptions::TraceLevel_Parse((std::string&)adapter0, (tensorflow::RunOptions::TraceLevel*)ptr1);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_RunOptions_TraceLevel_1Parse__Lorg_bytedeco_javacpp_BytePointer_2_3I(JNIEnv* env, jclass cls, jobject arg0, jintArray arg1) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    int* ptr1 = arg1 == NULL ? NULL : env->GetIntArrayElements(arg1, NULL);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)tensorflow::RunOptions::TraceLevel_Parse((std::string&)adapter0, (tensorflow::RunOptions::TraceLevel*)ptr1);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (arg1 != NULL) env->ReleaseIntArrayElements(arg1, (jint*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_RunOptions_TraceLevel_1Parse__Lorg_bytedeco_javacpp_BytePointer_2Ljava_nio_IntBuffer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    int* ptr1 = arg1 == NULL ? NULL : (int*)env->GetDirectBufferAddress(arg1);
    jintArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jintArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetIntArrayElements(arr1, NULL);
        }
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)tensorflow::RunOptions::TraceLevel_Parse((std::string&)adapter0, (tensorflow::RunOptions::TraceLevel*)ptr1);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (arr1 != NULL) env->ReleaseIntArrayElements(arr1, (jint*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_RunOptions_TraceLevel_1Parse__Ljava_lang_String_2_3I(JNIEnv* env, jclass cls, jstring arg0, jintArray arg1) {
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    int* ptr1 = arg1 == NULL ? NULL : env->GetIntArrayElements(arg1, NULL);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)tensorflow::RunOptions::TraceLevel_Parse((std::string&)adapter0, (tensorflow::RunOptions::TraceLevel*)ptr1);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (arg1 != NULL) env->ReleaseIntArrayElements(arg1, (jint*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_RunOptions_TraceLevel_1Parse__Lorg_bytedeco_javacpp_BytePointer_2Lorg_bytedeco_javacpp_IntPointer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    int* ptr1 = arg1 == NULL ? NULL : (int*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)tensorflow::RunOptions::TraceLevel_Parse((std::string&)adapter0, (tensorflow::RunOptions::TraceLevel*)ptr1);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_RunOptions_TraceLevel_1Parse__Ljava_lang_String_2Ljava_nio_IntBuffer_2(JNIEnv* env, jclass cls, jstring arg0, jobject arg1) {
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    int* ptr1 = arg1 == NULL ? NULL : (int*)env->GetDirectBufferAddress(arg1);
    jintArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jintArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetIntArrayElements(arr1, NULL);
        }
    }
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)tensorflow::RunOptions::TraceLevel_Parse((std::string&)adapter0, (tensorflow::RunOptions::TraceLevel*)ptr1);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (arr1 != NULL) env->ReleaseIntArrayElements(arr1, (jint*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_RunOptions_has_1debug_1options(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->has_debug_options();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_clear_1debug_1options(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_debug_options();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_clear_1timeout_1in_1ms(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_timeout_in_ms();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jlong JNICALL Java_native_1types_core_common_RunOptions_timeout_1in_1ms(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        google::protobuf::int64 rval = (google::protobuf::int64)ptr->timeout_in_ms();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_set_1timeout_1in_1ms(JNIEnv* env, jobject obj, jlong arg0) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_timeout_in_ms((google::protobuf::int64)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_clear_1trace_1level(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_trace_level();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_trace_1level(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        tensorflow::RunOptions_TraceLevel rval = (tensorflow::RunOptions_TraceLevel)ptr->trace_level();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_set_1trace_1level(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_trace_level((tensorflow::RunOptions_TraceLevel)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_clear_1inter_1op_1thread_1pool(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_inter_op_thread_pool();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_native_1types_core_common_RunOptions_inter_1op_1thread_1pool(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        google::protobuf::int32 rval = (google::protobuf::int32)ptr->inter_op_thread_pool();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_set_1inter_1op_1thread_1pool(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_inter_op_thread_pool((google::protobuf::int32)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_clear_1output_1partition_1graphs(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_output_partition_graphs();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_RunOptions_output_1partition_1graphs(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->output_partition_graphs();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_set_1output_1partition_1graphs(JNIEnv* env, jobject obj, jboolean arg0) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_output_partition_graphs((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_clear_1report_1tensor_1allocations_1upon_1oom(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->clear_report_tensor_allocations_upon_oom();
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_core_common_RunOptions_report_1tensor_1allocations_1upon_1oom(JNIEnv* env, jobject obj) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)ptr->report_tensor_allocations_upon_oom();
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_set_1report_1tensor_1allocations_1upon_1oom(JNIEnv* env, jobject obj, jboolean arg0) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->set_report_tensor_allocations_upon_oom((bool)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_core_common_RunOptions_put(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::RunOptions* ptr = (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::RunOptions* ptr0 = arg0 == NULL ? NULL : (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    tensorflow::RunOptions* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*(const tensorflow::RunOptions*)ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 27);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        tensorflow::RunOptions* rptr = new tensorflow::RunOptions();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_common_RunOptions_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_core_common_RunOptions_allocate__Lnative_1types_core_common_RunOptions_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::RunOptions* ptr0 = arg0 == NULL ? NULL : (tensorflow::RunOptions*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::RunOptions* rptr = new tensorflow::RunOptions(*(const tensorflow::RunOptions*)ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_common_RunOptions_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_core_common_ShapeRefiner_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::VersionDef* ptr0 = arg0 == NULL ? NULL : (tensorflow::VersionDef*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::OpRegistryInterface* ptr1 = arg1 == NULL ? NULL : (tensorflow::OpRegistryInterface*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        tensorflow::ShapeRefiner* rptr = new tensorflow::ShapeRefiner(*(const tensorflow::VersionDef*)ptr0, (const tensorflow::OpRegistryInterface*)ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_core_common_ShapeRefiner_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Input_00024Initializer_tensor__Lnative_1types_core_framework_Tensor_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Input::Initializer* ptr = (tensorflow::Input::Initializer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Tensor* ptr0 = arg0 == NULL ? NULL : (tensorflow::Tensor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->tensor = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Input_00024Initializer_tensor__(JNIEnv* env, jobject obj) {
    tensorflow::Input::Initializer* ptr = (tensorflow::Input::Initializer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Tensor* rptr;
    rptr = &ptr->tensor;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 15);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Input_00024Initializer_status__(JNIEnv* env, jobject obj) {
    tensorflow::Input::Initializer* ptr = (tensorflow::Input::Initializer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    rptr = &ptr->status;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 14);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Input_00024Initializer_status__Lnative_1types_core_lib_Status_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Input::Initializer* ptr = (tensorflow::Input::Initializer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Status* ptr0 = arg0 == NULL ? NULL : (tensorflow::Status*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->status = *ptr0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Input_00024Initializer_allocate(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Tensor* ptr0 = arg0 == NULL ? NULL : (tensorflow::Tensor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::Input::Initializer* rptr = new tensorflow::Input::Initializer(*(const tensorflow::Tensor*)ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Input_00024Initializer_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Input_node(JNIEnv* env, jobject obj) {
    tensorflow::Input* ptr = (tensorflow::Input*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Input_node_1name(JNIEnv* env, jobject obj) {
    tensorflow::Input* ptr = (tensorflow::Input*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->node_name());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_cc_framework_Input_data_1type(JNIEnv* env, jobject obj) {
    tensorflow::Input* ptr = (tensorflow::Input*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        tensorflow::DataType rval = (tensorflow::DataType)ptr->data_type();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Input_tensor(JNIEnv* env, jobject obj) {
    tensorflow::Input* ptr = (tensorflow::Input*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    const tensorflow::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::Tensor*)&ptr->tensor();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_cc_framework_Input_index(JNIEnv* env, jobject obj) {
    tensorflow::Input* ptr = (tensorflow::Input*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->index();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Input_status(JNIEnv* env, jobject obj) {
    tensorflow::Input* ptr = (tensorflow::Input*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(ptr->status());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Input_allocate__B(JNIEnv* env, jobject obj, jbyte arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::Input* rptr = new tensorflow::Input(arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Input_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Input_allocate__Lnative_1types_core_framework_Tensor_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Tensor* ptr0 = arg0 == NULL ? NULL : (tensorflow::Tensor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::Input* rptr = new tensorflow::Input(*ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Input_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Input_allocate__Ljava_lang_String_2II(JNIEnv* env, jobject obj, jstring arg0, jint arg1, jint arg2) {
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        tensorflow::Input* rptr = new tensorflow::Input((std::string&)adapter0, arg1, (tensorflow::DataType)arg2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Input_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Input_allocate__S(JNIEnv* env, jobject obj, jshort arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::Input* rptr = new tensorflow::Input(arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Input_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Input_allocate__Lnative_1types_cc_framework_Input_00024Initializer_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Input::Initializer* ptr0 = arg0 == NULL ? NULL : (tensorflow::Input::Initializer*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::Input* rptr = new tensorflow::Input(*(const tensorflow::Input::Initializer*)ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Input_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Input_allocate__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::Input* rptr = new tensorflow::Input(*(const tensorflow::Output*)ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Input_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Input_allocate__D(JNIEnv* env, jobject obj, jdouble arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::Input* rptr = new tensorflow::Input(arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Input_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Input_allocate__Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        tensorflow::Input* rptr = new tensorflow::Input((std::string&)adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Input_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Input_allocate__F(JNIEnv* env, jobject obj, jfloat arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::Input* rptr = new tensorflow::Input(arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Input_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Input_allocate__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        tensorflow::Input* rptr = new tensorflow::Input((std::string&)adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Input_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Input_allocate__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::Input* rptr = new tensorflow::Input(arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Input_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Input_allocate__J(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::Input* rptr = new tensorflow::Input(arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Input_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Input_allocate__Lorg_bytedeco_javacpp_BytePointer_2II(JNIEnv* env, jobject obj, jobject arg0, jint arg1, jint arg2) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        tensorflow::Input* rptr = new tensorflow::Input((std::string&)adapter0, arg1, (tensorflow::DataType)arg2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Input_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Input_allocate__I(JNIEnv* env, jobject obj, jint arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::Input* rptr = new tensorflow::Input(arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Input_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_cc_framework_InputList_allocate__Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Input* ptr0 = arg0 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong size0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_limitFID);
    void* owner0 = JavaCPP_getPointerOwner(env, arg0);
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    size0 -= position0;
    ArraySliceAdapter< tensorflow::Input > adapter0(ptr0, size0, owner0);
    jthrowable exc = NULL;
    try {
        tensorflow::InputList* rptr = new tensorflow::InputList((tensorflow::gtl::ArraySlice< tensorflow::Input >&)adapter0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_InputList_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    tensorflow::Input* rptr0 = adapter0;
    jlong rsize0 = (jlong)adapter0.size;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        JavaCPP_initPointer(env, arg0, rptr0, rsize0, rowner0, &ArraySliceAdapter< tensorflow::Input >::deallocate);
    } else {
        env->SetLongField(arg0, JavaCPP_limitFID, rsize0 + position0);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_InputList_allocate__Lnative_1types_cc_framework_OutputVector_2(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<tensorflow::Output>* ptr0 = arg0 == NULL ? NULL : (std::vector<tensorflow::Output>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::InputList* rptr = new tensorflow::InputList(*(const tensorflow::OutputList*)ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_InputList_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Operation_input(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::Operation* ptr = (tensorflow::Operation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->input(arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Operation_output(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::Operation* ptr = (tensorflow::Operation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->output(arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Operation_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::Operation* rptr = new tensorflow::Operation[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Operation_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_native_1types_cc_framework_Operation_num_1outputs(JNIEnv* env, jobject obj) {
    tensorflow::Operation* ptr = (tensorflow::Operation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->num_outputs();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_cc_framework_Operation_output_1type(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::Operation* ptr = (tensorflow::Operation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        tensorflow::DataType rval = (tensorflow::DataType)ptr->output_type(arg0);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Operation_node(JNIEnv* env, jobject obj) {
    tensorflow::Operation* ptr = (tensorflow::Operation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_cc_framework_Operation_num_1inputs(JNIEnv* env, jobject obj) {
    tensorflow::Operation* ptr = (tensorflow::Operation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->num_inputs();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_cc_framework_Operation_input_1type(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::Operation* ptr = (tensorflow::Operation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        tensorflow::DataType rval = (tensorflow::DataType)ptr->input_type(arg0);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_cc_framework_Operation_hash(JNIEnv* env, jobject obj, jint arg0) {
    tensorflow::Operation* ptr = (tensorflow::Operation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        tensorflow::uint64 rval = (tensorflow::uint64)ptr->hash(arg0);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_cc_framework_Operation_equals(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Operation* ptr = (tensorflow::Operation*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Operation* ptr0 = arg0 == NULL ? NULL : (tensorflow::Operation*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)((*ptr)==(*(const tensorflow::Operation*)ptr0));
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Operation_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        tensorflow::Operation* rptr = new tensorflow::Operation();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Operation_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Operation_allocate__Lnative_1types_core_graph_Node_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Node* ptr0 = arg0 == NULL ? NULL : (tensorflow::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::Operation* rptr = new tensorflow::Operation(ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Operation_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_cc_framework_Output_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::Output* rptr = new tensorflow::Output[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Output_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Output_node(JNIEnv* env, jobject obj) {
    tensorflow::Output* ptr = (tensorflow::Output*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Output_op(JNIEnv* env, jobject obj) {
    tensorflow::Output* ptr = (tensorflow::Output*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Operation* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Operation(ptr->op());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Operation_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 34);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_cc_framework_Output_index(JNIEnv* env, jobject obj) {
    tensorflow::Output* ptr = (tensorflow::Output*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = ptr->index();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Output_name(JNIEnv* env, jobject obj) {
    tensorflow::Output* ptr = (tensorflow::Output*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->name());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_cc_framework_Output_type(JNIEnv* env, jobject obj) {
    tensorflow::Output* ptr = (tensorflow::Output*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        tensorflow::DataType rval = (tensorflow::DataType)ptr->type();
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_cc_framework_Output_hash(JNIEnv* env, jobject obj) {
    tensorflow::Output* ptr = (tensorflow::Output*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        tensorflow::uint64 rval = (tensorflow::uint64)ptr->hash();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_cc_framework_Output_equals(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Output* ptr = (tensorflow::Output*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        bool rval = (bool)((*ptr)==(*(const tensorflow::Output*)ptr0));
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Output_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        tensorflow::Output* rptr = new tensorflow::Output();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Output_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Output_allocate__Lnative_1types_core_graph_Node_2(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Node* ptr0 = arg0 == NULL ? NULL : (tensorflow::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::Output* rptr = new tensorflow::Output(ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Output_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Output_allocate__Lnative_1types_core_graph_Node_2I(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    tensorflow::Node* ptr0 = arg0 == NULL ? NULL : (tensorflow::Node*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::Output* rptr = new tensorflow::Output(ptr0, arg1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Output_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Output_allocate__Lnative_1types_cc_framework_Operation_2I(JNIEnv* env, jobject obj, jobject arg0, jint arg1) {
    tensorflow::Operation* ptr0 = arg0 == NULL ? NULL : (tensorflow::Operation*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::Output* rptr = new tensorflow::Output(*(const tensorflow::Operation*)ptr0, arg1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Output_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_OutputVector_00024Iterator_get(JNIEnv* env, jobject obj) {
    std::vector<tensorflow::Output>::iterator* ptr = (std::vector<tensorflow::Output>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    const tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::Output*)&ptr->operator*();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_cc_framework_OutputVector_00024Iterator_equals(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<tensorflow::Output>::iterator* ptr = (std::vector<tensorflow::Output>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<tensorflow::Output>::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<tensorflow::Output>::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ((*ptr)==(*ptr0));
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_OutputVector_00024Iterator_increment(JNIEnv* env, jobject obj) {
    std::vector<tensorflow::Output>::iterator* ptr = (std::vector<tensorflow::Output>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<tensorflow::Output>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->operator++();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 35);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_OutputVector_end(JNIEnv* env, jobject obj) {
    std::vector<tensorflow::Output>* ptr = (std::vector<tensorflow::Output>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<tensorflow::Output>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<tensorflow::Output>::iterator(ptr->end());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_OutputVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 35);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_OutputVector_begin(JNIEnv* env, jobject obj) {
    std::vector<tensorflow::Output>* ptr = (std::vector<tensorflow::Output>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<tensorflow::Output>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<tensorflow::Output>::iterator(ptr->begin());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_OutputVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 35);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_OutputVector_get(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<tensorflow::Output>* ptr = (std::vector<tensorflow::Output>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &(*ptr).at((size_t)arg0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_OutputVector_put__JLnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jlong arg0, jobject arg1) {
    std::vector<tensorflow::Output>* ptr = (std::vector<tensorflow::Output>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr1 = arg1 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0) = *ptr1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_OutputVector_put__Lnative_1types_cc_framework_OutputVector_2(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<tensorflow::Output>* ptr = (std::vector<tensorflow::Output>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<tensorflow::Output>* ptr0 = arg0 == NULL ? NULL : (std::vector<tensorflow::Output>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::vector<tensorflow::Output>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 36);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_cc_framework_OutputVector_size(JNIEnv* env, jobject obj) {
    std::vector<tensorflow::Output>* ptr = (std::vector<tensorflow::Output>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rval = ptr->size();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_OutputVector_resize(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<tensorflow::Output>* ptr = (std::vector<tensorflow::Output>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->resize((size_t)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_OutputVector_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        std::vector<tensorflow::Output>* rptr = new std::vector<tensorflow::Output>();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_OutputVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_OutputVector_allocate__J(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        std::vector<tensorflow::Output>* rptr = new std::vector<tensorflow::Output>((size_t)arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_OutputVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}


JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Scope_NewRootScope(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    tensorflow::Scope* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Scope(tensorflow::Scope::NewRootScope());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Scope_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 37);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Scope_WithOpName(JNIEnv* env, jobject obj, jstring arg0) {
    tensorflow::Scope* ptr = (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jlong size0 = 0;
    void* owner0 = (void*)ptr0;
    StringAdapter adapter0(ptr0, size0, owner0);
    jobject rarg = NULL;
    tensorflow::Scope* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Scope(ptr->WithOpName((std::string&)adapter0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Scope_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 37);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Scope_impl(JNIEnv* env, jobject obj) {
    tensorflow::Scope* ptr = (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Scope::Impl* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->impl();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 38);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_Scope_put(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Scope* ptr = (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    tensorflow::Scope* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*(const tensorflow::Scope*)ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 37);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_cc_framework_Scope_allocate(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::Scope* rptr = new tensorflow::Scope(*(const tensorflow::Scope*)ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_framework_Scope_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_cc_framework_scope_1factory_NewInternalScope(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Graph* ptr0 = arg0 == NULL ? NULL : (tensorflow::Graph*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Status* ptr1 = arg1 == NULL ? NULL : (tensorflow::Status*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::ShapeRefiner* ptr2 = arg2 == NULL ? NULL : (tensorflow::ShapeRefiner*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jobject rarg = NULL;
    tensorflow::Scope* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Scope(tensorflow::NewInternalScope(ptr0, ptr1, ptr2));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Scope_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 37);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_native_1types_cc_client_ClientSession_Run(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::ClientSession* ptr = (tensorflow::ClientSession*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<tensorflow::Output>* ptr0 = arg0 == NULL ? NULL : (std::vector<tensorflow::Output>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    std::vector<tensorflow::Tensor>* ptr1 = arg1 == NULL ? NULL : (std::vector<tensorflow::Tensor>*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    tensorflow::Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Status(ptr->Run(*(const std::vector<tensorflow::Output>*)ptr0, ptr1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_core_lib_Status_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 14);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_cc_client_ClientSession_allocate(JNIEnv* env, jobject obj, jobject arg0) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        tensorflow::ClientSession* rptr = new tensorflow::ClientSession(*(const tensorflow::Scope*)ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_cc_client_ClientSession_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_utils_NameMap_put(JNIEnv* env, jobject obj, jobject arg0) {
    std::unordered_map<string, int>* ptr = (std::unordered_map<string, int>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::unordered_map<string, int>* ptr0 = arg0 == NULL ? NULL : (std::unordered_map<string, int>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::unordered_map<string, int>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 40);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_utils_NameMap_allocate__J(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        std::unordered_map<string, int>* rptr = new std::unordered_map<string, int>((size_t)arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_utils_NameMap_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_utils_NameMap_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        std::unordered_map<string, int>* rptr = new std::unordered_map<string, int>();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_utils_NameMap_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_utils_StringArray_data(JNIEnv* env, jobject obj) {
    std::string* ptr = (std::string*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const char*)ptr->data();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_utils_StringArray_get(JNIEnv* env, jobject obj, jlong arg0) {
    std::string* ptr = (std::string*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    char rval = (char)(*ptr)[(size_t)arg0];
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_utils_StringArray_put__Lnative_1types_utils_StringArray_2(JNIEnv* env, jobject obj, jobject arg0) {
    std::string* ptr = (std::string*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::string* ptr0 = arg0 == NULL ? NULL : (std::string*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::string* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 41);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_utils_StringArray_put__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    std::string* ptr = (std::string*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jobject rarg = NULL;
    std::string* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 41);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_utils_StringArray_put__JI(JNIEnv* env, jobject obj, jlong arg0, jint arg1) {
    std::string* ptr = (std::string*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    (*ptr)[(size_t)arg0] = (char)arg1;
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_utils_StringArray_size(JNIEnv* env, jobject obj) {
    std::string* ptr = (std::string*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)ptr->size();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_utils_StringArray_resize(JNIEnv* env, jobject obj, jlong arg0) {
    std::string* ptr = (std::string*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->resize((size_t)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_utils_StringArray_allocate__Ljava_lang_String_2(JNIEnv* env, jobject obj, jstring arg0) {
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    jthrowable exc = NULL;
    try {
        std::string* rptr = new std::string(ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_utils_StringArray_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_utils_StringArray_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        std::string* rptr = new std::string();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_utils_StringArray_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_utils_StringArray_allocate__Lnative_1types_utils_StringArray_2(JNIEnv* env, jobject obj, jobject arg0) {
    std::string* ptr0 = arg0 == NULL ? NULL : (std::string*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        std::string* rptr = new std::string(*ptr0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_utils_StringArray_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_utils_StringArray_allocate__Lorg_bytedeco_javacpp_BytePointer_2J(JNIEnv* env, jobject obj, jobject arg0, jlong arg1) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        std::string* rptr = new std::string((char*)ptr0, arg1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_utils_StringArray_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_utils_StringVector_00024Iterator_get(JNIEnv* env, jobject obj) {
    std::vector<std::string>::iterator* ptr = (std::vector<std::string>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter(ptr->operator*());
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_utils_StringVector_00024Iterator_equals(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<std::string>::iterator* ptr = (std::vector<std::string>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<std::string>::iterator* ptr0 = arg0 == NULL ? NULL : (std::vector<std::string>::iterator*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ((*ptr)==(*ptr0));
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_utils_StringVector_00024Iterator_increment(JNIEnv* env, jobject obj) {
    std::vector<std::string>::iterator* ptr = (std::vector<std::string>::iterator*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<std::string>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &ptr->operator++();
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 42);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT jobject JNICALL Java_native_1types_utils_StringVector_end(JNIEnv* env, jobject obj) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<std::string>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<std::string>::iterator(ptr->end());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_utils_StringVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 42);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_utils_StringVector_begin(JNIEnv* env, jobject obj) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    std::vector<std::string>::iterator* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new std::vector<std::string>::iterator(ptr->begin());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_utils_StringVector_00024Iterator_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 42);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_utils_StringVector_get(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    signed char* rptr;
    jthrowable exc = NULL;
    try {
        StringAdapter radapter((*ptr).at((size_t)arg0));
        rptr = radapter;
        jlong rcapacity = (jlong)radapter.size;
        void* rowner = radapter.owner;
        void (*deallocator)(void*) = &StringAdapter::deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_utils_StringVector_put__JLorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jobject obj, jlong arg0, jobject arg1) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong size1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_limitFID);
    void* owner1 = JavaCPP_getPointerOwner(env, arg1);
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    size1 -= position1;
    StringAdapter adapter1(ptr1, size1, owner1);
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0) = (std::string&)adapter1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_utils_StringVector_put__Lnative_1types_utils_StringVector_2(JNIEnv* env, jobject obj, jobject arg0) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    std::vector<std::string>* ptr0 = arg0 == NULL ? NULL : (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    std::vector<std::string>* rptr;
    jthrowable exc = NULL;
    try {
        rptr = &((*ptr)=(*ptr0));
        if (rptr == ptr) {
            rarg = obj;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 43);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_utils_StringVector_put__JLjava_lang_String_2(JNIEnv* env, jobject obj, jlong arg0, jstring arg1) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    jlong size1 = 0;
    void* owner1 = (void*)ptr1;
    StringAdapter adapter1(ptr1, size1, owner1);
    jobject rarg = obj;
    jthrowable exc = NULL;
    try {
        (*ptr).at((size_t)arg0) = (std::string&)adapter1;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_utils_StringVector_size(JNIEnv* env, jobject obj) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        jlong rval = ptr->size();
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_utils_StringVector_resize(JNIEnv* env, jobject obj, jlong arg0) {
    std::vector<std::string>* ptr = (std::vector<std::string>*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->resize((size_t)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_utils_StringVector_allocate__(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        std::vector<std::string>* rptr = new std::vector<std::string>();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_utils_StringVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_utils_StringVector_allocate__J(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        std::vector<std::string>* rptr = new std::vector<std::string>((size_t)arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_utils_StringVector_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2ILnative_1types_core_framework_TensorShape_2(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::TensorShape* ptr2 = arg2 == NULL ? NULL : (tensorflow::TensorShape*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, arg1, *(const tensorflow::TensorShape*)ptr2));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2SLnative_1types_core_framework_TensorShape_2(JNIEnv* env, jclass cls, jobject arg0, jshort arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::TensorShape* ptr2 = arg2 == NULL ? NULL : (tensorflow::TensorShape*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, arg1, *(const tensorflow::TensorShape*)ptr2));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2BLnative_1types_core_framework_TensorShape_2(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::TensorShape* ptr2 = arg2 == NULL ? NULL : (tensorflow::TensorShape*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, (const unsigned char)arg1, *(const tensorflow::TensorShape*)ptr2));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong size1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_limitFID);
    void* owner1 = JavaCPP_getPointerOwner(env, arg1);
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    size1 -= position1;
    StringAdapter adapter1(ptr1, size1, owner1);
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, (std::string&)adapter1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr1 = adapter1;
    jlong rsize1 = (jlong)adapter1.size;
    void* rowner1 = adapter1.owner;
    if (rptr1 != ptr1) {
        JavaCPP_initPointer(env, arg1, rptr1, rsize1, rowner1, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg1, JavaCPP_limitFID, rsize1 + position1);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2Ljava_lang_String_2Lnative_1types_core_framework_TensorShape_2(JNIEnv* env, jclass cls, jobject arg0, jstring arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    jlong size1 = 0;
    void* owner1 = (void*)ptr1;
    StringAdapter adapter1(ptr1, size1, owner1);
    tensorflow::TensorShape* ptr2 = arg2 == NULL ? NULL : (tensorflow::TensorShape*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, (std::string&)adapter1, *(const tensorflow::TensorShape*)ptr2));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2Lorg_bytedeco_javacpp_BytePointer_2Lnative_1types_core_framework_TensorShape_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong size1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_limitFID);
    void* owner1 = JavaCPP_getPointerOwner(env, arg1);
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    size1 -= position1;
    StringAdapter adapter1(ptr1, size1, owner1);
    tensorflow::TensorShape* ptr2 = arg2 == NULL ? NULL : (tensorflow::TensorShape*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, (std::string&)adapter1, *(const tensorflow::TensorShape*)ptr2));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    signed char* rptr1 = adapter1;
    jlong rsize1 = (jlong)adapter1.size;
    void* rowner1 = adapter1.owner;
    if (rptr1 != ptr1) {
        JavaCPP_initPointer(env, arg1, rptr1, rsize1, rowner1, &StringAdapter::deallocate);
    } else {
        env->SetLongField(arg1, JavaCPP_limitFID, rsize1 + position1);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2ZLnative_1types_core_framework_TensorShape_2(JNIEnv* env, jclass cls, jobject arg0, jboolean arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::TensorShape* ptr2 = arg2 == NULL ? NULL : (tensorflow::TensorShape*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, (const bool)arg1, *(const tensorflow::TensorShape*)ptr2));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2DLnative_1types_core_framework_TensorShape_2(JNIEnv* env, jclass cls, jobject arg0, jdouble arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::TensorShape* ptr2 = arg2 == NULL ? NULL : (tensorflow::TensorShape*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, arg1, *(const tensorflow::TensorShape*)ptr2));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2FLnative_1types_core_framework_TensorShape_2(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::TensorShape* ptr2 = arg2 == NULL ? NULL : (tensorflow::TensorShape*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, arg1, *(const tensorflow::TensorShape*)ptr2));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2JLnative_1types_core_framework_TensorShape_2(JNIEnv* env, jclass cls, jobject arg0, jlong arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::TensorShape* ptr2 = arg2 == NULL ? NULL : (tensorflow::TensorShape*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return 0;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, (const long long)arg1, *(const tensorflow::TensorShape*)ptr2));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2S(JNIEnv* env, jclass cls, jobject arg0, jshort arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, arg1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2B(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, arg1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2Lnative_1types_core_framework_Tensor_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Tensor* ptr1 = arg1 == NULL ? NULL : (tensorflow::Tensor*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, *ptr1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_00024Initializer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input::Initializer* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input::Initializer*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return 0;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, *(const tensorflow::Input::Initializer*)ptr1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2Ljava_lang_String_2(JNIEnv* env, jclass cls, jobject arg0, jstring arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    jlong size1 = 0;
    void* owner1 = (void*)ptr1;
    StringAdapter adapter1(ptr1, size1, owner1);
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, (std::string&)adapter1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2Z(JNIEnv* env, jclass cls, jobject arg0, jboolean arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, arg1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2D(JNIEnv* env, jclass cls, jobject arg0, jdouble arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, arg1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2F(JNIEnv* env, jclass cls, jobject arg0, jfloat arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, arg1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2J(JNIEnv* env, jclass cls, jobject arg0, jlong arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, arg1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_const_1ops_Const__Lnative_1types_cc_framework_Scope_2I(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(tensorflow::ops::Const(*(const tensorflow::Scope*)ptr0, arg1));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Svd::Attrs* rptr = new ::tensorflow::ops::Svd::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024Svd_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_00024Attrs_ComputeUv(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Svd::Attrs* ptr = (::tensorflow::ops::Svd::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Svd::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Svd::Attrs(ptr->ComputeUv((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024Svd_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 44);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_00024Attrs_compute_1uv_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Svd::Attrs* ptr = (::tensorflow::ops::Svd::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->compute_uv_ = (bool)arg0;
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_00024Attrs_compute_1uv_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Svd::Attrs* ptr = (::tensorflow::ops::Svd::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->compute_uv_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_00024Attrs_FullMatrices(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Svd::Attrs* ptr = (::tensorflow::ops::Svd::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Svd::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Svd::Attrs(ptr->FullMatrices((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024Svd_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 44);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_00024Attrs_full_1matrices_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Svd::Attrs* ptr = (::tensorflow::ops::Svd::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->full_matrices_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_00024Attrs_full_1matrices_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Svd::Attrs* ptr = (::tensorflow::ops::Svd::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->full_matrices_ = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Svd::Attrs* rptr = new ::tensorflow::ops::Svd::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024Svd_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_u__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Svd* ptr = (::tensorflow::ops::Svd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->u;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_u__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Svd* ptr = (::tensorflow::ops::Svd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->u = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_v__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Svd* ptr = (::tensorflow::ops::Svd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->v;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_v__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Svd* ptr = (::tensorflow::ops::Svd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->v = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_ComputeUv(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Svd::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Svd::Attrs(::tensorflow::ops::Svd::ComputeUv((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024Svd_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 44);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_FullMatrices(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Svd::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Svd::Attrs(::tensorflow::ops::Svd::FullMatrices((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024Svd_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 44);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Svd* rptr = new ::tensorflow::ops::Svd(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024Svd_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_linalg_1ops_00024Svd_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    ::tensorflow::ops::Svd::Attrs* ptr2 = arg2 == NULL ? NULL : (::tensorflow::ops::Svd::Attrs*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Svd* rptr = new ::tensorflow::ops::Svd(*(const tensorflow::Scope*)ptr0, *ptr1, *(const ::tensorflow::ops::Svd::Attrs*)ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024Svd_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_s__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Svd* ptr = (::tensorflow::ops::Svd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->s;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Svd_s__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Svd* ptr = (::tensorflow::ops::Svd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->s = *ptr0;
    return rarg;
}

JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024SelfAdjointEig_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SelfAdjointEig::Attrs* rptr = new ::tensorflow::ops::SelfAdjointEig::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024SelfAdjointEig_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024SelfAdjointEig_00024Attrs_ComputeV(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::SelfAdjointEig::Attrs* ptr = (::tensorflow::ops::SelfAdjointEig::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::SelfAdjointEig::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::SelfAdjointEig::Attrs(ptr->ComputeV((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024SelfAdjointEig_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 46);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_linalg_1ops_00024SelfAdjointEig_00024Attrs_compute_1v_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SelfAdjointEig::Attrs* ptr = (::tensorflow::ops::SelfAdjointEig::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->compute_v_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024SelfAdjointEig_00024Attrs_compute_1v_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::SelfAdjointEig::Attrs* ptr = (::tensorflow::ops::SelfAdjointEig::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->compute_v_ = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024SelfAdjointEig_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SelfAdjointEig::Attrs* rptr = new ::tensorflow::ops::SelfAdjointEig::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024SelfAdjointEig_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024SelfAdjointEig_e__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SelfAdjointEig* ptr = (::tensorflow::ops::SelfAdjointEig*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->e;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024SelfAdjointEig_e__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SelfAdjointEig* ptr = (::tensorflow::ops::SelfAdjointEig*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->e = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024SelfAdjointEig_v__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SelfAdjointEig* ptr = (::tensorflow::ops::SelfAdjointEig*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->v = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024SelfAdjointEig_v__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SelfAdjointEig* ptr = (::tensorflow::ops::SelfAdjointEig*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->v;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024SelfAdjointEig_ComputeV(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::SelfAdjointEig::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::SelfAdjointEig::Attrs(::tensorflow::ops::SelfAdjointEig::ComputeV((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024SelfAdjointEig_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 46);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024SelfAdjointEig_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_linalg_1ops_00024SelfAdjointEig_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    ::tensorflow::ops::SelfAdjointEig::Attrs* ptr2 = arg2 == NULL ? NULL : (::tensorflow::ops::SelfAdjointEig::Attrs*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SelfAdjointEig* rptr = new ::tensorflow::ops::SelfAdjointEig(*(const tensorflow::Scope*)ptr0, *ptr1, *(const ::tensorflow::ops::SelfAdjointEig::Attrs*)ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024SelfAdjointEig_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024SelfAdjointEig_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SelfAdjointEig* rptr = new ::tensorflow::ops::SelfAdjointEig(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024SelfAdjointEig_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024Qr_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Qr::Attrs* rptr = new ::tensorflow::ops::Qr::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024Qr_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Qr_00024Attrs_FullMatrices(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Qr::Attrs* ptr = (::tensorflow::ops::Qr::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Qr::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Qr::Attrs(ptr->FullMatrices((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024Qr_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 48);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_linalg_1ops_00024Qr_00024Attrs_full_1matrices_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Qr::Attrs* ptr = (::tensorflow::ops::Qr::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->full_matrices_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Qr_00024Attrs_full_1matrices_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Qr::Attrs* ptr = (::tensorflow::ops::Qr::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->full_matrices_ = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024Qr_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Qr::Attrs* rptr = new ::tensorflow::ops::Qr::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024Qr_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Qr_FullMatrices(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Qr::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Qr::Attrs(::tensorflow::ops::Qr::FullMatrices((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024Qr_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 48);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Qr_q__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Qr* ptr = (::tensorflow::ops::Qr*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->q;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Qr_q__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Qr* ptr = (::tensorflow::ops::Qr*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->q = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Qr_r__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Qr* ptr = (::tensorflow::ops::Qr*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->r = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Qr_r__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Qr* ptr = (::tensorflow::ops::Qr*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->r;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024Qr_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_linalg_1ops_00024Qr_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    ::tensorflow::ops::Qr::Attrs* ptr2 = arg2 == NULL ? NULL : (::tensorflow::ops::Qr::Attrs*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Qr* rptr = new ::tensorflow::ops::Qr(*(const tensorflow::Scope*)ptr0, *ptr1, *(const ::tensorflow::ops::Qr::Attrs*)ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024Qr_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024Qr_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Qr* rptr = new ::tensorflow::ops::Qr(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024Qr_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixTriangularSolve::Attrs* rptr = new ::tensorflow::ops::MatrixTriangularSolve::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_Adjoint(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::MatrixTriangularSolve::Attrs* ptr = (::tensorflow::ops::MatrixTriangularSolve::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::MatrixTriangularSolve::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::MatrixTriangularSolve::Attrs(ptr->Adjoint((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 50);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_adjoint_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::MatrixTriangularSolve::Attrs* ptr = (::tensorflow::ops::MatrixTriangularSolve::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->adjoint_ = (bool)arg0;
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_adjoint_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixTriangularSolve::Attrs* ptr = (::tensorflow::ops::MatrixTriangularSolve::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->adjoint_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_Lower(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::MatrixTriangularSolve::Attrs* ptr = (::tensorflow::ops::MatrixTriangularSolve::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::MatrixTriangularSolve::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::MatrixTriangularSolve::Attrs(ptr->Lower((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 50);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_lower_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixTriangularSolve::Attrs* ptr = (::tensorflow::ops::MatrixTriangularSolve::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->lower_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_lower_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::MatrixTriangularSolve::Attrs* ptr = (::tensorflow::ops::MatrixTriangularSolve::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->lower_ = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixTriangularSolve::Attrs* rptr = new ::tensorflow::ops::MatrixTriangularSolve::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixTriangularSolve* ptr = (::tensorflow::ops::MatrixTriangularSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::MatrixTriangularSolve* ptr = (::tensorflow::ops::MatrixTriangularSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixTriangularSolve* ptr = (::tensorflow::ops::MatrixTriangularSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixTriangularSolve* ptr = (::tensorflow::ops::MatrixTriangularSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixTriangularSolve* ptr = (::tensorflow::ops::MatrixTriangularSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_Adjoint(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::MatrixTriangularSolve::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::MatrixTriangularSolve::Attrs(::tensorflow::ops::MatrixTriangularSolve::Adjoint((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 50);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_Lower(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::MatrixTriangularSolve::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::MatrixTriangularSolve::Attrs(::tensorflow::ops::MatrixTriangularSolve::Lower((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 50);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_linalg_1ops_00024MatrixTriangularSolve_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::MatrixTriangularSolve::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::MatrixTriangularSolve::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixTriangularSolve* rptr = new ::tensorflow::ops::MatrixTriangularSolve(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::MatrixTriangularSolve::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixTriangularSolve* rptr = new ::tensorflow::ops::MatrixTriangularSolve(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixTriangularSolve_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolveLs_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixSolveLs::Attrs* rptr = new ::tensorflow::ops::MatrixSolveLs::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolveLs_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolveLs_00024Attrs_Fast(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::MatrixSolveLs::Attrs* ptr = (::tensorflow::ops::MatrixSolveLs::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::MatrixSolveLs::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::MatrixSolveLs::Attrs(ptr->Fast((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolveLs_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 52);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolveLs_00024Attrs_fast_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixSolveLs::Attrs* ptr = (::tensorflow::ops::MatrixSolveLs::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->fast_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolveLs_00024Attrs_fast_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::MatrixSolveLs::Attrs* ptr = (::tensorflow::ops::MatrixSolveLs::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->fast_ = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolveLs_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixSolveLs::Attrs* rptr = new ::tensorflow::ops::MatrixSolveLs::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolveLs_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolveLs_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixSolveLs* ptr = (::tensorflow::ops::MatrixSolveLs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolveLs_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::MatrixSolveLs* ptr = (::tensorflow::ops::MatrixSolveLs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolveLs_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixSolveLs* ptr = (::tensorflow::ops::MatrixSolveLs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolveLs_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixSolveLs* ptr = (::tensorflow::ops::MatrixSolveLs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolveLs_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixSolveLs* ptr = (::tensorflow::ops::MatrixSolveLs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolveLs_Fast(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::MatrixSolveLs::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::MatrixSolveLs::Attrs(::tensorflow::ops::MatrixSolveLs::Fast((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolveLs_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 52);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolveLs_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_linalg_1ops_00024MatrixSolveLs_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    ::tensorflow::ops::MatrixSolveLs::Attrs* ptr4 = arg4 == NULL ? NULL : (::tensorflow::ops::MatrixSolveLs::Attrs*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 4 is NULL.");
        return;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixSolveLs* rptr = new ::tensorflow::ops::MatrixSolveLs(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3, *(const ::tensorflow::ops::MatrixSolveLs::Attrs*)ptr4);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolveLs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolveLs_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixSolveLs* rptr = new ::tensorflow::ops::MatrixSolveLs(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolveLs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolve_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixSolve::Attrs* rptr = new ::tensorflow::ops::MatrixSolve::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolve_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolve_00024Attrs_Adjoint(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::MatrixSolve::Attrs* ptr = (::tensorflow::ops::MatrixSolve::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::MatrixSolve::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::MatrixSolve::Attrs(ptr->Adjoint((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolve_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 54);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolve_00024Attrs_adjoint_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixSolve::Attrs* ptr = (::tensorflow::ops::MatrixSolve::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->adjoint_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolve_00024Attrs_adjoint_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::MatrixSolve::Attrs* ptr = (::tensorflow::ops::MatrixSolve::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->adjoint_ = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolve_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixSolve::Attrs* rptr = new ::tensorflow::ops::MatrixSolve::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolve_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolve_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixSolve* ptr = (::tensorflow::ops::MatrixSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolve_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::MatrixSolve* ptr = (::tensorflow::ops::MatrixSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolve_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixSolve* ptr = (::tensorflow::ops::MatrixSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolve_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixSolve* ptr = (::tensorflow::ops::MatrixSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolve_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixSolve* ptr = (::tensorflow::ops::MatrixSolve*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolve_Adjoint(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::MatrixSolve::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::MatrixSolve::Attrs(::tensorflow::ops::MatrixSolve::Adjoint((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolve_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 54);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolve_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_linalg_1ops_00024MatrixSolve_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::MatrixSolve::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::MatrixSolve::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixSolve* rptr = new ::tensorflow::ops::MatrixSolve(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::MatrixSolve::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolve_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixSolve_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixSolve* rptr = new ::tensorflow::ops::MatrixSolve(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixSolve_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixInverse_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixInverse::Attrs* rptr = new ::tensorflow::ops::MatrixInverse::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixInverse_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixInverse_00024Attrs_Adjoint(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::MatrixInverse::Attrs* ptr = (::tensorflow::ops::MatrixInverse::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::MatrixInverse::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::MatrixInverse::Attrs(ptr->Adjoint((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixInverse_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 56);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixInverse_00024Attrs_adjoint_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixInverse::Attrs* ptr = (::tensorflow::ops::MatrixInverse::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->adjoint_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixInverse_00024Attrs_adjoint_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::MatrixInverse::Attrs* ptr = (::tensorflow::ops::MatrixInverse::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->adjoint_ = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixInverse_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixInverse::Attrs* rptr = new ::tensorflow::ops::MatrixInverse::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixInverse_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixInverse_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixInverse* ptr = (::tensorflow::ops::MatrixInverse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixInverse_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::MatrixInverse* ptr = (::tensorflow::ops::MatrixInverse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixInverse_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixInverse* ptr = (::tensorflow::ops::MatrixInverse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixInverse_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixInverse* ptr = (::tensorflow::ops::MatrixInverse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixInverse_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixInverse* ptr = (::tensorflow::ops::MatrixInverse*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixInverse_Adjoint(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::MatrixInverse::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::MatrixInverse::Attrs(::tensorflow::ops::MatrixInverse::Adjoint((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixInverse_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 56);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixInverse_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_linalg_1ops_00024MatrixInverse_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    ::tensorflow::ops::MatrixInverse::Attrs* ptr2 = arg2 == NULL ? NULL : (::tensorflow::ops::MatrixInverse::Attrs*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixInverse* rptr = new ::tensorflow::ops::MatrixInverse(*(const tensorflow::Scope*)ptr0, *ptr1, *(const ::tensorflow::ops::MatrixInverse::Attrs*)ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixInverse_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixInverse_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixInverse* rptr = new ::tensorflow::ops::MatrixInverse(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixInverse_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixExponential_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixExponential* ptr = (::tensorflow::ops::MatrixExponential*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixExponential_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::MatrixExponential* ptr = (::tensorflow::ops::MatrixExponential*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixExponential_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixExponential* ptr = (::tensorflow::ops::MatrixExponential*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixExponential_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixExponential* ptr = (::tensorflow::ops::MatrixExponential*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixExponential_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixExponential* ptr = (::tensorflow::ops::MatrixExponential*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixExponential_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixExponential* rptr = new ::tensorflow::ops::MatrixExponential(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixExponential_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixDeterminant_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixDeterminant* ptr = (::tensorflow::ops::MatrixDeterminant*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixDeterminant_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::MatrixDeterminant* ptr = (::tensorflow::ops::MatrixDeterminant*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixDeterminant_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixDeterminant* ptr = (::tensorflow::ops::MatrixDeterminant*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixDeterminant_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixDeterminant* ptr = (::tensorflow::ops::MatrixDeterminant*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixDeterminant_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatrixDeterminant* ptr = (::tensorflow::ops::MatrixDeterminant*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024MatrixDeterminant_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatrixDeterminant* rptr = new ::tensorflow::ops::MatrixDeterminant(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024MatrixDeterminant_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024LogMatrixDeterminant_sign__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::LogMatrixDeterminant* ptr = (::tensorflow::ops::LogMatrixDeterminant*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->sign = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024LogMatrixDeterminant_sign__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LogMatrixDeterminant* ptr = (::tensorflow::ops::LogMatrixDeterminant*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->sign;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024LogMatrixDeterminant_log_1abs_1determinant__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LogMatrixDeterminant* ptr = (::tensorflow::ops::LogMatrixDeterminant*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->log_abs_determinant;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024LogMatrixDeterminant_log_1abs_1determinant__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::LogMatrixDeterminant* ptr = (::tensorflow::ops::LogMatrixDeterminant*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->log_abs_determinant = *ptr0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024LogMatrixDeterminant_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::LogMatrixDeterminant* rptr = new ::tensorflow::ops::LogMatrixDeterminant(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024LogMatrixDeterminant_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024CholeskyGrad_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::CholeskyGrad* ptr = (::tensorflow::ops::CholeskyGrad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024CholeskyGrad_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::CholeskyGrad* ptr = (::tensorflow::ops::CholeskyGrad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024CholeskyGrad_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::CholeskyGrad* ptr = (::tensorflow::ops::CholeskyGrad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024CholeskyGrad_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::CholeskyGrad* ptr = (::tensorflow::ops::CholeskyGrad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024CholeskyGrad_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::CholeskyGrad* ptr = (::tensorflow::ops::CholeskyGrad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024CholeskyGrad_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::CholeskyGrad* rptr = new ::tensorflow::ops::CholeskyGrad(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024CholeskyGrad_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Cholesky_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cholesky* ptr = (::tensorflow::ops::Cholesky*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Cholesky_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Cholesky* ptr = (::tensorflow::ops::Cholesky*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Cholesky_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cholesky* ptr = (::tensorflow::ops::Cholesky*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Cholesky_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cholesky* ptr = (::tensorflow::ops::Cholesky*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_linalg_1ops_00024Cholesky_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cholesky* ptr = (::tensorflow::ops::Cholesky*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_linalg_1ops_00024Cholesky_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Cholesky* rptr = new ::tensorflow::ops::Cholesky(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_linalg_1ops_00024Cholesky_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}


JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Zeta_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Zeta* ptr = (::tensorflow::ops::Zeta*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Zeta_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Zeta* ptr = (::tensorflow::ops::Zeta*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Zeta_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Zeta* ptr = (::tensorflow::ops::Zeta*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Zeta_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Zeta* ptr = (::tensorflow::ops::Zeta*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Zeta_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Zeta* ptr = (::tensorflow::ops::Zeta*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Zeta_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Zeta* rptr = new ::tensorflow::ops::Zeta(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Zeta_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentSum_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::UnsortedSegmentSum* ptr = (::tensorflow::ops::UnsortedSegmentSum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentSum_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::UnsortedSegmentSum* ptr = (::tensorflow::ops::UnsortedSegmentSum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentSum_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::UnsortedSegmentSum* ptr = (::tensorflow::ops::UnsortedSegmentSum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentSum_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::UnsortedSegmentSum* ptr = (::tensorflow::ops::UnsortedSegmentSum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentSum_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::UnsortedSegmentSum* ptr = (::tensorflow::ops::UnsortedSegmentSum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentSum_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::UnsortedSegmentSum* rptr = new ::tensorflow::ops::UnsortedSegmentSum(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024UnsortedSegmentSum_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentProd_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::UnsortedSegmentProd* ptr = (::tensorflow::ops::UnsortedSegmentProd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentProd_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::UnsortedSegmentProd* ptr = (::tensorflow::ops::UnsortedSegmentProd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentProd_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::UnsortedSegmentProd* ptr = (::tensorflow::ops::UnsortedSegmentProd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentProd_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::UnsortedSegmentProd* ptr = (::tensorflow::ops::UnsortedSegmentProd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentProd_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::UnsortedSegmentProd* ptr = (::tensorflow::ops::UnsortedSegmentProd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentProd_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::UnsortedSegmentProd* rptr = new ::tensorflow::ops::UnsortedSegmentProd(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024UnsortedSegmentProd_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentMin_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::UnsortedSegmentMin* ptr = (::tensorflow::ops::UnsortedSegmentMin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentMin_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::UnsortedSegmentMin* ptr = (::tensorflow::ops::UnsortedSegmentMin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentMin_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::UnsortedSegmentMin* ptr = (::tensorflow::ops::UnsortedSegmentMin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentMin_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::UnsortedSegmentMin* ptr = (::tensorflow::ops::UnsortedSegmentMin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentMin_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::UnsortedSegmentMin* ptr = (::tensorflow::ops::UnsortedSegmentMin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentMin_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::UnsortedSegmentMin* rptr = new ::tensorflow::ops::UnsortedSegmentMin(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024UnsortedSegmentMin_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentMax_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::UnsortedSegmentMax* ptr = (::tensorflow::ops::UnsortedSegmentMax*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentMax_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::UnsortedSegmentMax* ptr = (::tensorflow::ops::UnsortedSegmentMax*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentMax_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::UnsortedSegmentMax* ptr = (::tensorflow::ops::UnsortedSegmentMax*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentMax_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::UnsortedSegmentMax* ptr = (::tensorflow::ops::UnsortedSegmentMax*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentMax_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::UnsortedSegmentMax* ptr = (::tensorflow::ops::UnsortedSegmentMax*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024UnsortedSegmentMax_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::UnsortedSegmentMax* rptr = new ::tensorflow::ops::UnsortedSegmentMax(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024UnsortedSegmentMax_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024TruncateMod_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::TruncateMod* ptr = (::tensorflow::ops::TruncateMod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024TruncateMod_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::TruncateMod* ptr = (::tensorflow::ops::TruncateMod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024TruncateMod_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::TruncateMod* ptr = (::tensorflow::ops::TruncateMod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024TruncateMod_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::TruncateMod* ptr = (::tensorflow::ops::TruncateMod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024TruncateMod_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::TruncateMod* ptr = (::tensorflow::ops::TruncateMod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024TruncateMod_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::TruncateMod* rptr = new ::tensorflow::ops::TruncateMod(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024TruncateMod_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024TruncateDiv_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::TruncateDiv* ptr = (::tensorflow::ops::TruncateDiv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024TruncateDiv_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::TruncateDiv* ptr = (::tensorflow::ops::TruncateDiv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024TruncateDiv_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::TruncateDiv* ptr = (::tensorflow::ops::TruncateDiv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024TruncateDiv_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::TruncateDiv* ptr = (::tensorflow::ops::TruncateDiv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024TruncateDiv_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::TruncateDiv* ptr = (::tensorflow::ops::TruncateDiv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024TruncateDiv_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::TruncateDiv* rptr = new ::tensorflow::ops::TruncateDiv(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024TruncateDiv_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Tanh_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Tanh* ptr = (::tensorflow::ops::Tanh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Tanh_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Tanh* ptr = (::tensorflow::ops::Tanh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Tanh_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Tanh* ptr = (::tensorflow::ops::Tanh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Tanh_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Tanh* ptr = (::tensorflow::ops::Tanh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Tanh_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Tanh* ptr = (::tensorflow::ops::Tanh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Tanh_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Tanh* rptr = new ::tensorflow::ops::Tanh(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Tanh_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Tan_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Tan* ptr = (::tensorflow::ops::Tan*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Tan_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Tan* ptr = (::tensorflow::ops::Tan*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Tan_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Tan* ptr = (::tensorflow::ops::Tan*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Tan_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Tan* ptr = (::tensorflow::ops::Tan*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Tan_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Tan* ptr = (::tensorflow::ops::Tan*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Tan_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Tan* rptr = new ::tensorflow::ops::Tan(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Tan_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Sum_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Sum::Attrs* rptr = new ::tensorflow::ops::Sum::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Sum_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sum_00024Attrs_KeepDims(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Sum::Attrs* ptr = (::tensorflow::ops::Sum::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Sum::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Sum::Attrs(ptr->KeepDims((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Sum_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 72);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024Sum_00024Attrs_keep_1dims_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sum::Attrs* ptr = (::tensorflow::ops::Sum::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->keep_dims_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sum_00024Attrs_keep_1dims_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Sum::Attrs* ptr = (::tensorflow::ops::Sum::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->keep_dims_ = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Sum_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Sum::Attrs* rptr = new ::tensorflow::ops::Sum::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Sum_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sum_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sum* ptr = (::tensorflow::ops::Sum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sum_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Sum* ptr = (::tensorflow::ops::Sum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sum_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sum* ptr = (::tensorflow::ops::Sum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sum_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sum* ptr = (::tensorflow::ops::Sum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sum_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sum* ptr = (::tensorflow::ops::Sum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sum_KeepDims(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Sum::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Sum::Attrs(::tensorflow::ops::Sum::KeepDims((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Sum_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 72);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Sum_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024Sum_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::Sum::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::Sum::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Sum* rptr = new ::tensorflow::ops::Sum(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::Sum::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Sum_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Sum_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Sum* rptr = new ::tensorflow::ops::Sum(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Sum_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Subtract_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Subtract* ptr = (::tensorflow::ops::Subtract*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Subtract_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Subtract* ptr = (::tensorflow::ops::Subtract*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Subtract_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Subtract* ptr = (::tensorflow::ops::Subtract*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Subtract_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Subtract* ptr = (::tensorflow::ops::Subtract*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Subtract_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Subtract* ptr = (::tensorflow::ops::Subtract*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Subtract_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Subtract* rptr = new ::tensorflow::ops::Subtract(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Subtract_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SquaredDifference_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SquaredDifference* ptr = (::tensorflow::ops::SquaredDifference*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SquaredDifference_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SquaredDifference* ptr = (::tensorflow::ops::SquaredDifference*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SquaredDifference_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SquaredDifference* ptr = (::tensorflow::ops::SquaredDifference*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SquaredDifference_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SquaredDifference* ptr = (::tensorflow::ops::SquaredDifference*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SquaredDifference_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SquaredDifference* ptr = (::tensorflow::ops::SquaredDifference*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SquaredDifference_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SquaredDifference* rptr = new ::tensorflow::ops::SquaredDifference(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SquaredDifference_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Square_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Square* ptr = (::tensorflow::ops::Square*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Square_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Square* ptr = (::tensorflow::ops::Square*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Square_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Square* ptr = (::tensorflow::ops::Square*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Square_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Square* ptr = (::tensorflow::ops::Square*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Square_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Square* ptr = (::tensorflow::ops::Square*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Square_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Square* rptr = new ::tensorflow::ops::Square(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Square_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sqrt_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sqrt* ptr = (::tensorflow::ops::Sqrt*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sqrt_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sqrt* ptr = (::tensorflow::ops::Sqrt*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sqrt_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sqrt* ptr = (::tensorflow::ops::Sqrt*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sqrt_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Sqrt* ptr = (::tensorflow::ops::Sqrt*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sqrt_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sqrt* ptr = (::tensorflow::ops::Sqrt*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Sqrt_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Sqrt* rptr = new ::tensorflow::ops::Sqrt(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Sqrt_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSumWithNumSegments_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSumWithNumSegments* ptr = (::tensorflow::ops::SparseSegmentSumWithNumSegments*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSumWithNumSegments_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SparseSegmentSumWithNumSegments* ptr = (::tensorflow::ops::SparseSegmentSumWithNumSegments*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSumWithNumSegments_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSumWithNumSegments* ptr = (::tensorflow::ops::SparseSegmentSumWithNumSegments*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSumWithNumSegments_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSumWithNumSegments* ptr = (::tensorflow::ops::SparseSegmentSumWithNumSegments*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSumWithNumSegments_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSumWithNumSegments* ptr = (::tensorflow::ops::SparseSegmentSumWithNumSegments*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSumWithNumSegments_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    tensorflow::Input* ptr4 = arg4 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 4 is NULL.");
        return;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SparseSegmentSumWithNumSegments* rptr = new ::tensorflow::ops::SparseSegmentSumWithNumSegments(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3, *ptr4);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SparseSegmentSumWithNumSegments_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSum_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSum* ptr = (::tensorflow::ops::SparseSegmentSum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSum_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SparseSegmentSum* ptr = (::tensorflow::ops::SparseSegmentSum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSum_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSum* ptr = (::tensorflow::ops::SparseSegmentSum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSum_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSum* ptr = (::tensorflow::ops::SparseSegmentSum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSum_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSum* ptr = (::tensorflow::ops::SparseSegmentSum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSum_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SparseSegmentSum* rptr = new ::tensorflow::ops::SparseSegmentSum(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SparseSegmentSum_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtNWithNumSegments_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSqrtNWithNumSegments* ptr = (::tensorflow::ops::SparseSegmentSqrtNWithNumSegments*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtNWithNumSegments_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SparseSegmentSqrtNWithNumSegments* ptr = (::tensorflow::ops::SparseSegmentSqrtNWithNumSegments*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtNWithNumSegments_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSqrtNWithNumSegments* ptr = (::tensorflow::ops::SparseSegmentSqrtNWithNumSegments*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtNWithNumSegments_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSqrtNWithNumSegments* ptr = (::tensorflow::ops::SparseSegmentSqrtNWithNumSegments*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtNWithNumSegments_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSqrtNWithNumSegments* ptr = (::tensorflow::ops::SparseSegmentSqrtNWithNumSegments*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtNWithNumSegments_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    tensorflow::Input* ptr4 = arg4 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 4 is NULL.");
        return;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SparseSegmentSqrtNWithNumSegments* rptr = new ::tensorflow::ops::SparseSegmentSqrtNWithNumSegments(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3, *ptr4);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SparseSegmentSqrtNWithNumSegments_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtNGrad_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSqrtNGrad* ptr = (::tensorflow::ops::SparseSegmentSqrtNGrad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtNGrad_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SparseSegmentSqrtNGrad* ptr = (::tensorflow::ops::SparseSegmentSqrtNGrad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtNGrad_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSqrtNGrad* ptr = (::tensorflow::ops::SparseSegmentSqrtNGrad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtNGrad_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSqrtNGrad* ptr = (::tensorflow::ops::SparseSegmentSqrtNGrad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtNGrad_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSqrtNGrad* ptr = (::tensorflow::ops::SparseSegmentSqrtNGrad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtNGrad_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    tensorflow::Input* ptr4 = arg4 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 4 is NULL.");
        return;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SparseSegmentSqrtNGrad* rptr = new ::tensorflow::ops::SparseSegmentSqrtNGrad(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3, *ptr4);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SparseSegmentSqrtNGrad_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtN_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSqrtN* ptr = (::tensorflow::ops::SparseSegmentSqrtN*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtN_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SparseSegmentSqrtN* ptr = (::tensorflow::ops::SparseSegmentSqrtN*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtN_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSqrtN* ptr = (::tensorflow::ops::SparseSegmentSqrtN*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtN_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSqrtN* ptr = (::tensorflow::ops::SparseSegmentSqrtN*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtN_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentSqrtN* ptr = (::tensorflow::ops::SparseSegmentSqrtN*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentSqrtN_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SparseSegmentSqrtN* rptr = new ::tensorflow::ops::SparseSegmentSqrtN(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SparseSegmentSqrtN_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMeanWithNumSegments_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentMeanWithNumSegments* ptr = (::tensorflow::ops::SparseSegmentMeanWithNumSegments*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMeanWithNumSegments_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SparseSegmentMeanWithNumSegments* ptr = (::tensorflow::ops::SparseSegmentMeanWithNumSegments*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMeanWithNumSegments_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentMeanWithNumSegments* ptr = (::tensorflow::ops::SparseSegmentMeanWithNumSegments*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMeanWithNumSegments_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentMeanWithNumSegments* ptr = (::tensorflow::ops::SparseSegmentMeanWithNumSegments*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMeanWithNumSegments_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentMeanWithNumSegments* ptr = (::tensorflow::ops::SparseSegmentMeanWithNumSegments*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMeanWithNumSegments_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    tensorflow::Input* ptr4 = arg4 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 4 is NULL.");
        return;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SparseSegmentMeanWithNumSegments* rptr = new ::tensorflow::ops::SparseSegmentMeanWithNumSegments(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3, *ptr4);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SparseSegmentMeanWithNumSegments_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMeanGrad_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentMeanGrad* ptr = (::tensorflow::ops::SparseSegmentMeanGrad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMeanGrad_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SparseSegmentMeanGrad* ptr = (::tensorflow::ops::SparseSegmentMeanGrad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMeanGrad_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentMeanGrad* ptr = (::tensorflow::ops::SparseSegmentMeanGrad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMeanGrad_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentMeanGrad* ptr = (::tensorflow::ops::SparseSegmentMeanGrad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMeanGrad_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentMeanGrad* ptr = (::tensorflow::ops::SparseSegmentMeanGrad*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMeanGrad_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    tensorflow::Input* ptr4 = arg4 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 4 is NULL.");
        return;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SparseSegmentMeanGrad* rptr = new ::tensorflow::ops::SparseSegmentMeanGrad(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3, *ptr4);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SparseSegmentMeanGrad_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMean_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentMean* ptr = (::tensorflow::ops::SparseSegmentMean*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMean_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SparseSegmentMean* ptr = (::tensorflow::ops::SparseSegmentMean*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMean_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentMean* ptr = (::tensorflow::ops::SparseSegmentMean*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMean_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentMean* ptr = (::tensorflow::ops::SparseSegmentMean*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMean_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseSegmentMean* ptr = (::tensorflow::ops::SparseSegmentMean*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SparseSegmentMean_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SparseSegmentMean* rptr = new ::tensorflow::ops::SparseSegmentMean(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SparseSegmentMean_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SparseMatMul::Attrs* rptr = new ::tensorflow::ops::SparseMatMul::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_TransposeA(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::SparseMatMul::Attrs* ptr = (::tensorflow::ops::SparseMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::SparseMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::SparseMatMul::Attrs(ptr->TransposeA((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 86);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_TransposeB(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::SparseMatMul::Attrs* ptr = (::tensorflow::ops::SparseMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::SparseMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::SparseMatMul::Attrs(ptr->TransposeB((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 86);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_transpose_1a_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseMatMul::Attrs* ptr = (::tensorflow::ops::SparseMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->transpose_a_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_transpose_1a_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::SparseMatMul::Attrs* ptr = (::tensorflow::ops::SparseMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->transpose_a_ = (bool)arg0;
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_transpose_1b_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseMatMul::Attrs* ptr = (::tensorflow::ops::SparseMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->transpose_b_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_transpose_1b_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::SparseMatMul::Attrs* ptr = (::tensorflow::ops::SparseMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->transpose_b_ = (bool)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_AIsSparse(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::SparseMatMul::Attrs* ptr = (::tensorflow::ops::SparseMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::SparseMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::SparseMatMul::Attrs(ptr->AIsSparse((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 86);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_BIsSparse(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::SparseMatMul::Attrs* ptr = (::tensorflow::ops::SparseMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::SparseMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::SparseMatMul::Attrs(ptr->BIsSparse((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 86);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_a_1is_1sparse_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseMatMul::Attrs* ptr = (::tensorflow::ops::SparseMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->a_is_sparse_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_a_1is_1sparse_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::SparseMatMul::Attrs* ptr = (::tensorflow::ops::SparseMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->a_is_sparse_ = (bool)arg0;
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_b_1is_1sparse_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseMatMul::Attrs* ptr = (::tensorflow::ops::SparseMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->b_is_sparse_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_b_1is_1sparse_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::SparseMatMul::Attrs* ptr = (::tensorflow::ops::SparseMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->b_is_sparse_ = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SparseMatMul::Attrs* rptr = new ::tensorflow::ops::SparseMatMul::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseMatMul* ptr = (::tensorflow::ops::SparseMatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseMatMul* ptr = (::tensorflow::ops::SparseMatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseMatMul* ptr = (::tensorflow::ops::SparseMatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_product__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SparseMatMul* ptr = (::tensorflow::ops::SparseMatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->product = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_product__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SparseMatMul* ptr = (::tensorflow::ops::SparseMatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->product;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_TransposeA(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::SparseMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::SparseMatMul::Attrs(::tensorflow::ops::SparseMatMul::TransposeA((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 86);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_TransposeB(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::SparseMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::SparseMatMul::Attrs(::tensorflow::ops::SparseMatMul::TransposeB((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 86);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_AIsSparse(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::SparseMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::SparseMatMul::Attrs(::tensorflow::ops::SparseMatMul::AIsSparse((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 86);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_BIsSparse(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::SparseMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::SparseMatMul::Attrs(::tensorflow::ops::SparseMatMul::BIsSparse((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 86);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024SparseMatMul_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::SparseMatMul::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::SparseMatMul::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SparseMatMul* rptr = new ::tensorflow::ops::SparseMatMul(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::SparseMatMul::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SparseMatMul_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SparseMatMul_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SparseMatMul* rptr = new ::tensorflow::ops::SparseMatMul(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SparseMatMul_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sinh_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sinh* ptr = (::tensorflow::ops::Sinh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sinh_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sinh* ptr = (::tensorflow::ops::Sinh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sinh_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sinh* ptr = (::tensorflow::ops::Sinh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sinh_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Sinh* ptr = (::tensorflow::ops::Sinh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sinh_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sinh* ptr = (::tensorflow::ops::Sinh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Sinh_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Sinh* rptr = new ::tensorflow::ops::Sinh(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Sinh_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sin_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sin* ptr = (::tensorflow::ops::Sin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sin_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sin* ptr = (::tensorflow::ops::Sin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sin_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sin* ptr = (::tensorflow::ops::Sin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sin_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Sin* ptr = (::tensorflow::ops::Sin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sin_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sin* ptr = (::tensorflow::ops::Sin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Sin_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Sin* rptr = new ::tensorflow::ops::Sin(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Sin_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sign_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sign* ptr = (::tensorflow::ops::Sign*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sign_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sign* ptr = (::tensorflow::ops::Sign*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sign_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sign* ptr = (::tensorflow::ops::Sign*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sign_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Sign* ptr = (::tensorflow::ops::Sign*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sign_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sign* ptr = (::tensorflow::ops::Sign*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Sign_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Sign* rptr = new ::tensorflow::ops::Sign(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Sign_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sigmoid_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sigmoid* ptr = (::tensorflow::ops::Sigmoid*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sigmoid_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sigmoid* ptr = (::tensorflow::ops::Sigmoid*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sigmoid_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sigmoid* ptr = (::tensorflow::ops::Sigmoid*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sigmoid_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Sigmoid* ptr = (::tensorflow::ops::Sigmoid*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Sigmoid_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Sigmoid* ptr = (::tensorflow::ops::Sigmoid*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Sigmoid_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Sigmoid* rptr = new ::tensorflow::ops::Sigmoid(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Sigmoid_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Where3_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Where3* ptr = (::tensorflow::ops::Where3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Where3_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Where3* ptr = (::tensorflow::ops::Where3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Where3_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Where3* ptr = (::tensorflow::ops::Where3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Where3_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Where3* ptr = (::tensorflow::ops::Where3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Where3_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Where3* ptr = (::tensorflow::ops::Where3*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Where3_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Where3* rptr = new ::tensorflow::ops::Where3(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Where3_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentSum_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentSum* ptr = (::tensorflow::ops::SegmentSum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentSum_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SegmentSum* ptr = (::tensorflow::ops::SegmentSum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentSum_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentSum* ptr = (::tensorflow::ops::SegmentSum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentSum_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentSum* ptr = (::tensorflow::ops::SegmentSum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentSum_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentSum* ptr = (::tensorflow::ops::SegmentSum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SegmentSum_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SegmentSum* rptr = new ::tensorflow::ops::SegmentSum(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SegmentSum_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentProd_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentProd* ptr = (::tensorflow::ops::SegmentProd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentProd_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SegmentProd* ptr = (::tensorflow::ops::SegmentProd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentProd_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentProd* ptr = (::tensorflow::ops::SegmentProd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentProd_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentProd* ptr = (::tensorflow::ops::SegmentProd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentProd_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentProd* ptr = (::tensorflow::ops::SegmentProd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SegmentProd_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SegmentProd* rptr = new ::tensorflow::ops::SegmentProd(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SegmentProd_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentMin_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentMin* ptr = (::tensorflow::ops::SegmentMin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentMin_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SegmentMin* ptr = (::tensorflow::ops::SegmentMin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentMin_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentMin* ptr = (::tensorflow::ops::SegmentMin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentMin_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentMin* ptr = (::tensorflow::ops::SegmentMin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentMin_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentMin* ptr = (::tensorflow::ops::SegmentMin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SegmentMin_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SegmentMin* rptr = new ::tensorflow::ops::SegmentMin(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SegmentMin_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentMean_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentMean* ptr = (::tensorflow::ops::SegmentMean*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentMean_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SegmentMean* ptr = (::tensorflow::ops::SegmentMean*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentMean_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentMean* ptr = (::tensorflow::ops::SegmentMean*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentMean_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentMean* ptr = (::tensorflow::ops::SegmentMean*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentMean_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentMean* ptr = (::tensorflow::ops::SegmentMean*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SegmentMean_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SegmentMean* rptr = new ::tensorflow::ops::SegmentMean(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SegmentMean_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentMax_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentMax* ptr = (::tensorflow::ops::SegmentMax*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentMax_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::SegmentMax* ptr = (::tensorflow::ops::SegmentMax*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentMax_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentMax* ptr = (::tensorflow::ops::SegmentMax*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentMax_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentMax* ptr = (::tensorflow::ops::SegmentMax*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024SegmentMax_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::SegmentMax* ptr = (::tensorflow::ops::SegmentMax*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024SegmentMax_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::SegmentMax* rptr = new ::tensorflow::ops::SegmentMax(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024SegmentMax_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Rsqrt_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Rsqrt* ptr = (::tensorflow::ops::Rsqrt*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Rsqrt_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Rsqrt* ptr = (::tensorflow::ops::Rsqrt*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Rsqrt_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Rsqrt* ptr = (::tensorflow::ops::Rsqrt*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Rsqrt_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Rsqrt* ptr = (::tensorflow::ops::Rsqrt*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Rsqrt_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Rsqrt* ptr = (::tensorflow::ops::Rsqrt*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Rsqrt_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Rsqrt* rptr = new ::tensorflow::ops::Rsqrt(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Rsqrt_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Round_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Round* ptr = (::tensorflow::ops::Round*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Round_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Round* ptr = (::tensorflow::ops::Round*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Round_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Round* ptr = (::tensorflow::ops::Round*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Round_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Round* ptr = (::tensorflow::ops::Round*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Round_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Round* ptr = (::tensorflow::ops::Round*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Round_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Round* rptr = new ::tensorflow::ops::Round(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Round_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Rint_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Rint* ptr = (::tensorflow::ops::Rint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Rint_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Rint* ptr = (::tensorflow::ops::Rint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Rint_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Rint* ptr = (::tensorflow::ops::Rint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Rint_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Rint* ptr = (::tensorflow::ops::Rint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Rint_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Rint* ptr = (::tensorflow::ops::Rint*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Rint_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Rint* rptr = new ::tensorflow::ops::Rint(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Rint_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Requantize_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Requantize* ptr = (::tensorflow::ops::Requantize*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Requantize_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Requantize* ptr = (::tensorflow::ops::Requantize*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Requantize_output_1min__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Requantize* ptr = (::tensorflow::ops::Requantize*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output_min = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Requantize_output_1min__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Requantize* ptr = (::tensorflow::ops::Requantize*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output_min;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Requantize_output_1max__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Requantize* ptr = (::tensorflow::ops::Requantize*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output_max;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Requantize_output_1max__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Requantize* ptr = (::tensorflow::ops::Requantize*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output_max = *ptr0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Requantize_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4, jobject arg5, jint arg6) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    tensorflow::Input* ptr4 = arg4 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 4 is NULL.");
        return;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    tensorflow::Input* ptr5 = arg5 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg5, JavaCPP_addressFID));
    if (ptr5 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 5 is NULL.");
        return;
    }
    jlong position5 = arg5 == NULL ? 0 : env->GetLongField(arg5, JavaCPP_positionFID);
    ptr5 += position5;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Requantize* rptr = new ::tensorflow::ops::Requantize(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, (tensorflow::DataType)arg6);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Requantize_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024RequantizationRange_output_1min__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::RequantizationRange* ptr = (::tensorflow::ops::RequantizationRange*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output_min = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024RequantizationRange_output_1min__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::RequantizationRange* ptr = (::tensorflow::ops::RequantizationRange*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output_min;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024RequantizationRange_output_1max__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::RequantizationRange* ptr = (::tensorflow::ops::RequantizationRange*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output_max;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024RequantizationRange_output_1max__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::RequantizationRange* ptr = (::tensorflow::ops::RequantizationRange*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output_max = *ptr0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024RequantizationRange_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::RequantizationRange* rptr = new ::tensorflow::ops::RequantizationRange(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024RequantizationRange_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Reciprocal_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Reciprocal* ptr = (::tensorflow::ops::Reciprocal*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Reciprocal_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Reciprocal* ptr = (::tensorflow::ops::Reciprocal*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Reciprocal_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Reciprocal* ptr = (::tensorflow::ops::Reciprocal*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Reciprocal_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Reciprocal* ptr = (::tensorflow::ops::Reciprocal*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Reciprocal_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Reciprocal* ptr = (::tensorflow::ops::Reciprocal*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Reciprocal_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Reciprocal* rptr = new ::tensorflow::ops::Reciprocal(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Reciprocal_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024RealDiv_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::RealDiv* ptr = (::tensorflow::ops::RealDiv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024RealDiv_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::RealDiv* ptr = (::tensorflow::ops::RealDiv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024RealDiv_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::RealDiv* ptr = (::tensorflow::ops::RealDiv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024RealDiv_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::RealDiv* ptr = (::tensorflow::ops::RealDiv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024RealDiv_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::RealDiv* ptr = (::tensorflow::ops::RealDiv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024RealDiv_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::RealDiv* rptr = new ::tensorflow::ops::RealDiv(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024RealDiv_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Real_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Real::Attrs* rptr = new ::tensorflow::ops::Real::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Real_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Real_00024Attrs_Tout(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::Real::Attrs* ptr = (::tensorflow::ops::Real::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Real::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Real::Attrs(ptr->Tout((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Real_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 105);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_ops_math_1ops_00024Real_00024Attrs_Tout_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Real::Attrs* ptr = (::tensorflow::ops::Real::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    tensorflow::DataType rval = (tensorflow::DataType)ptr->Tout_;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Real_00024Attrs_Tout_1__I(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::Real::Attrs* ptr = (::tensorflow::ops::Real::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->Tout_ = (tensorflow::DataType)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Real_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Real::Attrs* rptr = new ::tensorflow::ops::Real::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Real_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Real_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Real* ptr = (::tensorflow::ops::Real*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Real_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Real* ptr = (::tensorflow::ops::Real*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Real_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Real* ptr = (::tensorflow::ops::Real*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Real_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Real* ptr = (::tensorflow::ops::Real*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Real_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Real* ptr = (::tensorflow::ops::Real*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Real_Tout(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Real::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Real::Attrs(::tensorflow::ops::Real::Tout((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Real_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 105);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Real_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024Real_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    ::tensorflow::ops::Real::Attrs* ptr2 = arg2 == NULL ? NULL : (::tensorflow::ops::Real::Attrs*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Real* rptr = new ::tensorflow::ops::Real(*(const tensorflow::Scope*)ptr0, *ptr1, *(const ::tensorflow::ops::Real::Attrs*)ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Real_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Real_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Real* rptr = new ::tensorflow::ops::Real(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Real_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Range_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Range* ptr = (::tensorflow::ops::Range*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Range_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Range* ptr = (::tensorflow::ops::Range*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Range_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Range* ptr = (::tensorflow::ops::Range*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Range_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Range* ptr = (::tensorflow::ops::Range*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Range_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Range* ptr = (::tensorflow::ops::Range*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Range_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Range* rptr = new ::tensorflow::ops::Range(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Range_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMul_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::QuantizedMul::Attrs* rptr = new ::tensorflow::ops::QuantizedMul::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMul_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMul_00024Attrs_Toutput_1__I(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::QuantizedMul::Attrs* ptr = (::tensorflow::ops::QuantizedMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->Toutput_ = (tensorflow::DataType)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMul_00024Attrs_Toutput_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizedMul::Attrs* ptr = (::tensorflow::ops::QuantizedMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    tensorflow::DataType rval = (tensorflow::DataType)ptr->Toutput_;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMul_00024Attrs_Toutput(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::QuantizedMul::Attrs* ptr = (::tensorflow::ops::QuantizedMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::QuantizedMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::QuantizedMul::Attrs(ptr->Toutput((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 108);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMul_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::QuantizedMul::Attrs* rptr = new ::tensorflow::ops::QuantizedMul::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMul_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMul_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::QuantizedMul* ptr = (::tensorflow::ops::QuantizedMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMul_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizedMul* ptr = (::tensorflow::ops::QuantizedMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMul_Toutput(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::QuantizedMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::QuantizedMul::Attrs(::tensorflow::ops::QuantizedMul::Toutput((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 108);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMul_min_1z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::QuantizedMul* ptr = (::tensorflow::ops::QuantizedMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->min_z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMul_min_1z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizedMul* ptr = (::tensorflow::ops::QuantizedMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->min_z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMul_max_1z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizedMul* ptr = (::tensorflow::ops::QuantizedMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->max_z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMul_max_1z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::QuantizedMul* ptr = (::tensorflow::ops::QuantizedMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->max_z = *ptr0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMul_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024QuantizedMul_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4, jobject arg5, jobject arg6, jobject arg7) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    tensorflow::Input* ptr4 = arg4 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 4 is NULL.");
        return;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    tensorflow::Input* ptr5 = arg5 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg5, JavaCPP_addressFID));
    if (ptr5 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 5 is NULL.");
        return;
    }
    jlong position5 = arg5 == NULL ? 0 : env->GetLongField(arg5, JavaCPP_positionFID);
    ptr5 += position5;
    tensorflow::Input* ptr6 = arg6 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg6, JavaCPP_addressFID));
    if (ptr6 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 6 is NULL.");
        return;
    }
    jlong position6 = arg6 == NULL ? 0 : env->GetLongField(arg6, JavaCPP_positionFID);
    ptr6 += position6;
    ::tensorflow::ops::QuantizedMul::Attrs* ptr7 = arg7 == NULL ? NULL : (::tensorflow::ops::QuantizedMul::Attrs*)jlong_to_ptr(env->GetLongField(arg7, JavaCPP_addressFID));
    if (ptr7 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 7 is NULL.");
        return;
    }
    jlong position7 = arg7 == NULL ? 0 : env->GetLongField(arg7, JavaCPP_positionFID);
    ptr7 += position7;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::QuantizedMul* rptr = new ::tensorflow::ops::QuantizedMul(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *(const ::tensorflow::ops::QuantizedMul::Attrs*)ptr7);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMul_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMul_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4, jobject arg5, jobject arg6) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    tensorflow::Input* ptr4 = arg4 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 4 is NULL.");
        return;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    tensorflow::Input* ptr5 = arg5 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg5, JavaCPP_addressFID));
    if (ptr5 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 5 is NULL.");
        return;
    }
    jlong position5 = arg5 == NULL ? 0 : env->GetLongField(arg5, JavaCPP_positionFID);
    ptr5 += position5;
    tensorflow::Input* ptr6 = arg6 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg6, JavaCPP_addressFID));
    if (ptr6 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 6 is NULL.");
        return;
    }
    jlong position6 = arg6 == NULL ? 0 : env->GetLongField(arg6, JavaCPP_positionFID);
    ptr6 += position6;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::QuantizedMul* rptr = new ::tensorflow::ops::QuantizedMul(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMul_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::QuantizedMatMul::Attrs* rptr = new ::tensorflow::ops::QuantizedMatMul::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_TransposeA(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::QuantizedMatMul::Attrs* ptr = (::tensorflow::ops::QuantizedMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::QuantizedMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::QuantizedMatMul::Attrs(ptr->TransposeA((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_TransposeB(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::QuantizedMatMul::Attrs* ptr = (::tensorflow::ops::QuantizedMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::QuantizedMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::QuantizedMatMul::Attrs(ptr->TransposeB((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_transpose_1a_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizedMatMul::Attrs* ptr = (::tensorflow::ops::QuantizedMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->transpose_a_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_transpose_1a_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::QuantizedMatMul::Attrs* ptr = (::tensorflow::ops::QuantizedMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->transpose_a_ = (bool)arg0;
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_transpose_1b_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizedMatMul::Attrs* ptr = (::tensorflow::ops::QuantizedMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->transpose_b_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_transpose_1b_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::QuantizedMatMul::Attrs* ptr = (::tensorflow::ops::QuantizedMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->transpose_b_ = (bool)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_Toutput_1__I(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::QuantizedMatMul::Attrs* ptr = (::tensorflow::ops::QuantizedMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->Toutput_ = (tensorflow::DataType)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_Toutput_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizedMatMul::Attrs* ptr = (::tensorflow::ops::QuantizedMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    tensorflow::DataType rval = (tensorflow::DataType)ptr->Toutput_;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_Toutput(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::QuantizedMatMul::Attrs* ptr = (::tensorflow::ops::QuantizedMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::QuantizedMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::QuantizedMatMul::Attrs(ptr->Toutput((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_Tactivation(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::QuantizedMatMul::Attrs* ptr = (::tensorflow::ops::QuantizedMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::QuantizedMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::QuantizedMatMul::Attrs(ptr->Tactivation((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_Tactivation_1__I(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::QuantizedMatMul::Attrs* ptr = (::tensorflow::ops::QuantizedMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->Tactivation_ = (tensorflow::DataType)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_Tactivation_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizedMatMul::Attrs* ptr = (::tensorflow::ops::QuantizedMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    tensorflow::DataType rval = (tensorflow::DataType)ptr->Tactivation_;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::QuantizedMatMul::Attrs* rptr = new ::tensorflow::ops::QuantizedMatMul::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_TransposeA(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::QuantizedMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::QuantizedMatMul::Attrs(::tensorflow::ops::QuantizedMatMul::TransposeA((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_TransposeB(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::QuantizedMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::QuantizedMatMul::Attrs(::tensorflow::ops::QuantizedMatMul::TransposeB((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_Toutput(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::QuantizedMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::QuantizedMatMul::Attrs(::tensorflow::ops::QuantizedMatMul::Toutput((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_min_1out__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizedMatMul* ptr = (::tensorflow::ops::QuantizedMatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->min_out;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_min_1out__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::QuantizedMatMul* ptr = (::tensorflow::ops::QuantizedMatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->min_out = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_max_1out__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizedMatMul* ptr = (::tensorflow::ops::QuantizedMatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->max_out;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_max_1out__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::QuantizedMatMul* ptr = (::tensorflow::ops::QuantizedMatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->max_out = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_Tactivation(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::QuantizedMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::QuantizedMatMul::Attrs(::tensorflow::ops::QuantizedMatMul::Tactivation((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 110);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_out__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizedMatMul* ptr = (::tensorflow::ops::QuantizedMatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->out;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_out__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::QuantizedMatMul* ptr = (::tensorflow::ops::QuantizedMatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->out = *ptr0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4, jobject arg5, jobject arg6) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    tensorflow::Input* ptr4 = arg4 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 4 is NULL.");
        return;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    tensorflow::Input* ptr5 = arg5 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg5, JavaCPP_addressFID));
    if (ptr5 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 5 is NULL.");
        return;
    }
    jlong position5 = arg5 == NULL ? 0 : env->GetLongField(arg5, JavaCPP_positionFID);
    ptr5 += position5;
    tensorflow::Input* ptr6 = arg6 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg6, JavaCPP_addressFID));
    if (ptr6 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 6 is NULL.");
        return;
    }
    jlong position6 = arg6 == NULL ? 0 : env->GetLongField(arg6, JavaCPP_positionFID);
    ptr6 += position6;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::QuantizedMatMul* rptr = new ::tensorflow::ops::QuantizedMatMul(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMatMul_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024QuantizedMatMul_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024QuantizedMatMul_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4, jobject arg5, jobject arg6, jobject arg7) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    tensorflow::Input* ptr4 = arg4 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 4 is NULL.");
        return;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    tensorflow::Input* ptr5 = arg5 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg5, JavaCPP_addressFID));
    if (ptr5 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 5 is NULL.");
        return;
    }
    jlong position5 = arg5 == NULL ? 0 : env->GetLongField(arg5, JavaCPP_positionFID);
    ptr5 += position5;
    tensorflow::Input* ptr6 = arg6 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg6, JavaCPP_addressFID));
    if (ptr6 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 6 is NULL.");
        return;
    }
    jlong position6 = arg6 == NULL ? 0 : env->GetLongField(arg6, JavaCPP_positionFID);
    ptr6 += position6;
    ::tensorflow::ops::QuantizedMatMul::Attrs* ptr7 = arg7 == NULL ? NULL : (::tensorflow::ops::QuantizedMatMul::Attrs*)jlong_to_ptr(env->GetLongField(arg7, JavaCPP_addressFID));
    if (ptr7 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 7 is NULL.");
        return;
    }
    jlong position7 = arg7 == NULL ? 0 : env->GetLongField(arg7, JavaCPP_positionFID);
    ptr7 += position7;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::QuantizedMatMul* rptr = new ::tensorflow::ops::QuantizedMatMul(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *(const ::tensorflow::ops::QuantizedMatMul::Attrs*)ptr7);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024QuantizedMatMul_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024QuantizedAdd_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::QuantizedAdd::Attrs* rptr = new ::tensorflow::ops::QuantizedAdd::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024QuantizedAdd_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedAdd_00024Attrs_Toutput_1__I(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::QuantizedAdd::Attrs* ptr = (::tensorflow::ops::QuantizedAdd::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->Toutput_ = (tensorflow::DataType)arg0;
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_ops_math_1ops_00024QuantizedAdd_00024Attrs_Toutput_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizedAdd::Attrs* ptr = (::tensorflow::ops::QuantizedAdd::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    tensorflow::DataType rval = (tensorflow::DataType)ptr->Toutput_;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedAdd_00024Attrs_Toutput(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::QuantizedAdd::Attrs* ptr = (::tensorflow::ops::QuantizedAdd::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::QuantizedAdd::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::QuantizedAdd::Attrs(ptr->Toutput((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024QuantizedAdd_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 112);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024QuantizedAdd_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::QuantizedAdd::Attrs* rptr = new ::tensorflow::ops::QuantizedAdd::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024QuantizedAdd_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedAdd_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::QuantizedAdd* ptr = (::tensorflow::ops::QuantizedAdd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedAdd_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizedAdd* ptr = (::tensorflow::ops::QuantizedAdd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedAdd_Toutput(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::QuantizedAdd::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::QuantizedAdd::Attrs(::tensorflow::ops::QuantizedAdd::Toutput((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024QuantizedAdd_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 112);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedAdd_min_1z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::QuantizedAdd* ptr = (::tensorflow::ops::QuantizedAdd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->min_z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedAdd_min_1z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizedAdd* ptr = (::tensorflow::ops::QuantizedAdd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->min_z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedAdd_max_1z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizedAdd* ptr = (::tensorflow::ops::QuantizedAdd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->max_z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizedAdd_max_1z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::QuantizedAdd* ptr = (::tensorflow::ops::QuantizedAdd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->max_z = *ptr0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024QuantizedAdd_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024QuantizedAdd_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4, jobject arg5, jobject arg6, jobject arg7) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    tensorflow::Input* ptr4 = arg4 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 4 is NULL.");
        return;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    tensorflow::Input* ptr5 = arg5 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg5, JavaCPP_addressFID));
    if (ptr5 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 5 is NULL.");
        return;
    }
    jlong position5 = arg5 == NULL ? 0 : env->GetLongField(arg5, JavaCPP_positionFID);
    ptr5 += position5;
    tensorflow::Input* ptr6 = arg6 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg6, JavaCPP_addressFID));
    if (ptr6 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 6 is NULL.");
        return;
    }
    jlong position6 = arg6 == NULL ? 0 : env->GetLongField(arg6, JavaCPP_positionFID);
    ptr6 += position6;
    ::tensorflow::ops::QuantizedAdd::Attrs* ptr7 = arg7 == NULL ? NULL : (::tensorflow::ops::QuantizedAdd::Attrs*)jlong_to_ptr(env->GetLongField(arg7, JavaCPP_addressFID));
    if (ptr7 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 7 is NULL.");
        return;
    }
    jlong position7 = arg7 == NULL ? 0 : env->GetLongField(arg7, JavaCPP_positionFID);
    ptr7 += position7;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::QuantizedAdd* rptr = new ::tensorflow::ops::QuantizedAdd(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *(const ::tensorflow::ops::QuantizedAdd::Attrs*)ptr7);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024QuantizedAdd_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024QuantizedAdd_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4, jobject arg5, jobject arg6) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    tensorflow::Input* ptr4 = arg4 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 4 is NULL.");
        return;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    tensorflow::Input* ptr5 = arg5 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg5, JavaCPP_addressFID));
    if (ptr5 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 5 is NULL.");
        return;
    }
    jlong position5 = arg5 == NULL ? 0 : env->GetLongField(arg5, JavaCPP_positionFID);
    ptr5 += position5;
    tensorflow::Input* ptr6 = arg6 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg6, JavaCPP_addressFID));
    if (ptr6 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 6 is NULL.");
        return;
    }
    jlong position6 = arg6 == NULL ? 0 : env->GetLongField(arg6, JavaCPP_positionFID);
    ptr6 += position6;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::QuantizedAdd* rptr = new ::tensorflow::ops::QuantizedAdd(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024QuantizedAdd_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizeDownAndShrinkRange_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::QuantizeDownAndShrinkRange* ptr = (::tensorflow::ops::QuantizeDownAndShrinkRange*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizeDownAndShrinkRange_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizeDownAndShrinkRange* ptr = (::tensorflow::ops::QuantizeDownAndShrinkRange*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizeDownAndShrinkRange_output_1min__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::QuantizeDownAndShrinkRange* ptr = (::tensorflow::ops::QuantizeDownAndShrinkRange*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output_min = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizeDownAndShrinkRange_output_1min__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizeDownAndShrinkRange* ptr = (::tensorflow::ops::QuantizeDownAndShrinkRange*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output_min;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizeDownAndShrinkRange_output_1max__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::QuantizeDownAndShrinkRange* ptr = (::tensorflow::ops::QuantizeDownAndShrinkRange*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output_max;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024QuantizeDownAndShrinkRange_output_1max__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::QuantizeDownAndShrinkRange* ptr = (::tensorflow::ops::QuantizeDownAndShrinkRange*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output_max = *ptr0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024QuantizeDownAndShrinkRange_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jint arg4) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::QuantizeDownAndShrinkRange* rptr = new ::tensorflow::ops::QuantizeDownAndShrinkRange(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3, (tensorflow::DataType)arg4);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024QuantizeDownAndShrinkRange_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Prod_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Prod::Attrs* rptr = new ::tensorflow::ops::Prod::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Prod_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Prod_00024Attrs_KeepDims(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Prod::Attrs* ptr = (::tensorflow::ops::Prod::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Prod::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Prod::Attrs(ptr->KeepDims((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Prod_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 115);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024Prod_00024Attrs_keep_1dims_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Prod::Attrs* ptr = (::tensorflow::ops::Prod::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->keep_dims_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Prod_00024Attrs_keep_1dims_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Prod::Attrs* ptr = (::tensorflow::ops::Prod::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->keep_dims_ = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Prod_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Prod::Attrs* rptr = new ::tensorflow::ops::Prod::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Prod_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Prod_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Prod* ptr = (::tensorflow::ops::Prod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Prod_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Prod* ptr = (::tensorflow::ops::Prod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Prod_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Prod* ptr = (::tensorflow::ops::Prod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Prod_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Prod* ptr = (::tensorflow::ops::Prod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Prod_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Prod* ptr = (::tensorflow::ops::Prod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Prod_KeepDims(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Prod::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Prod::Attrs(::tensorflow::ops::Prod::KeepDims((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Prod_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 115);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Prod_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024Prod_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::Prod::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::Prod::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Prod* rptr = new ::tensorflow::ops::Prod(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::Prod::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Prod_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Prod_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Prod* rptr = new ::tensorflow::ops::Prod(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Prod_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Pow_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Pow* ptr = (::tensorflow::ops::Pow*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Pow_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Pow* ptr = (::tensorflow::ops::Pow*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Pow_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Pow* ptr = (::tensorflow::ops::Pow*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Pow_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Pow* ptr = (::tensorflow::ops::Pow*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Pow_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Pow* ptr = (::tensorflow::ops::Pow*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Pow_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Pow* rptr = new ::tensorflow::ops::Pow(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Pow_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Polygamma_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Polygamma* ptr = (::tensorflow::ops::Polygamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Polygamma_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Polygamma* ptr = (::tensorflow::ops::Polygamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Polygamma_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Polygamma* ptr = (::tensorflow::ops::Polygamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Polygamma_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Polygamma* ptr = (::tensorflow::ops::Polygamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Polygamma_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Polygamma* ptr = (::tensorflow::ops::Polygamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Polygamma_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Polygamma* rptr = new ::tensorflow::ops::Polygamma(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Polygamma_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024NotEqual_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::NotEqual* ptr = (::tensorflow::ops::NotEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024NotEqual_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::NotEqual* ptr = (::tensorflow::ops::NotEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024NotEqual_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::NotEqual* ptr = (::tensorflow::ops::NotEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024NotEqual_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::NotEqual* ptr = (::tensorflow::ops::NotEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024NotEqual_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::NotEqual* ptr = (::tensorflow::ops::NotEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024NotEqual_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::NotEqual* rptr = new ::tensorflow::ops::NotEqual(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024NotEqual_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Negate_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Negate* ptr = (::tensorflow::ops::Negate*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Negate_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Negate* ptr = (::tensorflow::ops::Negate*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Negate_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Negate* ptr = (::tensorflow::ops::Negate*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Negate_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Negate* ptr = (::tensorflow::ops::Negate*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Negate_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Negate* ptr = (::tensorflow::ops::Negate*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Negate_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Negate* rptr = new ::tensorflow::ops::Negate(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Negate_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Multiply_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Multiply* ptr = (::tensorflow::ops::Multiply*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Multiply_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Multiply* ptr = (::tensorflow::ops::Multiply*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Multiply_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Multiply* ptr = (::tensorflow::ops::Multiply*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Multiply_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Multiply* ptr = (::tensorflow::ops::Multiply*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Multiply_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Multiply* ptr = (::tensorflow::ops::Multiply*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Multiply_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Multiply* rptr = new ::tensorflow::ops::Multiply(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Multiply_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Mod_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Mod* ptr = (::tensorflow::ops::Mod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Mod_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Mod* ptr = (::tensorflow::ops::Mod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Mod_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Mod* ptr = (::tensorflow::ops::Mod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Mod_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Mod* ptr = (::tensorflow::ops::Mod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Mod_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Mod* ptr = (::tensorflow::ops::Mod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Mod_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Mod* rptr = new ::tensorflow::ops::Mod(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Mod_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Minimum_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Minimum* ptr = (::tensorflow::ops::Minimum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Minimum_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Minimum* ptr = (::tensorflow::ops::Minimum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Minimum_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Minimum* ptr = (::tensorflow::ops::Minimum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Minimum_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Minimum* ptr = (::tensorflow::ops::Minimum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Minimum_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Minimum* ptr = (::tensorflow::ops::Minimum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Minimum_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Minimum* rptr = new ::tensorflow::ops::Minimum(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Minimum_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Min_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Min::Attrs* rptr = new ::tensorflow::ops::Min::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Min_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Min_00024Attrs_KeepDims(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Min::Attrs* ptr = (::tensorflow::ops::Min::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Min::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Min::Attrs(ptr->KeepDims((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Min_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 124);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024Min_00024Attrs_keep_1dims_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Min::Attrs* ptr = (::tensorflow::ops::Min::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->keep_dims_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Min_00024Attrs_keep_1dims_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Min::Attrs* ptr = (::tensorflow::ops::Min::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->keep_dims_ = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Min_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Min::Attrs* rptr = new ::tensorflow::ops::Min::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Min_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Min_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Min* ptr = (::tensorflow::ops::Min*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Min_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Min* ptr = (::tensorflow::ops::Min*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Min_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Min* ptr = (::tensorflow::ops::Min*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Min_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Min* ptr = (::tensorflow::ops::Min*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Min_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Min* ptr = (::tensorflow::ops::Min*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Min_KeepDims(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Min::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Min::Attrs(::tensorflow::ops::Min::KeepDims((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Min_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 124);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Min_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024Min_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::Min::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::Min::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Min* rptr = new ::tensorflow::ops::Min(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::Min::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Min_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Min_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Min* rptr = new ::tensorflow::ops::Min(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Min_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Mean_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Mean::Attrs* rptr = new ::tensorflow::ops::Mean::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Mean_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Mean_00024Attrs_KeepDims(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Mean::Attrs* ptr = (::tensorflow::ops::Mean::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Mean::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Mean::Attrs(ptr->KeepDims((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Mean_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 126);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024Mean_00024Attrs_keep_1dims_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Mean::Attrs* ptr = (::tensorflow::ops::Mean::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->keep_dims_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Mean_00024Attrs_keep_1dims_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Mean::Attrs* ptr = (::tensorflow::ops::Mean::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->keep_dims_ = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Mean_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Mean::Attrs* rptr = new ::tensorflow::ops::Mean::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Mean_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Mean_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Mean* ptr = (::tensorflow::ops::Mean*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Mean_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Mean* ptr = (::tensorflow::ops::Mean*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Mean_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Mean* ptr = (::tensorflow::ops::Mean*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Mean_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Mean* ptr = (::tensorflow::ops::Mean*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Mean_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Mean* ptr = (::tensorflow::ops::Mean*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Mean_KeepDims(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Mean::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Mean::Attrs(::tensorflow::ops::Mean::KeepDims((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Mean_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 126);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Mean_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024Mean_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::Mean::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::Mean::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Mean* rptr = new ::tensorflow::ops::Mean(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::Mean::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Mean_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Mean_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Mean* rptr = new ::tensorflow::ops::Mean(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Mean_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Maximum_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Maximum* ptr = (::tensorflow::ops::Maximum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Maximum_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Maximum* ptr = (::tensorflow::ops::Maximum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Maximum_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Maximum* ptr = (::tensorflow::ops::Maximum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Maximum_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Maximum* ptr = (::tensorflow::ops::Maximum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Maximum_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Maximum* ptr = (::tensorflow::ops::Maximum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Maximum_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Maximum* rptr = new ::tensorflow::ops::Maximum(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Maximum_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Max_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Max::Attrs* rptr = new ::tensorflow::ops::Max::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Max_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Max_00024Attrs_KeepDims(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Max::Attrs* ptr = (::tensorflow::ops::Max::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Max::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Max::Attrs(ptr->KeepDims((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Max_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 129);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024Max_00024Attrs_keep_1dims_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Max::Attrs* ptr = (::tensorflow::ops::Max::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->keep_dims_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Max_00024Attrs_keep_1dims_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Max::Attrs* ptr = (::tensorflow::ops::Max::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->keep_dims_ = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Max_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Max::Attrs* rptr = new ::tensorflow::ops::Max::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Max_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Max_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Max* ptr = (::tensorflow::ops::Max*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Max_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Max* ptr = (::tensorflow::ops::Max*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Max_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Max* ptr = (::tensorflow::ops::Max*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Max_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Max* ptr = (::tensorflow::ops::Max*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Max_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Max* ptr = (::tensorflow::ops::Max*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Max_KeepDims(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Max::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Max::Attrs(::tensorflow::ops::Max::KeepDims((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Max_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 129);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Max_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024Max_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::Max::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::Max::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Max* rptr = new ::tensorflow::ops::Max(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::Max::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Max_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Max_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Max* rptr = new ::tensorflow::ops::Max(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Max_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024MatMul_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatMul::Attrs* rptr = new ::tensorflow::ops::MatMul::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024MatMul_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024MatMul_00024Attrs_TransposeA(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::MatMul::Attrs* ptr = (::tensorflow::ops::MatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::MatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::MatMul::Attrs(ptr->TransposeA((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024MatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 131);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024MatMul_00024Attrs_TransposeB(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::MatMul::Attrs* ptr = (::tensorflow::ops::MatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::MatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::MatMul::Attrs(ptr->TransposeB((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024MatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 131);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024MatMul_00024Attrs_transpose_1a_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatMul::Attrs* ptr = (::tensorflow::ops::MatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->transpose_a_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024MatMul_00024Attrs_transpose_1a_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::MatMul::Attrs* ptr = (::tensorflow::ops::MatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->transpose_a_ = (bool)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024MatMul_00024Attrs_transpose_1b_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::MatMul::Attrs* ptr = (::tensorflow::ops::MatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->transpose_b_ = (bool)arg0;
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024MatMul_00024Attrs_transpose_1b_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatMul::Attrs* ptr = (::tensorflow::ops::MatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->transpose_b_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024MatMul_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatMul::Attrs* rptr = new ::tensorflow::ops::MatMul::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024MatMul_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024MatMul_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatMul* ptr = (::tensorflow::ops::MatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024MatMul_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatMul* ptr = (::tensorflow::ops::MatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024MatMul_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatMul* ptr = (::tensorflow::ops::MatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024MatMul_product__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::MatMul* ptr = (::tensorflow::ops::MatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->product = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024MatMul_product__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::MatMul* ptr = (::tensorflow::ops::MatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->product;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024MatMul_TransposeA(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::MatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::MatMul::Attrs(::tensorflow::ops::MatMul::TransposeA((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024MatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 131);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024MatMul_TransposeB(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::MatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::MatMul::Attrs(::tensorflow::ops::MatMul::TransposeB((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024MatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 131);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024MatMul_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024MatMul_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::MatMul::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::MatMul::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatMul* rptr = new ::tensorflow::ops::MatMul(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::MatMul::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024MatMul_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024MatMul_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::MatMul* rptr = new ::tensorflow::ops::MatMul(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024MatMul_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LogicalOr_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LogicalOr* ptr = (::tensorflow::ops::LogicalOr*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LogicalOr_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LogicalOr* ptr = (::tensorflow::ops::LogicalOr*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LogicalOr_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LogicalOr* ptr = (::tensorflow::ops::LogicalOr*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LogicalOr_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::LogicalOr* ptr = (::tensorflow::ops::LogicalOr*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LogicalOr_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LogicalOr* ptr = (::tensorflow::ops::LogicalOr*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024LogicalOr_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::LogicalOr* rptr = new ::tensorflow::ops::LogicalOr(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024LogicalOr_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LogicalNot_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LogicalNot* ptr = (::tensorflow::ops::LogicalNot*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LogicalNot_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LogicalNot* ptr = (::tensorflow::ops::LogicalNot*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LogicalNot_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LogicalNot* ptr = (::tensorflow::ops::LogicalNot*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LogicalNot_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::LogicalNot* ptr = (::tensorflow::ops::LogicalNot*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LogicalNot_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LogicalNot* ptr = (::tensorflow::ops::LogicalNot*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024LogicalNot_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::LogicalNot* rptr = new ::tensorflow::ops::LogicalNot(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024LogicalNot_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LogicalAnd_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LogicalAnd* ptr = (::tensorflow::ops::LogicalAnd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LogicalAnd_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LogicalAnd* ptr = (::tensorflow::ops::LogicalAnd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LogicalAnd_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LogicalAnd* ptr = (::tensorflow::ops::LogicalAnd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LogicalAnd_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::LogicalAnd* ptr = (::tensorflow::ops::LogicalAnd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LogicalAnd_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LogicalAnd* ptr = (::tensorflow::ops::LogicalAnd*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024LogicalAnd_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::LogicalAnd* rptr = new ::tensorflow::ops::LogicalAnd(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024LogicalAnd_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Log1p_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Log1p* ptr = (::tensorflow::ops::Log1p*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Log1p_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Log1p* ptr = (::tensorflow::ops::Log1p*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Log1p_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Log1p* ptr = (::tensorflow::ops::Log1p*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Log1p_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Log1p* ptr = (::tensorflow::ops::Log1p*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Log1p_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Log1p* ptr = (::tensorflow::ops::Log1p*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Log1p_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Log1p* rptr = new ::tensorflow::ops::Log1p(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Log1p_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Log_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Log* ptr = (::tensorflow::ops::Log*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Log_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Log* ptr = (::tensorflow::ops::Log*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Log_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Log* ptr = (::tensorflow::ops::Log*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Log_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Log* ptr = (::tensorflow::ops::Log*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Log_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Log* ptr = (::tensorflow::ops::Log*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Log_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Log* rptr = new ::tensorflow::ops::Log(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Log_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LinSpace_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LinSpace* ptr = (::tensorflow::ops::LinSpace*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LinSpace_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::LinSpace* ptr = (::tensorflow::ops::LinSpace*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LinSpace_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LinSpace* ptr = (::tensorflow::ops::LinSpace*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LinSpace_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LinSpace* ptr = (::tensorflow::ops::LinSpace*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LinSpace_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LinSpace* ptr = (::tensorflow::ops::LinSpace*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024LinSpace_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::LinSpace* rptr = new ::tensorflow::ops::LinSpace(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024LinSpace_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Lgamma_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Lgamma* ptr = (::tensorflow::ops::Lgamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Lgamma_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Lgamma* ptr = (::tensorflow::ops::Lgamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Lgamma_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Lgamma* ptr = (::tensorflow::ops::Lgamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Lgamma_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Lgamma* ptr = (::tensorflow::ops::Lgamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Lgamma_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Lgamma* ptr = (::tensorflow::ops::Lgamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Lgamma_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Lgamma* rptr = new ::tensorflow::ops::Lgamma(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Lgamma_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LessEqual_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LessEqual* ptr = (::tensorflow::ops::LessEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LessEqual_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LessEqual* ptr = (::tensorflow::ops::LessEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LessEqual_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LessEqual* ptr = (::tensorflow::ops::LessEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LessEqual_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::LessEqual* ptr = (::tensorflow::ops::LessEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024LessEqual_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::LessEqual* ptr = (::tensorflow::ops::LessEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024LessEqual_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::LessEqual* rptr = new ::tensorflow::ops::LessEqual(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024LessEqual_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Less_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Less* ptr = (::tensorflow::ops::Less*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Less_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Less* ptr = (::tensorflow::ops::Less*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Less_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Less* ptr = (::tensorflow::ops::Less*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Less_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Less* ptr = (::tensorflow::ops::Less*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Less_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Less* ptr = (::tensorflow::ops::Less*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Less_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Less* rptr = new ::tensorflow::ops::Less(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Less_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024IsNan_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::IsNan* ptr = (::tensorflow::ops::IsNan*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024IsNan_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::IsNan* ptr = (::tensorflow::ops::IsNan*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024IsNan_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::IsNan* ptr = (::tensorflow::ops::IsNan*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024IsNan_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::IsNan* ptr = (::tensorflow::ops::IsNan*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024IsNan_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::IsNan* ptr = (::tensorflow::ops::IsNan*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024IsNan_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::IsNan* rptr = new ::tensorflow::ops::IsNan(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024IsNan_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024IsInf_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::IsInf* ptr = (::tensorflow::ops::IsInf*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024IsInf_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::IsInf* ptr = (::tensorflow::ops::IsInf*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024IsInf_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::IsInf* ptr = (::tensorflow::ops::IsInf*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024IsInf_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::IsInf* ptr = (::tensorflow::ops::IsInf*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024IsInf_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::IsInf* ptr = (::tensorflow::ops::IsInf*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024IsInf_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::IsInf* rptr = new ::tensorflow::ops::IsInf(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024IsInf_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024IsFinite_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::IsFinite* ptr = (::tensorflow::ops::IsFinite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024IsFinite_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::IsFinite* ptr = (::tensorflow::ops::IsFinite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024IsFinite_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::IsFinite* ptr = (::tensorflow::ops::IsFinite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024IsFinite_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::IsFinite* ptr = (::tensorflow::ops::IsFinite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024IsFinite_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::IsFinite* ptr = (::tensorflow::ops::IsFinite*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024IsFinite_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::IsFinite* rptr = new ::tensorflow::ops::IsFinite(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024IsFinite_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Inv_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Inv* ptr = (::tensorflow::ops::Inv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Inv_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Inv* ptr = (::tensorflow::ops::Inv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Inv_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Inv* ptr = (::tensorflow::ops::Inv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Inv_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Inv* ptr = (::tensorflow::ops::Inv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Inv_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Inv* ptr = (::tensorflow::ops::Inv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Inv_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Inv* rptr = new ::tensorflow::ops::Inv(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Inv_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Imag_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Imag::Attrs* rptr = new ::tensorflow::ops::Imag::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Imag_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Imag_00024Attrs_Tout(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::Imag::Attrs* ptr = (::tensorflow::ops::Imag::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Imag::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Imag::Attrs(ptr->Tout((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Imag_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 146);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_ops_math_1ops_00024Imag_00024Attrs_Tout_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Imag::Attrs* ptr = (::tensorflow::ops::Imag::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    tensorflow::DataType rval = (tensorflow::DataType)ptr->Tout_;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Imag_00024Attrs_Tout_1__I(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::Imag::Attrs* ptr = (::tensorflow::ops::Imag::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->Tout_ = (tensorflow::DataType)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Imag_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Imag::Attrs* rptr = new ::tensorflow::ops::Imag::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Imag_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Imag_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Imag* ptr = (::tensorflow::ops::Imag*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Imag_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Imag* ptr = (::tensorflow::ops::Imag*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Imag_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Imag* ptr = (::tensorflow::ops::Imag*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Imag_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Imag* ptr = (::tensorflow::ops::Imag*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Imag_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Imag* ptr = (::tensorflow::ops::Imag*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Imag_Tout(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Imag::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Imag::Attrs(::tensorflow::ops::Imag::Tout((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Imag_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 146);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Imag_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024Imag_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    ::tensorflow::ops::Imag::Attrs* ptr2 = arg2 == NULL ? NULL : (::tensorflow::ops::Imag::Attrs*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Imag* rptr = new ::tensorflow::ops::Imag(*(const tensorflow::Scope*)ptr0, *ptr1, *(const ::tensorflow::ops::Imag::Attrs*)ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Imag_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Imag_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Imag* rptr = new ::tensorflow::ops::Imag(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Imag_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Igammac_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Igammac* ptr = (::tensorflow::ops::Igammac*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Igammac_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Igammac* ptr = (::tensorflow::ops::Igammac*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Igammac_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Igammac* ptr = (::tensorflow::ops::Igammac*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Igammac_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Igammac* ptr = (::tensorflow::ops::Igammac*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Igammac_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Igammac* ptr = (::tensorflow::ops::Igammac*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Igammac_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Igammac* rptr = new ::tensorflow::ops::Igammac(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Igammac_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Igamma_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Igamma* ptr = (::tensorflow::ops::Igamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Igamma_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Igamma* ptr = (::tensorflow::ops::Igamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Igamma_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Igamma* ptr = (::tensorflow::ops::Igamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Igamma_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Igamma* ptr = (::tensorflow::ops::Igamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Igamma_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Igamma* ptr = (::tensorflow::ops::Igamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Igamma_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Igamma* rptr = new ::tensorflow::ops::Igamma(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Igamma_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024HistogramFixedWidth_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::HistogramFixedWidth::Attrs* rptr = new ::tensorflow::ops::HistogramFixedWidth::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024HistogramFixedWidth_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024HistogramFixedWidth_00024Attrs_Dtype(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::HistogramFixedWidth::Attrs* ptr = (::tensorflow::ops::HistogramFixedWidth::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::HistogramFixedWidth::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::HistogramFixedWidth::Attrs(ptr->Dtype((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024HistogramFixedWidth_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 150);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_ops_math_1ops_00024HistogramFixedWidth_00024Attrs_dtype_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::HistogramFixedWidth::Attrs* ptr = (::tensorflow::ops::HistogramFixedWidth::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    tensorflow::DataType rval = (tensorflow::DataType)ptr->dtype_;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024HistogramFixedWidth_00024Attrs_dtype_1__I(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::HistogramFixedWidth::Attrs* ptr = (::tensorflow::ops::HistogramFixedWidth::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->dtype_ = (tensorflow::DataType)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024HistogramFixedWidth_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::HistogramFixedWidth::Attrs* rptr = new ::tensorflow::ops::HistogramFixedWidth::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024HistogramFixedWidth_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024HistogramFixedWidth_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::HistogramFixedWidth* ptr = (::tensorflow::ops::HistogramFixedWidth*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024HistogramFixedWidth_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::HistogramFixedWidth* ptr = (::tensorflow::ops::HistogramFixedWidth*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024HistogramFixedWidth_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::HistogramFixedWidth* ptr = (::tensorflow::ops::HistogramFixedWidth*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024HistogramFixedWidth_Dtype(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::HistogramFixedWidth::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::HistogramFixedWidth::Attrs(::tensorflow::ops::HistogramFixedWidth::Dtype((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024HistogramFixedWidth_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 150);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024HistogramFixedWidth_out__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::HistogramFixedWidth* ptr = (::tensorflow::ops::HistogramFixedWidth*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->out = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024HistogramFixedWidth_out__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::HistogramFixedWidth* ptr = (::tensorflow::ops::HistogramFixedWidth*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->out;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024HistogramFixedWidth_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024HistogramFixedWidth_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3, jobject arg4) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    ::tensorflow::ops::HistogramFixedWidth::Attrs* ptr4 = arg4 == NULL ? NULL : (::tensorflow::ops::HistogramFixedWidth::Attrs*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    if (ptr4 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 4 is NULL.");
        return;
    }
    jlong position4 = arg4 == NULL ? 0 : env->GetLongField(arg4, JavaCPP_positionFID);
    ptr4 += position4;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::HistogramFixedWidth* rptr = new ::tensorflow::ops::HistogramFixedWidth(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3, *(const ::tensorflow::ops::HistogramFixedWidth::Attrs*)ptr4);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024HistogramFixedWidth_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024HistogramFixedWidth_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::HistogramFixedWidth* rptr = new ::tensorflow::ops::HistogramFixedWidth(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024HistogramFixedWidth_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024GreaterEqual_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::GreaterEqual* ptr = (::tensorflow::ops::GreaterEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024GreaterEqual_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::GreaterEqual* ptr = (::tensorflow::ops::GreaterEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024GreaterEqual_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::GreaterEqual* ptr = (::tensorflow::ops::GreaterEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024GreaterEqual_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::GreaterEqual* ptr = (::tensorflow::ops::GreaterEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024GreaterEqual_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::GreaterEqual* ptr = (::tensorflow::ops::GreaterEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024GreaterEqual_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::GreaterEqual* rptr = new ::tensorflow::ops::GreaterEqual(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024GreaterEqual_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Greater_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Greater* ptr = (::tensorflow::ops::Greater*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Greater_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Greater* ptr = (::tensorflow::ops::Greater*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Greater_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Greater* ptr = (::tensorflow::ops::Greater*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Greater_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Greater* ptr = (::tensorflow::ops::Greater*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Greater_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Greater* ptr = (::tensorflow::ops::Greater*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Greater_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Greater* rptr = new ::tensorflow::ops::Greater(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Greater_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024FloorMod_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::FloorMod* ptr = (::tensorflow::ops::FloorMod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024FloorMod_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::FloorMod* ptr = (::tensorflow::ops::FloorMod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024FloorMod_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::FloorMod* ptr = (::tensorflow::ops::FloorMod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024FloorMod_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::FloorMod* ptr = (::tensorflow::ops::FloorMod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024FloorMod_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::FloorMod* ptr = (::tensorflow::ops::FloorMod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024FloorMod_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::FloorMod* rptr = new ::tensorflow::ops::FloorMod(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024FloorMod_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024FloorDiv_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::FloorDiv* ptr = (::tensorflow::ops::FloorDiv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024FloorDiv_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::FloorDiv* ptr = (::tensorflow::ops::FloorDiv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024FloorDiv_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::FloorDiv* ptr = (::tensorflow::ops::FloorDiv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024FloorDiv_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::FloorDiv* ptr = (::tensorflow::ops::FloorDiv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024FloorDiv_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::FloorDiv* ptr = (::tensorflow::ops::FloorDiv*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024FloorDiv_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::FloorDiv* rptr = new ::tensorflow::ops::FloorDiv(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024FloorDiv_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Floor_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Floor* ptr = (::tensorflow::ops::Floor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Floor_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Floor* ptr = (::tensorflow::ops::Floor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Floor_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Floor* ptr = (::tensorflow::ops::Floor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Floor_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Floor* ptr = (::tensorflow::ops::Floor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Floor_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Floor* ptr = (::tensorflow::ops::Floor*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Floor_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Floor* rptr = new ::tensorflow::ops::Floor(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Floor_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Expm1_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Expm1* ptr = (::tensorflow::ops::Expm1*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Expm1_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Expm1* ptr = (::tensorflow::ops::Expm1*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Expm1_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Expm1* ptr = (::tensorflow::ops::Expm1*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Expm1_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Expm1* ptr = (::tensorflow::ops::Expm1*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Expm1_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Expm1* ptr = (::tensorflow::ops::Expm1*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Expm1_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Expm1* rptr = new ::tensorflow::ops::Expm1(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Expm1_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Exp_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Exp* ptr = (::tensorflow::ops::Exp*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Exp_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Exp* ptr = (::tensorflow::ops::Exp*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Exp_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Exp* ptr = (::tensorflow::ops::Exp*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Exp_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Exp* ptr = (::tensorflow::ops::Exp*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Exp_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Exp* ptr = (::tensorflow::ops::Exp*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Exp_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Exp* rptr = new ::tensorflow::ops::Exp(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Exp_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Erfc_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Erfc* ptr = (::tensorflow::ops::Erfc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Erfc_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Erfc* ptr = (::tensorflow::ops::Erfc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Erfc_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Erfc* ptr = (::tensorflow::ops::Erfc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Erfc_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Erfc* ptr = (::tensorflow::ops::Erfc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Erfc_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Erfc* ptr = (::tensorflow::ops::Erfc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Erfc_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Erfc* rptr = new ::tensorflow::ops::Erfc(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Erfc_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Erf_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Erf* ptr = (::tensorflow::ops::Erf*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Erf_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Erf* ptr = (::tensorflow::ops::Erf*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Erf_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Erf* ptr = (::tensorflow::ops::Erf*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Erf_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Erf* ptr = (::tensorflow::ops::Erf*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Erf_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Erf* ptr = (::tensorflow::ops::Erf*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Erf_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Erf* rptr = new ::tensorflow::ops::Erf(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Erf_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Equal_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Equal* ptr = (::tensorflow::ops::Equal*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Equal_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Equal* ptr = (::tensorflow::ops::Equal*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Equal_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Equal* ptr = (::tensorflow::ops::Equal*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Equal_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Equal* ptr = (::tensorflow::ops::Equal*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Equal_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Equal* ptr = (::tensorflow::ops::Equal*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Equal_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Equal* rptr = new ::tensorflow::ops::Equal(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Equal_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Div_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Div* ptr = (::tensorflow::ops::Div*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Div_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Div* ptr = (::tensorflow::ops::Div*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Div_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Div* ptr = (::tensorflow::ops::Div*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Div_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Div* ptr = (::tensorflow::ops::Div*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Div_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Div* ptr = (::tensorflow::ops::Div*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Div_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Div* rptr = new ::tensorflow::ops::Div(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Div_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Digamma_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Digamma* ptr = (::tensorflow::ops::Digamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Digamma_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Digamma* ptr = (::tensorflow::ops::Digamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Digamma_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Digamma* ptr = (::tensorflow::ops::Digamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Digamma_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Digamma* ptr = (::tensorflow::ops::Digamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Digamma_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Digamma* ptr = (::tensorflow::ops::Digamma*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Digamma_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Digamma* rptr = new ::tensorflow::ops::Digamma(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Digamma_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Cumsum::Attrs* rptr = new ::tensorflow::ops::Cumsum::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Cumsum_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_00024Attrs_Exclusive(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Cumsum::Attrs* ptr = (::tensorflow::ops::Cumsum::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Cumsum::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Cumsum::Attrs(ptr->Exclusive((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Cumsum_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 164);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_00024Attrs_Reverse(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Cumsum::Attrs* ptr = (::tensorflow::ops::Cumsum::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Cumsum::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Cumsum::Attrs(ptr->Reverse((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Cumsum_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 164);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_00024Attrs_exclusive_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cumsum::Attrs* ptr = (::tensorflow::ops::Cumsum::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->exclusive_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_00024Attrs_exclusive_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Cumsum::Attrs* ptr = (::tensorflow::ops::Cumsum::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->exclusive_ = (bool)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_00024Attrs_reverse_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Cumsum::Attrs* ptr = (::tensorflow::ops::Cumsum::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->reverse_ = (bool)arg0;
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_00024Attrs_reverse_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cumsum::Attrs* ptr = (::tensorflow::ops::Cumsum::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->reverse_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Cumsum::Attrs* rptr = new ::tensorflow::ops::Cumsum::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Cumsum_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cumsum* ptr = (::tensorflow::ops::Cumsum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cumsum* ptr = (::tensorflow::ops::Cumsum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cumsum* ptr = (::tensorflow::ops::Cumsum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_Exclusive(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Cumsum::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Cumsum::Attrs(::tensorflow::ops::Cumsum::Exclusive((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Cumsum_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 164);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_Reverse(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Cumsum::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Cumsum::Attrs(::tensorflow::ops::Cumsum::Reverse((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Cumsum_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 164);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_out__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Cumsum* ptr = (::tensorflow::ops::Cumsum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->out = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_out__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cumsum* ptr = (::tensorflow::ops::Cumsum*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->out;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024Cumsum_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::Cumsum::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::Cumsum::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Cumsum* rptr = new ::tensorflow::ops::Cumsum(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::Cumsum::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Cumsum_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Cumsum_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Cumsum* rptr = new ::tensorflow::ops::Cumsum(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Cumsum_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Cumprod::Attrs* rptr = new ::tensorflow::ops::Cumprod::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Cumprod_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_00024Attrs_Exclusive(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Cumprod::Attrs* ptr = (::tensorflow::ops::Cumprod::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Cumprod::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Cumprod::Attrs(ptr->Exclusive((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Cumprod_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 166);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_00024Attrs_Reverse(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Cumprod::Attrs* ptr = (::tensorflow::ops::Cumprod::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Cumprod::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Cumprod::Attrs(ptr->Reverse((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Cumprod_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 166);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_00024Attrs_exclusive_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cumprod::Attrs* ptr = (::tensorflow::ops::Cumprod::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->exclusive_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_00024Attrs_exclusive_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Cumprod::Attrs* ptr = (::tensorflow::ops::Cumprod::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->exclusive_ = (bool)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_00024Attrs_reverse_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Cumprod::Attrs* ptr = (::tensorflow::ops::Cumprod::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->reverse_ = (bool)arg0;
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_00024Attrs_reverse_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cumprod::Attrs* ptr = (::tensorflow::ops::Cumprod::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->reverse_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Cumprod::Attrs* rptr = new ::tensorflow::ops::Cumprod::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Cumprod_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cumprod* ptr = (::tensorflow::ops::Cumprod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cumprod* ptr = (::tensorflow::ops::Cumprod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cumprod* ptr = (::tensorflow::ops::Cumprod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_Exclusive(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Cumprod::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Cumprod::Attrs(::tensorflow::ops::Cumprod::Exclusive((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Cumprod_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 166);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_Reverse(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Cumprod::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Cumprod::Attrs(::tensorflow::ops::Cumprod::Reverse((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Cumprod_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 166);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_out__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Cumprod* ptr = (::tensorflow::ops::Cumprod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->out = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_out__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cumprod* ptr = (::tensorflow::ops::Cumprod*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->out;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024Cumprod_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::Cumprod::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::Cumprod::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Cumprod* rptr = new ::tensorflow::ops::Cumprod(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::Cumprod::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Cumprod_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Cumprod_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Cumprod* rptr = new ::tensorflow::ops::Cumprod(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Cumprod_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cross_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cross* ptr = (::tensorflow::ops::Cross*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cross_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cross* ptr = (::tensorflow::ops::Cross*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cross_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cross* ptr = (::tensorflow::ops::Cross*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cross_product__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Cross* ptr = (::tensorflow::ops::Cross*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->product = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cross_product__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cross* ptr = (::tensorflow::ops::Cross*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->product;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Cross_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Cross* rptr = new ::tensorflow::ops::Cross(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Cross_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cosh_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cosh* ptr = (::tensorflow::ops::Cosh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cosh_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cosh* ptr = (::tensorflow::ops::Cosh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cosh_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cosh* ptr = (::tensorflow::ops::Cosh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cosh_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Cosh* ptr = (::tensorflow::ops::Cosh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cosh_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cosh* ptr = (::tensorflow::ops::Cosh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Cosh_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Cosh* rptr = new ::tensorflow::ops::Cosh(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Cosh_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cos_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cos* ptr = (::tensorflow::ops::Cos*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cos_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cos* ptr = (::tensorflow::ops::Cos*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cos_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cos* ptr = (::tensorflow::ops::Cos*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cos_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Cos* ptr = (::tensorflow::ops::Cos*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Cos_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Cos* ptr = (::tensorflow::ops::Cos*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Cos_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Cos* rptr = new ::tensorflow::ops::Cos(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Cos_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Conj_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Conj* ptr = (::tensorflow::ops::Conj*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Conj_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Conj* ptr = (::tensorflow::ops::Conj*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Conj_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Conj* ptr = (::tensorflow::ops::Conj*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Conj_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Conj* ptr = (::tensorflow::ops::Conj*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Conj_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Conj* ptr = (::tensorflow::ops::Conj*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Conj_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Conj* rptr = new ::tensorflow::ops::Conj(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Conj_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ComplexAbs_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ComplexAbs::Attrs* rptr = new ::tensorflow::ops::ComplexAbs::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ComplexAbs_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ComplexAbs_00024Attrs_Tout(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::ComplexAbs::Attrs* ptr = (::tensorflow::ops::ComplexAbs::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::ComplexAbs::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::ComplexAbs::Attrs(ptr->Tout((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024ComplexAbs_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 172);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_ops_math_1ops_00024ComplexAbs_00024Attrs_Tout_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ComplexAbs::Attrs* ptr = (::tensorflow::ops::ComplexAbs::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    tensorflow::DataType rval = (tensorflow::DataType)ptr->Tout_;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ComplexAbs_00024Attrs_Tout_1__I(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::ComplexAbs::Attrs* ptr = (::tensorflow::ops::ComplexAbs::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->Tout_ = (tensorflow::DataType)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ComplexAbs_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ComplexAbs::Attrs* rptr = new ::tensorflow::ops::ComplexAbs::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ComplexAbs_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ComplexAbs_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ComplexAbs* ptr = (::tensorflow::ops::ComplexAbs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ComplexAbs_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ComplexAbs* ptr = (::tensorflow::ops::ComplexAbs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ComplexAbs_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ComplexAbs* ptr = (::tensorflow::ops::ComplexAbs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ComplexAbs_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::ComplexAbs* ptr = (::tensorflow::ops::ComplexAbs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ComplexAbs_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ComplexAbs* ptr = (::tensorflow::ops::ComplexAbs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ComplexAbs_Tout(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::ComplexAbs::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::ComplexAbs::Attrs(::tensorflow::ops::ComplexAbs::Tout((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024ComplexAbs_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 172);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ComplexAbs_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024ComplexAbs_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    ::tensorflow::ops::ComplexAbs::Attrs* ptr2 = arg2 == NULL ? NULL : (::tensorflow::ops::ComplexAbs::Attrs*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ComplexAbs* rptr = new ::tensorflow::ops::ComplexAbs(*(const tensorflow::Scope*)ptr0, *ptr1, *(const ::tensorflow::ops::ComplexAbs::Attrs*)ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ComplexAbs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ComplexAbs_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ComplexAbs* rptr = new ::tensorflow::ops::ComplexAbs(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ComplexAbs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Complex_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Complex::Attrs* rptr = new ::tensorflow::ops::Complex::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Complex_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Complex_00024Attrs_Tout(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::Complex::Attrs* ptr = (::tensorflow::ops::Complex::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Complex::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Complex::Attrs(ptr->Tout((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Complex_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 174);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_ops_math_1ops_00024Complex_00024Attrs_Tout_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Complex::Attrs* ptr = (::tensorflow::ops::Complex::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    tensorflow::DataType rval = (tensorflow::DataType)ptr->Tout_;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Complex_00024Attrs_Tout_1__I(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::Complex::Attrs* ptr = (::tensorflow::ops::Complex::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->Tout_ = (tensorflow::DataType)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Complex_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Complex::Attrs* rptr = new ::tensorflow::ops::Complex::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Complex_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Complex_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Complex* ptr = (::tensorflow::ops::Complex*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Complex_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Complex* ptr = (::tensorflow::ops::Complex*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Complex_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Complex* ptr = (::tensorflow::ops::Complex*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Complex_Tout(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Complex::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Complex::Attrs(::tensorflow::ops::Complex::Tout((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Complex_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 174);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Complex_out__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Complex* ptr = (::tensorflow::ops::Complex*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->out = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Complex_out__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Complex* ptr = (::tensorflow::ops::Complex*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->out;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Complex_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024Complex_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::Complex::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::Complex::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Complex* rptr = new ::tensorflow::ops::Complex(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::Complex::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Complex_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Complex_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Complex* rptr = new ::tensorflow::ops::Complex(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Complex_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024CompareAndBitpack_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::CompareAndBitpack* ptr = (::tensorflow::ops::CompareAndBitpack*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024CompareAndBitpack_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::CompareAndBitpack* ptr = (::tensorflow::ops::CompareAndBitpack*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024CompareAndBitpack_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::CompareAndBitpack* ptr = (::tensorflow::ops::CompareAndBitpack*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024CompareAndBitpack_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::CompareAndBitpack* ptr = (::tensorflow::ops::CompareAndBitpack*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024CompareAndBitpack_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::CompareAndBitpack* ptr = (::tensorflow::ops::CompareAndBitpack*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024CompareAndBitpack_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::CompareAndBitpack* rptr = new ::tensorflow::ops::CompareAndBitpack(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024CompareAndBitpack_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ClipByValue_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ClipByValue* ptr = (::tensorflow::ops::ClipByValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ClipByValue_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::ClipByValue* ptr = (::tensorflow::ops::ClipByValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ClipByValue_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ClipByValue* ptr = (::tensorflow::ops::ClipByValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ClipByValue_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ClipByValue* ptr = (::tensorflow::ops::ClipByValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ClipByValue_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ClipByValue* ptr = (::tensorflow::ops::ClipByValue*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ClipByValue_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ClipByValue* rptr = new ::tensorflow::ops::ClipByValue(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ClipByValue_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Ceil_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Ceil* ptr = (::tensorflow::ops::Ceil*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Ceil_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Ceil* ptr = (::tensorflow::ops::Ceil*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Ceil_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Ceil* ptr = (::tensorflow::ops::Ceil*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Ceil_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Ceil* ptr = (::tensorflow::ops::Ceil*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Ceil_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Ceil* ptr = (::tensorflow::ops::Ceil*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Ceil_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Ceil* rptr = new ::tensorflow::ops::Ceil(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Ceil_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024CastOp_node(JNIEnv* env, jobject obj) {
    class tensorflow::ops::Cast* ptr = (class tensorflow::ops::Cast*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024CastOp_asOutput(JNIEnv* env, jobject obj) {
    class tensorflow::ops::Cast* ptr = (class tensorflow::ops::Cast*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024CastOp_asInput(JNIEnv* env, jobject obj) {
    class tensorflow::ops::Cast* ptr = (class tensorflow::ops::Cast*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024CastOp_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    class tensorflow::ops::Cast* ptr = (class tensorflow::ops::Cast*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024CastOp_y__(JNIEnv* env, jobject obj) {
    class tensorflow::ops::Cast* ptr = (class tensorflow::ops::Cast*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024CastOp_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jint arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        class tensorflow::ops::Cast* rptr = new class tensorflow::ops::Cast(*(const tensorflow::Scope*)ptr0, *ptr1, (tensorflow::DataType)arg2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024CastOp_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Bucketize_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Bucketize* ptr = (::tensorflow::ops::Bucketize*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Bucketize_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Bucketize* ptr = (::tensorflow::ops::Bucketize*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Bucketize_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Bucketize* ptr = (::tensorflow::ops::Bucketize*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Bucketize_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Bucketize* ptr = (::tensorflow::ops::Bucketize*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Bucketize_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Bucketize* ptr = (::tensorflow::ops::Bucketize*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Bucketize_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2_3F(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jfloatArray arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    float* ptr2 = arg2 == NULL ? NULL : env->GetFloatArrayElements(arg2, NULL);
    jlong size2 = arg2 == NULL ? 0 : env->GetArrayLength(arg2);
    void* owner2 = (void*)ptr2;
    ArraySliceAdapter< float > adapter2(ptr2, size2, owner2);
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Bucketize* rptr = new ::tensorflow::ops::Bucketize(*(const tensorflow::Scope*)ptr0, *ptr1, (tensorflow::gtl::ArraySlice< float >&)adapter2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Bucketize_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    float* rptr2 = adapter2;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        ArraySliceAdapter< float >::deallocate(rowner2);
    }
    if (arg2 != NULL) env->ReleaseFloatArrayElements(arg2, (jfloat*)ptr2, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Bucketize_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lorg_bytedeco_javacpp_FloatPointer_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    float* ptr2 = arg2 == NULL ? NULL : (float*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong size2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_limitFID);
    void* owner2 = JavaCPP_getPointerOwner(env, arg2);
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size2 -= position2;
    ArraySliceAdapter< float > adapter2(ptr2, size2, owner2);
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Bucketize* rptr = new ::tensorflow::ops::Bucketize(*(const tensorflow::Scope*)ptr0, *ptr1, (tensorflow::gtl::ArraySlice< float >&)adapter2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Bucketize_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    float* rptr2 = adapter2;
    jlong rsize2 = (jlong)adapter2.size;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        JavaCPP_initPointer(env, arg2, rptr2, rsize2, rowner2, &ArraySliceAdapter< float >::deallocate);
    } else {
        env->SetLongField(arg2, JavaCPP_limitFID, rsize2 + position2);
    }
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Bucketize_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Ljava_nio_FloatBuffer_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    float* ptr2 = arg2 == NULL ? NULL : (float*)env->GetDirectBufferAddress(arg2);
    jlong size2 = arg2 == NULL ? 0 : env->GetDirectBufferCapacity(arg2);
    void* owner2 = (void*)ptr2;
    jfloatArray arr2 = NULL;
    if (arg2 != NULL && ptr2 == NULL) {
        arr2 = (jfloatArray)env->CallObjectMethod(arg2, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr2 = arr2 == NULL ? NULL : env->GetFloatArrayElements(arr2, NULL);
            size2 = env->GetArrayLength(arr2);
        }
    }
    ArraySliceAdapter< float > adapter2(ptr2, size2, owner2);
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Bucketize* rptr = new ::tensorflow::ops::Bucketize(*(const tensorflow::Scope*)ptr0, *ptr1, (tensorflow::gtl::ArraySlice< float >&)adapter2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Bucketize_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    float* rptr2 = adapter2;
    void* rowner2 = adapter2.owner;
    if (rptr2 != ptr2) {
        ArraySliceAdapter< float >::deallocate(rowner2);
    }
    if (arr2 != NULL) env->ReleaseFloatArrayElements(arr2, (jfloat*)ptr2, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Bincount_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Bincount* ptr = (::tensorflow::ops::Bincount*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Bincount_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Bincount* ptr = (::tensorflow::ops::Bincount*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Bincount_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Bincount* ptr = (::tensorflow::ops::Bincount*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Bincount_bins__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Bincount* ptr = (::tensorflow::ops::Bincount*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->bins = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Bincount_bins__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Bincount* ptr = (::tensorflow::ops::Bincount*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->bins;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Bincount_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Bincount* rptr = new ::tensorflow::ops::Bincount(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Bincount_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Betainc_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Betainc* ptr = (::tensorflow::ops::Betainc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Betainc_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Betainc* ptr = (::tensorflow::ops::Betainc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Betainc_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Betainc* ptr = (::tensorflow::ops::Betainc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Betainc_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Betainc* ptr = (::tensorflow::ops::Betainc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Betainc_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Betainc* ptr = (::tensorflow::ops::Betainc*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Betainc_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    tensorflow::Input* ptr3 = arg3 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Betainc* rptr = new ::tensorflow::ops::Betainc(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Betainc_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::BatchMatMul::Attrs* rptr = new ::tensorflow::ops::BatchMatMul::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_AdjX(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::BatchMatMul::Attrs* ptr = (::tensorflow::ops::BatchMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::BatchMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::BatchMatMul::Attrs(ptr->AdjX((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 183);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_AdjY(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::BatchMatMul::Attrs* ptr = (::tensorflow::ops::BatchMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::BatchMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::BatchMatMul::Attrs(ptr->AdjY((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 183);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_adj_1x_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::BatchMatMul::Attrs* ptr = (::tensorflow::ops::BatchMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->adj_x_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_adj_1x_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::BatchMatMul::Attrs* ptr = (::tensorflow::ops::BatchMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->adj_x_ = (bool)arg0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_adj_1y_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::BatchMatMul::Attrs* ptr = (::tensorflow::ops::BatchMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->adj_y_ = (bool)arg0;
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_adj_1y_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::BatchMatMul::Attrs* ptr = (::tensorflow::ops::BatchMatMul::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->adj_y_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::BatchMatMul::Attrs* rptr = new ::tensorflow::ops::BatchMatMul::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::BatchMatMul* ptr = (::tensorflow::ops::BatchMatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::BatchMatMul* ptr = (::tensorflow::ops::BatchMatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::BatchMatMul* ptr = (::tensorflow::ops::BatchMatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::BatchMatMul* ptr = (::tensorflow::ops::BatchMatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::BatchMatMul* ptr = (::tensorflow::ops::BatchMatMul*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_AdjX(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::BatchMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::BatchMatMul::Attrs(::tensorflow::ops::BatchMatMul::AdjX((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 183);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_AdjY(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::BatchMatMul::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::BatchMatMul::Attrs(::tensorflow::ops::BatchMatMul::AdjY((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 183);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024BatchMatMul_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::BatchMatMul::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::BatchMatMul::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::BatchMatMul* rptr = new ::tensorflow::ops::BatchMatMul(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::BatchMatMul::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024BatchMatMul_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024BatchMatMul_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::BatchMatMul* rptr = new ::tensorflow::ops::BatchMatMul(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024BatchMatMul_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Atanh_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Atanh* ptr = (::tensorflow::ops::Atanh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Atanh_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Atanh* ptr = (::tensorflow::ops::Atanh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Atanh_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Atanh* ptr = (::tensorflow::ops::Atanh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Atanh_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Atanh* ptr = (::tensorflow::ops::Atanh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Atanh_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Atanh* ptr = (::tensorflow::ops::Atanh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Atanh_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Atanh* rptr = new ::tensorflow::ops::Atanh(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Atanh_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Atan2_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Atan2* ptr = (::tensorflow::ops::Atan2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Atan2_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Atan2* ptr = (::tensorflow::ops::Atan2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Atan2_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Atan2* ptr = (::tensorflow::ops::Atan2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Atan2_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Atan2* ptr = (::tensorflow::ops::Atan2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Atan2_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Atan2* ptr = (::tensorflow::ops::Atan2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Atan2_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Atan2* rptr = new ::tensorflow::ops::Atan2(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Atan2_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Atan_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Atan* ptr = (::tensorflow::ops::Atan*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Atan_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Atan* ptr = (::tensorflow::ops::Atan*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Atan_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Atan* ptr = (::tensorflow::ops::Atan*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Atan_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Atan* ptr = (::tensorflow::ops::Atan*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Atan_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Atan* ptr = (::tensorflow::ops::Atan*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Atan_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Atan* rptr = new ::tensorflow::ops::Atan(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Atan_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Asinh_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Asinh* ptr = (::tensorflow::ops::Asinh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Asinh_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Asinh* ptr = (::tensorflow::ops::Asinh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Asinh_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Asinh* ptr = (::tensorflow::ops::Asinh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Asinh_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Asinh* ptr = (::tensorflow::ops::Asinh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Asinh_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Asinh* ptr = (::tensorflow::ops::Asinh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Asinh_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Asinh* rptr = new ::tensorflow::ops::Asinh(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Asinh_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Asin_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Asin* ptr = (::tensorflow::ops::Asin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Asin_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Asin* ptr = (::tensorflow::ops::Asin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Asin_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Asin* ptr = (::tensorflow::ops::Asin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Asin_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Asin* ptr = (::tensorflow::ops::Asin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Asin_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Asin* ptr = (::tensorflow::ops::Asin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Asin_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Asin* rptr = new ::tensorflow::ops::Asin(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Asin_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ArgMin_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ArgMin::Attrs* rptr = new ::tensorflow::ops::ArgMin::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ArgMin_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ArgMin_00024Attrs_OutputType(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::ArgMin::Attrs* ptr = (::tensorflow::ops::ArgMin::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::ArgMin::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::ArgMin::Attrs(ptr->OutputType((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024ArgMin_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 190);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_ops_math_1ops_00024ArgMin_00024Attrs_output_1type_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ArgMin::Attrs* ptr = (::tensorflow::ops::ArgMin::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    tensorflow::DataType rval = (tensorflow::DataType)ptr->output_type_;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ArgMin_00024Attrs_output_1type_1__I(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::ArgMin::Attrs* ptr = (::tensorflow::ops::ArgMin::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->output_type_ = (tensorflow::DataType)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ArgMin_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ArgMin::Attrs* rptr = new ::tensorflow::ops::ArgMin::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ArgMin_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ArgMin_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ArgMin* ptr = (::tensorflow::ops::ArgMin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ArgMin_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::ArgMin* ptr = (::tensorflow::ops::ArgMin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ArgMin_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ArgMin* ptr = (::tensorflow::ops::ArgMin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ArgMin_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ArgMin* ptr = (::tensorflow::ops::ArgMin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ArgMin_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ArgMin* ptr = (::tensorflow::ops::ArgMin*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ArgMin_OutputType(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::ArgMin::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::ArgMin::Attrs(::tensorflow::ops::ArgMin::OutputType((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024ArgMin_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 190);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ArgMin_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024ArgMin_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::ArgMin::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::ArgMin::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ArgMin* rptr = new ::tensorflow::ops::ArgMin(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::ArgMin::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ArgMin_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ArgMin_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ArgMin* rptr = new ::tensorflow::ops::ArgMin(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ArgMin_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ArgMax_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ArgMax::Attrs* rptr = new ::tensorflow::ops::ArgMax::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ArgMax_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ArgMax_00024Attrs_OutputType(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::ArgMax::Attrs* ptr = (::tensorflow::ops::ArgMax::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::ArgMax::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::ArgMax::Attrs(ptr->OutputType((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024ArgMax_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 192);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_ops_math_1ops_00024ArgMax_00024Attrs_output_1type_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ArgMax::Attrs* ptr = (::tensorflow::ops::ArgMax::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    tensorflow::DataType rval = (tensorflow::DataType)ptr->output_type_;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ArgMax_00024Attrs_output_1type_1__I(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::ArgMax::Attrs* ptr = (::tensorflow::ops::ArgMax::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->output_type_ = (tensorflow::DataType)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ArgMax_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ArgMax::Attrs* rptr = new ::tensorflow::ops::ArgMax::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ArgMax_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ArgMax_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ArgMax* ptr = (::tensorflow::ops::ArgMax*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ArgMax_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::ArgMax* ptr = (::tensorflow::ops::ArgMax*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ArgMax_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ArgMax* ptr = (::tensorflow::ops::ArgMax*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ArgMax_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ArgMax* ptr = (::tensorflow::ops::ArgMax*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ArgMax_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ArgMax* ptr = (::tensorflow::ops::ArgMax*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ArgMax_OutputType(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::ArgMax::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::ArgMax::Attrs(::tensorflow::ops::ArgMax::OutputType((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024ArgMax_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 192);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ArgMax_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024ArgMax_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::ArgMax::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::ArgMax::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ArgMax* rptr = new ::tensorflow::ops::ArgMax(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::ArgMax::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ArgMax_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ArgMax_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ArgMax* rptr = new ::tensorflow::ops::ArgMax(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ArgMax_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ApproximateEqual_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ApproximateEqual::Attrs* rptr = new ::tensorflow::ops::ApproximateEqual::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ApproximateEqual_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ApproximateEqual_00024Attrs_Tolerance(JNIEnv* env, jobject obj, jfloat arg0) {
    ::tensorflow::ops::ApproximateEqual::Attrs* ptr = (::tensorflow::ops::ApproximateEqual::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::ApproximateEqual::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::ApproximateEqual::Attrs(ptr->Tolerance(arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024ApproximateEqual_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 194);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jfloat JNICALL Java_native_1types_ops_math_1ops_00024ApproximateEqual_00024Attrs_tolerance_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ApproximateEqual::Attrs* ptr = (::tensorflow::ops::ApproximateEqual::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jfloat rarg = 0;
    float rval = ptr->tolerance_;
    rarg = (jfloat)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ApproximateEqual_00024Attrs_tolerance_1__F(JNIEnv* env, jobject obj, jfloat arg0) {
    ::tensorflow::ops::ApproximateEqual::Attrs* ptr = (::tensorflow::ops::ApproximateEqual::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->tolerance_ = arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ApproximateEqual_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ApproximateEqual::Attrs* rptr = new ::tensorflow::ops::ApproximateEqual::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ApproximateEqual_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ApproximateEqual_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ApproximateEqual* ptr = (::tensorflow::ops::ApproximateEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ApproximateEqual_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ApproximateEqual* ptr = (::tensorflow::ops::ApproximateEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ApproximateEqual_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ApproximateEqual* ptr = (::tensorflow::ops::ApproximateEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ApproximateEqual_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::ApproximateEqual* ptr = (::tensorflow::ops::ApproximateEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ApproximateEqual_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::ApproximateEqual* ptr = (::tensorflow::ops::ApproximateEqual*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024ApproximateEqual_Tolerance(JNIEnv* env, jclass cls, jfloat arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::ApproximateEqual::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::ApproximateEqual::Attrs(::tensorflow::ops::ApproximateEqual::Tolerance(arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024ApproximateEqual_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 194);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ApproximateEqual_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024ApproximateEqual_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::ApproximateEqual::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::ApproximateEqual::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ApproximateEqual* rptr = new ::tensorflow::ops::ApproximateEqual(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::ApproximateEqual::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ApproximateEqual_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024ApproximateEqual_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::ApproximateEqual* rptr = new ::tensorflow::ops::ApproximateEqual(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024ApproximateEqual_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Any_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Any::Attrs* rptr = new ::tensorflow::ops::Any::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Any_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Any_00024Attrs_KeepDims(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Any::Attrs* ptr = (::tensorflow::ops::Any::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Any::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Any::Attrs(ptr->KeepDims((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Any_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 196);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024Any_00024Attrs_keep_1dims_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Any::Attrs* ptr = (::tensorflow::ops::Any::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->keep_dims_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Any_00024Attrs_keep_1dims_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::Any::Attrs* ptr = (::tensorflow::ops::Any::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->keep_dims_ = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Any_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Any::Attrs* rptr = new ::tensorflow::ops::Any::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Any_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Any_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Any* ptr = (::tensorflow::ops::Any*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Any_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Any* ptr = (::tensorflow::ops::Any*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Any_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Any* ptr = (::tensorflow::ops::Any*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Any_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Any* ptr = (::tensorflow::ops::Any*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Any_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Any* ptr = (::tensorflow::ops::Any*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Any_KeepDims(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Any::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Any::Attrs(::tensorflow::ops::Any::KeepDims((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Any_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 196);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Any_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024Any_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::Any::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::Any::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Any* rptr = new ::tensorflow::ops::Any(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::Any::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Any_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Any_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Any* rptr = new ::tensorflow::ops::Any(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Any_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Angle_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Angle::Attrs* rptr = new ::tensorflow::ops::Angle::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Angle_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Angle_00024Attrs_Tout(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::Angle::Attrs* ptr = (::tensorflow::ops::Angle::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::Angle::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Angle::Attrs(ptr->Tout((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Angle_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 198);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_ops_math_1ops_00024Angle_00024Attrs_Tout_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Angle::Attrs* ptr = (::tensorflow::ops::Angle::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    tensorflow::DataType rval = (tensorflow::DataType)ptr->Tout_;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Angle_00024Attrs_Tout_1__I(JNIEnv* env, jobject obj, jint arg0) {
    ::tensorflow::ops::Angle::Attrs* ptr = (::tensorflow::ops::Angle::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->Tout_ = (tensorflow::DataType)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Angle_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Angle::Attrs* rptr = new ::tensorflow::ops::Angle::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Angle_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Angle_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Angle* ptr = (::tensorflow::ops::Angle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Angle_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Angle* ptr = (::tensorflow::ops::Angle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Angle_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Angle* ptr = (::tensorflow::ops::Angle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Angle_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Angle* ptr = (::tensorflow::ops::Angle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Angle_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Angle* ptr = (::tensorflow::ops::Angle*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Angle_Tout(JNIEnv* env, jclass cls, jint arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::Angle::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::Angle::Attrs(::tensorflow::ops::Angle::Tout((tensorflow::DataType)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024Angle_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 198);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Angle_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024Angle_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    ::tensorflow::ops::Angle::Attrs* ptr2 = arg2 == NULL ? NULL : (::tensorflow::ops::Angle::Attrs*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Angle* rptr = new ::tensorflow::ops::Angle(*(const tensorflow::Scope*)ptr0, *ptr1, *(const ::tensorflow::ops::Angle::Attrs*)ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Angle_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Angle_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Angle* rptr = new ::tensorflow::ops::Angle(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Angle_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024All_00024Attrs_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::All::Attrs* rptr = new ::tensorflow::ops::All::Attrs[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024All_00024Attrs_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024All_00024Attrs_KeepDims(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::All::Attrs* ptr = (::tensorflow::ops::All::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::tensorflow::ops::All::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::All::Attrs(ptr->KeepDims((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024All_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 200);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jboolean JNICALL Java_native_1types_ops_math_1ops_00024All_00024Attrs_keep_1dims_1__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::All::Attrs* ptr = (::tensorflow::ops::All::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jboolean rarg = 0;
    bool rval = (bool)ptr->keep_dims_;
    rarg = (jboolean)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024All_00024Attrs_keep_1dims_1__Z(JNIEnv* env, jobject obj, jboolean arg0) {
    ::tensorflow::ops::All::Attrs* ptr = (::tensorflow::ops::All::Attrs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->keep_dims_ = (bool)arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024All_00024Attrs_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::All::Attrs* rptr = new ::tensorflow::ops::All::Attrs();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024All_00024Attrs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024All_output__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::All* ptr = (::tensorflow::ops::All*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->output;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024All_output__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::All* ptr = (::tensorflow::ops::All*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->output = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024All_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::All* ptr = (::tensorflow::ops::All*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024All_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::All* ptr = (::tensorflow::ops::All*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024All_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::All* ptr = (::tensorflow::ops::All*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024All_KeepDims(JNIEnv* env, jclass cls, jboolean arg0) {
    jobject rarg = NULL;
    ::tensorflow::ops::All::Attrs* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::tensorflow::ops::All::Attrs(::tensorflow::ops::All::KeepDims((bool)arg0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_ops_math_1ops_00024All_00024Attrs_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 200);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024All_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2Lnative_1types_ops_math_1ops_00024All_00024Attrs_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2, jobject arg3) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::tensorflow::ops::All::Attrs* ptr3 = arg3 == NULL ? NULL : (::tensorflow::ops::All::Attrs*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    if (ptr3 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 3 is NULL.");
        return;
    }
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::All* rptr = new ::tensorflow::ops::All(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2, *(const ::tensorflow::ops::All::Attrs*)ptr3);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024All_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024All_allocate__Lnative_1types_cc_framework_Scope_2Lnative_1types_cc_framework_Input_2Lnative_1types_cc_framework_Input_2(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::All* rptr = new ::tensorflow::ops::All(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024All_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024AddV2_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::AddV2* ptr = (::tensorflow::ops::AddV2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024AddV2_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::AddV2* ptr = (::tensorflow::ops::AddV2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024AddV2_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::AddV2* ptr = (::tensorflow::ops::AddV2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024AddV2_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::AddV2* ptr = (::tensorflow::ops::AddV2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024AddV2_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::AddV2* ptr = (::tensorflow::ops::AddV2*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024AddV2_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::AddV2* rptr = new ::tensorflow::ops::AddV2(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024AddV2_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024AddN_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::AddN* ptr = (::tensorflow::ops::AddN*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024AddN_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::AddN* ptr = (::tensorflow::ops::AddN*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024AddN_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::AddN* ptr = (::tensorflow::ops::AddN*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024AddN_sum__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::AddN* ptr = (::tensorflow::ops::AddN*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->sum = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024AddN_sum__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::AddN* ptr = (::tensorflow::ops::AddN*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->sum;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024AddN_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::InputList* ptr1 = arg1 == NULL ? NULL : (tensorflow::InputList*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::AddN* rptr = new ::tensorflow::ops::AddN(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024AddN_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Add_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Add* ptr = (::tensorflow::ops::Add*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Add_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Add* ptr = (::tensorflow::ops::Add*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Add_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Add* ptr = (::tensorflow::ops::Add*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Add_z__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Add* ptr = (::tensorflow::ops::Add*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->z = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Add_z__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Add* ptr = (::tensorflow::ops::Add*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->z;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Add_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1, jobject arg2) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    tensorflow::Input* ptr2 = arg2 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    if (ptr2 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 2 is NULL.");
        return;
    }
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Add* rptr = new ::tensorflow::ops::Add(*(const tensorflow::Scope*)ptr0, *ptr1, *ptr2);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Add_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Acosh_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Acosh* ptr = (::tensorflow::ops::Acosh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Acosh_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Acosh* ptr = (::tensorflow::ops::Acosh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Acosh_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Acosh* ptr = (::tensorflow::ops::Acosh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Acosh_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Acosh* ptr = (::tensorflow::ops::Acosh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Acosh_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Acosh* ptr = (::tensorflow::ops::Acosh*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Acosh_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Acosh* rptr = new ::tensorflow::ops::Acosh(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Acosh_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Acos_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Acos* ptr = (::tensorflow::ops::Acos*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Acos_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Acos* ptr = (::tensorflow::ops::Acos*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Acos_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Acos* ptr = (::tensorflow::ops::Acos*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Acos_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Acos* ptr = (::tensorflow::ops::Acos*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Acos_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Acos* ptr = (::tensorflow::ops::Acos*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Acos_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Acos* rptr = new ::tensorflow::ops::Acos(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Acos_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Abs_node(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Abs* ptr = (::tensorflow::ops::Abs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Node* rptr;
    jthrowable exc = NULL;
    try {
        rptr = ptr->node();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 30);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Abs_asOutput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Abs* ptr = (::tensorflow::ops::Abs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Output(ptr->operator tensorflow::Output());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Output_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 33);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Abs_asInput(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Abs* ptr = (::tensorflow::ops::Abs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Input* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new tensorflow::Input(ptr->operator tensorflow::Input());
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_cc_framework_Input_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 31);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Abs_y__Lnative_1types_cc_framework_Output_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::tensorflow::ops::Abs* ptr = (::tensorflow::ops::Abs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    tensorflow::Output* ptr0 = arg0 == NULL ? NULL : (tensorflow::Output*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->y = *ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_ops_math_1ops_00024Abs_y__(JNIEnv* env, jobject obj) {
    ::tensorflow::ops::Abs* ptr = (::tensorflow::ops::Abs*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    tensorflow::Output* rptr;
    rptr = &ptr->y;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 33);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_ops_math_1ops_00024Abs_allocate(JNIEnv* env, jobject obj, jobject arg0, jobject arg1) {
    tensorflow::Scope* ptr0 = arg0 == NULL ? NULL : (tensorflow::Scope*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    tensorflow::Input* ptr1 = arg1 == NULL ? NULL : (tensorflow::Input*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    if (ptr1 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 1 is NULL.");
        return;
    }
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        ::tensorflow::ops::Abs* rptr = new ::tensorflow::ops::Abs(*(const tensorflow::Scope*)ptr0, *ptr1);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_ops_math_1ops_00024Abs_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}




JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Output_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::TF_Output* rptr = new ::TF_Output[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_c_1api_c_1api_00024TF_1Output_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Output_oper__Lnative_1types_c_1api_c_1api_00024TF_1Operation_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::TF_Output* ptr = (::TF_Output*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::TF_Operation* ptr0 = arg0 == NULL ? NULL : (::TF_Operation*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = obj;
    ptr->oper = ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Output_oper__(JNIEnv* env, jobject obj) {
    ::TF_Output* ptr = (::TF_Output*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::TF_Operation* rptr;
    rptr = ptr->oper;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 209);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Output_index__(JNIEnv* env, jobject obj) {
    ::TF_Output* ptr = (::TF_Output*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rval = ptr->index;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Output_index__I(JNIEnv* env, jobject obj, jint arg0) {
    ::TF_Output* ptr = (::TF_Output*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->index = arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Output_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::TF_Output* rptr = new ::TF_Output();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_c_1api_c_1api_00024TF_1Output_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}

JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Input_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::TF_Input* rptr = new ::TF_Input[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_c_1api_c_1api_00024TF_1Input_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Input_oper__Lnative_1types_c_1api_c_1api_00024TF_1Operation_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::TF_Input* ptr = (::TF_Input*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    ::TF_Operation* ptr0 = arg0 == NULL ? NULL : (::TF_Operation*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = obj;
    ptr->oper = ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Input_oper__(JNIEnv* env, jobject obj) {
    ::TF_Input* ptr = (::TF_Input*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    ::TF_Operation* rptr;
    rptr = ptr->oper;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 209);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Input_index__(JNIEnv* env, jobject obj) {
    ::TF_Input* ptr = (::TF_Input*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jint rarg = 0;
    int rval = ptr->index;
    rarg = (jint)rval;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Input_index__I(JNIEnv* env, jobject obj, jint arg0) {
    ::TF_Input* ptr = (::TF_Input*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->index = arg0;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Input_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::TF_Input* rptr = new ::TF_Input();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_c_1api_c_1api_00024TF_1Input_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}





JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer_call(JNIEnv* env, jobject obj, jobject arg0, jlong arg1, jobject arg2) {
    JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer* ptr = (JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    if (ptr->ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This function pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    char* ptr2 = arg2 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        (*ptr->ptr)(ptr0, (size_t)arg1, ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer_allocate_callback(void* arg0, size_t arg1, void* arg2) {
    JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer_allocate_callback_instance(arg0, arg1, arg2);
}
void JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer::operator()(void* arg0, size_t arg1, void* arg2) {
    jthrowable exc = NULL;
    JNIEnv* env;
    bool attached = JavaCPP_getEnv(&env);
    if (env == NULL) {
        goto end;
    }
{
    jvalue args[3];
    jobject obj0 = NULL;
    void* ptr0 = NULL;
    ptr0 = (void*)arg0;
    if (ptr0 != NULL) { 
        obj0 = JavaCPP_createPointer(env, 0);
    }
    if (obj0 != NULL) { 
        env->SetLongField(obj0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    }
    args[0].l = obj0;
    args[1].j = (jlong)arg1;
    jobject obj2 = NULL;
    void* ptr2 = NULL;
    ptr2 = (void*)arg2;
    if (ptr2 != NULL) { 
        obj2 = JavaCPP_createPointer(env, 0);
    }
    if (obj2 != NULL) { 
        env->SetLongField(obj2, JavaCPP_addressFID, ptr_to_jlong(ptr2));
    }
    args[2].l = obj2;
    if (obj == NULL) {
        obj = JavaCPP_createPointer(env, 211);
        obj = obj == NULL ? NULL : env->NewGlobalRef(obj);
        if (obj == NULL) {
            JavaCPP_log("Error creating global reference of native_types.c_api.c_api.Deallocator_Pointer_long_Pointer instance for callback.");
        } else {
            env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(this));
        }
        ptr = &JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer_allocate_callback;
    }
    if (mid == NULL) {
        mid = JavaCPP_getMethodID(env, 211, "call", "(Lorg/bytedeco/javacpp/Pointer;JLorg/bytedeco/javacpp/Pointer;)V");
    }
    if (env->IsSameObject(obj, NULL)) {
        JavaCPP_log("Function pointer object is NULL in callback for native_types.c_api.c_api.Deallocator_Pointer_long_Pointer.");
    } else if (mid == NULL) {
        JavaCPP_log("Error getting method ID of function caller \"public native void native_types.c_api.c_api$Deallocator_Pointer_long_Pointer.call(org.bytedeco.javacpp.Pointer,long,org.bytedeco.javacpp.Pointer)\" for callback.");
    } else {
        env->CallVoidMethodA(obj, mid, args);
        if ((exc = env->ExceptionOccurred()) != NULL) {
            env->ExceptionClear();
        }
    }
    env->DeleteLocalRef(obj0);
    env->DeleteLocalRef(obj2);
}
end:
    if (exc != NULL) {
        jstring str = (jstring)env->CallObjectMethod(exc, JavaCPP_toStringMID);
        env->DeleteLocalRef(exc);
        const char *msg = JavaCPP_getStringBytes(env, str);
        JavaCPP_exception e(msg);
        JavaCPP_releaseStringBytes(env, str, msg);
        env->DeleteLocalRef(str);
        JavaCPP_detach(attached);
        throw e;
    } else {
        JavaCPP_detach(attached);
    }
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer_allocate(JNIEnv* env, jobject obj) {
    obj = env->NewWeakGlobalRef(obj);
    if (obj == NULL) {
        JavaCPP_log("Error creating global reference of native_types.c_api.c_api.Deallocator_Pointer_long_Pointer instance for callback.");
        return;
    }
    JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer* rptr = new (std::nothrow) JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer;
    if (rptr != NULL) {
        rptr->ptr = &JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer_allocate_callback;
        rptr->obj = obj;
        JavaCPP_initPointer(env, obj, rptr, 1, rptr, &JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer_deallocate);
        JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer_allocate_callback_instance = *rptr;
    }
}



JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long_call(JNIEnv* env, jobject obj, jobject arg0, jlong arg1) {
    JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long* ptr = (JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    if (ptr->ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This function pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        (*ptr->ptr)(ptr0, (size_t)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long_allocate_callback(void* arg0, size_t arg1) {
    JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long_allocate_callback_instance(arg0, arg1);
}
void JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long::operator()(void* arg0, size_t arg1) {
    jthrowable exc = NULL;
    JNIEnv* env;
    bool attached = JavaCPP_getEnv(&env);
    if (env == NULL) {
        goto end;
    }
{
    jvalue args[2];
    jobject obj0 = NULL;
    void* ptr0 = NULL;
    ptr0 = (void*)arg0;
    if (ptr0 != NULL) { 
        obj0 = JavaCPP_createPointer(env, 0);
    }
    if (obj0 != NULL) { 
        env->SetLongField(obj0, JavaCPP_addressFID, ptr_to_jlong(ptr0));
    }
    args[0].l = obj0;
    args[1].j = (jlong)arg1;
    if (obj == NULL) {
        obj = JavaCPP_createPointer(env, 212);
        obj = obj == NULL ? NULL : env->NewGlobalRef(obj);
        if (obj == NULL) {
            JavaCPP_log("Error creating global reference of native_types.c_api.c_api.TF_Buffer.Data_deallocator_Pointer_long instance for callback.");
        } else {
            env->SetLongField(obj, JavaCPP_addressFID, ptr_to_jlong(this));
        }
        ptr = &JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long_allocate_callback;
    }
    if (mid == NULL) {
        mid = JavaCPP_getMethodID(env, 212, "call", "(Lorg/bytedeco/javacpp/Pointer;J)V");
    }
    if (env->IsSameObject(obj, NULL)) {
        JavaCPP_log("Function pointer object is NULL in callback for native_types.c_api.c_api.TF_Buffer.Data_deallocator_Pointer_long.");
    } else if (mid == NULL) {
        JavaCPP_log("Error getting method ID of function caller \"public native void native_types.c_api.c_api$TF_Buffer$Data_deallocator_Pointer_long.call(org.bytedeco.javacpp.Pointer,long)\" for callback.");
    } else {
        env->CallVoidMethodA(obj, mid, args);
        if ((exc = env->ExceptionOccurred()) != NULL) {
            env->ExceptionClear();
        }
    }
    env->DeleteLocalRef(obj0);
}
end:
    if (exc != NULL) {
        jstring str = (jstring)env->CallObjectMethod(exc, JavaCPP_toStringMID);
        env->DeleteLocalRef(exc);
        const char *msg = JavaCPP_getStringBytes(env, str);
        JavaCPP_exception e(msg);
        JavaCPP_releaseStringBytes(env, str, msg);
        env->DeleteLocalRef(str);
        JavaCPP_detach(attached);
        throw e;
    } else {
        JavaCPP_detach(attached);
    }
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long_allocate(JNIEnv* env, jobject obj) {
    obj = env->NewWeakGlobalRef(obj);
    if (obj == NULL) {
        JavaCPP_log("Error creating global reference of native_types.c_api.c_api.TF_Buffer.Data_deallocator_Pointer_long instance for callback.");
        return;
    }
    JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long* rptr = new (std::nothrow) JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long;
    if (rptr != NULL) {
        rptr->ptr = &JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long_allocate_callback;
        rptr->obj = obj;
        JavaCPP_initPointer(env, obj, rptr, 1, rptr, &JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long_deallocate);
        JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long_allocate_callback_instance = *rptr;
    }
}

JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Buffer_allocateArray(JNIEnv* env, jobject obj, jlong arg0) {
    jthrowable exc = NULL;
    try {
        ::TF_Buffer* rptr = new ::TF_Buffer[arg0];
        jlong rcapacity = arg0;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_deallocateArray);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Buffer_data__Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::TF_Buffer* ptr = (::TF_Buffer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->data = (const void*)ptr0;
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Buffer_data__(JNIEnv* env, jobject obj) {
    ::TF_Buffer* ptr = (::TF_Buffer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    const void* rptr;
    rptr = (const void*)ptr->data;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 0);
        if (rarg != NULL) {
            env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Buffer_data_1deallocator__(JNIEnv* env, jobject obj) {
    ::TF_Buffer* ptr = (::TF_Buffer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = NULL;
    JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long* rptr;
    rptr = new (std::nothrow) JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long;
    if (rptr != NULL) rptr->ptr = ptr->data_deallocator;
    jlong rcapacity = 1;
    void* rowner = (void*)rptr;
    void (*deallocator)(void*) = &JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long_deallocate;
    if (rptr != NULL) {
        rarg = JavaCPP_createPointer(env, 212);
        if (rarg != NULL) {
            JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
        }
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Buffer_data_1deallocator__Lnative_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long_2(JNIEnv* env, jobject obj, jobject arg0) {
    ::TF_Buffer* ptr = (::TF_Buffer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long* ptr0 = arg0 == NULL ? NULL : (JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_00024Data_1deallocator_1Pointer_1long*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = obj;
    ptr->data_deallocator = (ptr0 == NULL ? NULL : ptr0->ptr);
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Buffer_length__J(JNIEnv* env, jobject obj, jlong arg0) {
    ::TF_Buffer* ptr = (::TF_Buffer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jobject rarg = obj;
    ptr->length = (size_t)arg0;
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Buffer_length__(JNIEnv* env, jobject obj) {
    ::TF_Buffer* ptr = (::TF_Buffer*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong rarg = 0;
    size_t rval = (size_t)ptr->length;
    rarg = (jlong)rval;
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_00024TF_1Buffer_allocate(JNIEnv* env, jobject obj) {
    jthrowable exc = NULL;
    try {
        ::TF_Buffer* rptr = new ::TF_Buffer();
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}


JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_TF_1TensorData(JNIEnv* env, jclass cls, jobject arg0) {
    ::TF_Tensor* ptr0 = arg0 == NULL ? NULL : (::TF_Tensor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    void* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TF_TensorData((const ::TF_Tensor*)ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 0);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1DataTypeSize(JNIEnv* env, jclass cls, jint arg0) {
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)TF_DataTypeSize((TF_DataType)arg0);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_TF_1NewStatus(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    ::TF_Status* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TF_NewStatus();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 214);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_TF_1DeleteStatus(JNIEnv* env, jclass cls, jobject arg0) {
    ::TF_Status* ptr0 = arg0 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        TF_DeleteStatus(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_TF_1SetStatus__Lnative_1types_c_1api_c_1api_00024TF_1Status_2ILjava_lang_String_2(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jstring arg2) {
    ::TF_Status* ptr0 = arg0 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    jthrowable exc = NULL;
    try {
        TF_SetStatus(ptr0, (TF_Code)arg1, ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_TF_1SetStatus__Lnative_1types_c_1api_c_1api_00024TF_1Status_2ILorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2) {
    ::TF_Status* ptr0 = arg0 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    jthrowable exc = NULL;
    try {
        TF_SetStatus(ptr0, (TF_Code)arg1, (const char*)ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_native_1types_c_1api_c_1api_TF_1GetCode(JNIEnv* env, jclass cls, jobject arg0) {
    ::TF_Status* ptr0 = arg0 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        TF_Code rval = (TF_Code)TF_GetCode((const ::TF_Status*)ptr0);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_TF_1Message(JNIEnv* env, jclass cls, jobject arg0) {
    ::TF_Status* ptr0 = arg0 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const char*)TF_Message((const ::TF_Status*)ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_TF_1NewBufferFromString(JNIEnv* env, jclass cls, jobject arg0, jlong arg1) {
    char* ptr0 = arg0 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    ::TF_Buffer* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TF_NewBufferFromString((const void*)ptr0, (size_t)arg1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 213);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_TF_1NewBuffer(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    ::TF_Buffer* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TF_NewBuffer();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 213);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_TF_1DeleteBuffer(JNIEnv* env, jclass cls, jobject arg0) {
    ::TF_Buffer* ptr0 = arg0 == NULL ? NULL : (::TF_Buffer*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        TF_DeleteBuffer(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_TF_1GetBuffer(JNIEnv* env, jclass cls, jobject arg0) {
    ::TF_Buffer* ptr0 = arg0 == NULL ? NULL : (::TF_Buffer*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    ::TF_Buffer* rptr;
    jthrowable exc = NULL;
    try {
        rptr = new ::TF_Buffer(TF_GetBuffer(ptr0));
        jlong rcapacity = 1;
        void* rowner = (void*)rptr;
        void (*deallocator)(void*) = &JavaCPP_native_1types_c_1api_c_1api_00024TF_1Buffer_deallocate;
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 213);
            if (rarg != NULL) {
                JavaCPP_initPointer(env, rarg, rptr, rcapacity, rowner, deallocator);
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_TF_1NewTensor__I_3JILorg_bytedeco_javacpp_Pointer_2JLnative_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer_2Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jclass cls, jint arg0, jlongArray arg1, jint arg2, jobject arg3, jlong arg4, jobject arg5, jobject arg6) {
    jlong* ptr1 = arg1 == NULL ? NULL : env->GetLongArrayElements(arg1, NULL);
    char* ptr3 = arg3 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer* ptr5 = arg5 == NULL ? NULL : (JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer*)jlong_to_ptr(env->GetLongField(arg5, JavaCPP_addressFID));
    jlong position5 = arg5 == NULL ? 0 : env->GetLongField(arg5, JavaCPP_positionFID);
    ptr5 += position5;
    char* ptr6 = arg6 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg6, JavaCPP_addressFID));
    jlong position6 = arg6 == NULL ? 0 : env->GetLongField(arg6, JavaCPP_positionFID);
    ptr6 += position6;
    jobject rarg = NULL;
    ::TF_Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TF_NewTensor((TF_DataType)arg0, (const int64_t*)ptr1, arg2, ptr3, (size_t)arg4, (ptr5 == NULL ? NULL : ptr5->ptr), ptr6);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 215);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arg1 != NULL) env->ReleaseLongArrayElements(arg1, (jlong*)ptr1, JNI_ABORT);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_TF_1NewTensor__ILjava_nio_LongBuffer_2ILorg_bytedeco_javacpp_Pointer_2JLnative_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer_2Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jclass cls, jint arg0, jobject arg1, jint arg2, jobject arg3, jlong arg4, jobject arg5, jobject arg6) {
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg1);
    jlongArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jlongArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetLongArrayElements(arr1, NULL);
        }
    }
    char* ptr3 = arg3 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer* ptr5 = arg5 == NULL ? NULL : (JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer*)jlong_to_ptr(env->GetLongField(arg5, JavaCPP_addressFID));
    jlong position5 = arg5 == NULL ? 0 : env->GetLongField(arg5, JavaCPP_positionFID);
    ptr5 += position5;
    char* ptr6 = arg6 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg6, JavaCPP_addressFID));
    jlong position6 = arg6 == NULL ? 0 : env->GetLongField(arg6, JavaCPP_positionFID);
    ptr6 += position6;
    jobject rarg = NULL;
    ::TF_Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TF_NewTensor((TF_DataType)arg0, (const int64_t*)ptr1, arg2, ptr3, (size_t)arg4, (ptr5 == NULL ? NULL : ptr5->ptr), ptr6);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 215);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arr1 != NULL) env->ReleaseLongArrayElements(arr1, (jlong*)ptr1, JNI_ABORT);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_TF_1NewTensor__ILorg_bytedeco_javacpp_LongPointer_2ILorg_bytedeco_javacpp_Pointer_2JLnative_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer_2Lorg_bytedeco_javacpp_Pointer_2(JNIEnv* env, jclass cls, jint arg0, jobject arg1, jint arg2, jobject arg3, jlong arg4, jobject arg5, jobject arg6) {
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    char* ptr3 = arg3 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer* ptr5 = arg5 == NULL ? NULL : (JavaCPP_native_1types_c_1api_c_1api_00024Deallocator_1Pointer_1long_1Pointer*)jlong_to_ptr(env->GetLongField(arg5, JavaCPP_addressFID));
    jlong position5 = arg5 == NULL ? 0 : env->GetLongField(arg5, JavaCPP_positionFID);
    ptr5 += position5;
    char* ptr6 = arg6 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg6, JavaCPP_addressFID));
    jlong position6 = arg6 == NULL ? 0 : env->GetLongField(arg6, JavaCPP_positionFID);
    ptr6 += position6;
    jobject rarg = NULL;
    ::TF_Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TF_NewTensor((TF_DataType)arg0, (const int64_t*)ptr1, arg2, ptr3, (size_t)arg4, (ptr5 == NULL ? NULL : ptr5->ptr), ptr6);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 215);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_TF_1AllocateTensor__I_3JIJ(JNIEnv* env, jclass cls, jint arg0, jlongArray arg1, jint arg2, jlong arg3) {
    jlong* ptr1 = arg1 == NULL ? NULL : env->GetLongArrayElements(arg1, NULL);
    jobject rarg = NULL;
    ::TF_Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TF_AllocateTensor((TF_DataType)arg0, (const int64_t*)ptr1, arg2, (size_t)arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 215);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arg1 != NULL) env->ReleaseLongArrayElements(arg1, (jlong*)ptr1, JNI_ABORT);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_TF_1AllocateTensor__ILjava_nio_LongBuffer_2IJ(JNIEnv* env, jclass cls, jint arg0, jobject arg1, jint arg2, jlong arg3) {
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)env->GetDirectBufferAddress(arg1);
    jlongArray arr1 = NULL;
    if (arg1 != NULL && ptr1 == NULL) {
        arr1 = (jlongArray)env->CallObjectMethod(arg1, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr1 = arr1 == NULL ? NULL : env->GetLongArrayElements(arr1, NULL);
        }
    }
    jobject rarg = NULL;
    ::TF_Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TF_AllocateTensor((TF_DataType)arg0, (const int64_t*)ptr1, arg2, (size_t)arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 215);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arr1 != NULL) env->ReleaseLongArrayElements(arr1, (jlong*)ptr1, JNI_ABORT);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_TF_1AllocateTensor__ILorg_bytedeco_javacpp_LongPointer_2IJ(JNIEnv* env, jclass cls, jint arg0, jobject arg1, jint arg2, jlong arg3) {
    jlong* ptr1 = arg1 == NULL ? NULL : (jlong*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jobject rarg = NULL;
    ::TF_Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TF_AllocateTensor((TF_DataType)arg0, (const int64_t*)ptr1, arg2, (size_t)arg3);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 215);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_TF_1TensorMaybeMove(JNIEnv* env, jclass cls, jobject arg0) {
    ::TF_Tensor* ptr0 = arg0 == NULL ? NULL : (::TF_Tensor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jobject rarg = NULL;
    ::TF_Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TF_TensorMaybeMove(ptr0);
        if (rptr == ptr0) {
            rarg = arg0;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 215);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_TF_1DeleteTensor(JNIEnv* env, jclass cls, jobject arg0) {
    ::TF_Tensor* ptr0 = arg0 == NULL ? NULL : (::TF_Tensor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        TF_DeleteTensor(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_native_1types_c_1api_c_1api_TF_1TensorType(JNIEnv* env, jclass cls, jobject arg0) {
    ::TF_Tensor* ptr0 = arg0 == NULL ? NULL : (::TF_Tensor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        TF_DataType rval = (TF_DataType)TF_TensorType((const ::TF_Tensor*)ptr0);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jint JNICALL Java_native_1types_c_1api_c_1api_TF_1NumDims(JNIEnv* env, jclass cls, jobject arg0) {
    ::TF_Tensor* ptr0 = arg0 == NULL ? NULL : (::TF_Tensor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = TF_NumDims((const ::TF_Tensor*)ptr0);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1Dim(JNIEnv* env, jclass cls, jobject arg0, jint arg1) {
    ::TF_Tensor* ptr0 = arg0 == NULL ? NULL : (::TF_Tensor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        int64_t rval = (int64_t)TF_Dim((const ::TF_Tensor*)ptr0, arg1);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1TensorByteSize(JNIEnv* env, jclass cls, jobject arg0) {
    ::TF_Tensor* ptr0 = arg0 == NULL ? NULL : (::TF_Tensor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)TF_TensorByteSize((const ::TF_Tensor*)ptr0);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1StringEncode__Lorg_bytedeco_javacpp_BytePointer_2J_3BJLnative_1types_c_1api_c_1api_00024TF_1Status_2(JNIEnv* env, jclass cls, jobject arg0, jlong arg1, jbyteArray arg2, jlong arg3, jobject arg4) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr2 = arg2 == NULL ? NULL : env->GetByteArrayElements(arg2, NULL);
    ::TF_Status* ptr4 = arg4 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)TF_StringEncode((const char*)ptr0, (size_t)arg1, (char*)ptr2, (size_t)arg3, ptr4);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arg2 != NULL) env->ReleaseByteArrayElements(arg2, (jbyte*)ptr2, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1StringEncode__Ljava_lang_String_2JLorg_bytedeco_javacpp_BytePointer_2JLnative_1types_c_1api_c_1api_00024TF_1Status_2(JNIEnv* env, jclass cls, jstring arg0, jlong arg1, jobject arg2, jlong arg3, jobject arg4) {
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::TF_Status* ptr4 = arg4 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)TF_StringEncode(ptr0, (size_t)arg1, (char*)ptr2, (size_t)arg3, ptr4);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1StringEncode__Lorg_bytedeco_javacpp_BytePointer_2JLjava_nio_ByteBuffer_2JLnative_1types_c_1api_c_1api_00024TF_1Status_2(JNIEnv* env, jclass cls, jobject arg0, jlong arg1, jobject arg2, jlong arg3, jobject arg4) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg2);
    jbyteArray arr2 = NULL;
    if (arg2 != NULL && ptr2 == NULL) {
        arr2 = (jbyteArray)env->CallObjectMethod(arg2, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr2 = arr2 == NULL ? NULL : env->GetByteArrayElements(arr2, NULL);
        }
    }
    ::TF_Status* ptr4 = arg4 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)TF_StringEncode((const char*)ptr0, (size_t)arg1, (char*)ptr2, (size_t)arg3, ptr4);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arr2 != NULL) env->ReleaseByteArrayElements(arr2, (jbyte*)ptr2, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1StringEncode__Ljava_lang_String_2J_3BJLnative_1types_c_1api_c_1api_00024TF_1Status_2(JNIEnv* env, jclass cls, jstring arg0, jlong arg1, jbyteArray arg2, jlong arg3, jobject arg4) {
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    signed char* ptr2 = arg2 == NULL ? NULL : env->GetByteArrayElements(arg2, NULL);
    ::TF_Status* ptr4 = arg4 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)TF_StringEncode(ptr0, (size_t)arg1, (char*)ptr2, (size_t)arg3, ptr4);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (arg2 != NULL) env->ReleaseByteArrayElements(arg2, (jbyte*)ptr2, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1StringEncode__Ljava_lang_String_2JLjava_nio_ByteBuffer_2JLnative_1types_c_1api_c_1api_00024TF_1Status_2(JNIEnv* env, jclass cls, jstring arg0, jlong arg1, jobject arg2, jlong arg3, jobject arg4) {
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg2);
    jbyteArray arr2 = NULL;
    if (arg2 != NULL && ptr2 == NULL) {
        arr2 = (jbyteArray)env->CallObjectMethod(arg2, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr2 = arr2 == NULL ? NULL : env->GetByteArrayElements(arr2, NULL);
        }
    }
    ::TF_Status* ptr4 = arg4 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)TF_StringEncode(ptr0, (size_t)arg1, (char*)ptr2, (size_t)arg3, ptr4);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (arr2 != NULL) env->ReleaseByteArrayElements(arr2, (jbyte*)ptr2, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1StringEncode__Lorg_bytedeco_javacpp_BytePointer_2JLorg_bytedeco_javacpp_BytePointer_2JLnative_1types_c_1api_c_1api_00024TF_1Status_2(JNIEnv* env, jclass cls, jobject arg0, jlong arg1, jobject arg2, jlong arg3, jobject arg4) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    ::TF_Status* ptr4 = arg4 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)TF_StringEncode((const char*)ptr0, (size_t)arg1, (char*)ptr2, (size_t)arg3, ptr4);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1StringDecode__Ljava_lang_String_2JLorg_bytedeco_javacpp_BytePointer_2Lorg_bytedeco_javacpp_SizeTPointer_2Lnative_1types_c_1api_c_1api_00024TF_1Status_2(JNIEnv* env, jclass cls, jstring arg0, jlong arg1, jobject arg2, jobject arg3, jobject arg4) {
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size_t* ptr3 = arg3 == NULL ? NULL : (size_t*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    ::TF_Status* ptr4 = arg4 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)TF_StringDecode(ptr0, (size_t)arg1, (const char**)(arg2 == NULL ? NULL : &ptr2), (size_t*)ptr3, ptr4);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    ptr2 -= position2;
    if (arg2 != NULL) env->SetLongField(arg2, JavaCPP_addressFID, ptr_to_jlong(ptr2));
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1StringDecode__Lorg_bytedeco_javacpp_BytePointer_2J_3BLorg_bytedeco_javacpp_SizeTPointer_2Lnative_1types_c_1api_c_1api_00024TF_1Status_2(JNIEnv* env, jclass cls, jobject arg0, jlong arg1, jbyteArray arg2, jobject arg3, jobject arg4) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr2 = arg2 == NULL ? NULL : env->GetByteArrayElements(arg2, NULL);
    size_t* ptr3 = arg3 == NULL ? NULL : (size_t*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    ::TF_Status* ptr4 = arg4 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)TF_StringDecode((const char*)ptr0, (size_t)arg1, (const char**)(arg2 == NULL ? NULL : &ptr2), (size_t*)ptr3, ptr4);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arg2 != NULL) env->ReleaseByteArrayElements(arg2, (jbyte*)ptr2, JNI_ABORT);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1StringDecode__Lorg_bytedeco_javacpp_BytePointer_2JLjava_nio_ByteBuffer_2Lorg_bytedeco_javacpp_SizeTPointer_2Lnative_1types_c_1api_c_1api_00024TF_1Status_2(JNIEnv* env, jclass cls, jobject arg0, jlong arg1, jobject arg2, jobject arg3, jobject arg4) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg2);
    jbyteArray arr2 = NULL;
    if (arg2 != NULL && ptr2 == NULL) {
        arr2 = (jbyteArray)env->CallObjectMethod(arg2, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr2 = arr2 == NULL ? NULL : env->GetByteArrayElements(arr2, NULL);
        }
    }
    size_t* ptr3 = arg3 == NULL ? NULL : (size_t*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    ::TF_Status* ptr4 = arg4 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)TF_StringDecode((const char*)ptr0, (size_t)arg1, (const char**)(arg2 == NULL ? NULL : &ptr2), (size_t*)ptr3, ptr4);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arr2 != NULL) env->ReleaseByteArrayElements(arr2, (jbyte*)ptr2, JNI_ABORT);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1StringDecode__Ljava_lang_String_2J_3BLorg_bytedeco_javacpp_SizeTPointer_2Lnative_1types_c_1api_c_1api_00024TF_1Status_2(JNIEnv* env, jclass cls, jstring arg0, jlong arg1, jbyteArray arg2, jobject arg3, jobject arg4) {
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    signed char* ptr2 = arg2 == NULL ? NULL : env->GetByteArrayElements(arg2, NULL);
    size_t* ptr3 = arg3 == NULL ? NULL : (size_t*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    ::TF_Status* ptr4 = arg4 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)TF_StringDecode(ptr0, (size_t)arg1, (const char**)(arg2 == NULL ? NULL : &ptr2), (size_t*)ptr3, ptr4);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (arg2 != NULL) env->ReleaseByteArrayElements(arg2, (jbyte*)ptr2, JNI_ABORT);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1StringDecode__Lorg_bytedeco_javacpp_BytePointer_2JLorg_bytedeco_javacpp_PointerPointer_2Lorg_bytedeco_javacpp_SizeTPointer_2Lnative_1types_c_1api_c_1api_00024TF_1Status_2(JNIEnv* env, jclass cls, jobject arg0, jlong arg1, jobject arg2, jobject arg3, jobject arg4) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    void** ptr2 = arg2 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size_t* ptr3 = arg3 == NULL ? NULL : (size_t*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    ::TF_Status* ptr4 = arg4 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)TF_StringDecode((const char*)ptr0, (size_t)arg1, (const char**)ptr2, (size_t*)ptr3, ptr4);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1StringDecode__Lorg_bytedeco_javacpp_BytePointer_2JLorg_bytedeco_javacpp_BytePointer_2Lorg_bytedeco_javacpp_SizeTPointer_2Lnative_1types_c_1api_c_1api_00024TF_1Status_2(JNIEnv* env, jclass cls, jobject arg0, jlong arg1, jobject arg2, jobject arg3, jobject arg4) {
    signed char* ptr0 = arg0 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong position2 = arg2 == NULL ? 0 : env->GetLongField(arg2, JavaCPP_positionFID);
    ptr2 += position2;
    size_t* ptr3 = arg3 == NULL ? NULL : (size_t*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    ::TF_Status* ptr4 = arg4 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)TF_StringDecode((const char*)ptr0, (size_t)arg1, (const char**)(arg2 == NULL ? NULL : &ptr2), (size_t*)ptr3, ptr4);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    ptr2 -= position2;
    if (arg2 != NULL) env->SetLongField(arg2, JavaCPP_addressFID, ptr_to_jlong(ptr2));
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1StringDecode__Ljava_lang_String_2JLjava_nio_ByteBuffer_2Lorg_bytedeco_javacpp_SizeTPointer_2Lnative_1types_c_1api_c_1api_00024TF_1Status_2(JNIEnv* env, jclass cls, jstring arg0, jlong arg1, jobject arg2, jobject arg3, jobject arg4) {
    const char* ptr0 = JavaCPP_getStringBytes(env, arg0);
    signed char* ptr2 = arg2 == NULL ? NULL : (signed char*)env->GetDirectBufferAddress(arg2);
    jbyteArray arr2 = NULL;
    if (arg2 != NULL && ptr2 == NULL) {
        arr2 = (jbyteArray)env->CallObjectMethod(arg2, JavaCPP_arrayMID);
        if (env->ExceptionOccurred() != NULL) {
            env->ExceptionClear();
        } else {
            ptr2 = arr2 == NULL ? NULL : env->GetByteArrayElements(arr2, NULL);
        }
    }
    size_t* ptr3 = arg3 == NULL ? NULL : (size_t*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jlong position3 = arg3 == NULL ? 0 : env->GetLongField(arg3, JavaCPP_positionFID);
    ptr3 += position3;
    ::TF_Status* ptr4 = arg4 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg4, JavaCPP_addressFID));
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)TF_StringDecode(ptr0, (size_t)arg1, (const char**)(arg2 == NULL ? NULL : &ptr2), (size_t*)ptr3, ptr4);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg0, ptr0);
    if (arr2 != NULL) env->ReleaseByteArrayElements(arr2, (jbyte*)ptr2, JNI_ABORT);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_c_1api_TF_1StringEncodedSize(JNIEnv* env, jclass cls, jlong arg0) {
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        size_t rval = (size_t)TF_StringEncodedSize((size_t)arg0);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_TF_1NewSessionOptions(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    ::TF_SessionOptions* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TF_NewSessionOptions();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 216);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_TF_1SetTarget__Lnative_1types_c_1api_c_1api_00024TF_1SessionOptions_2Ljava_lang_String_2(JNIEnv* env, jclass cls, jobject arg0, jstring arg1) {
    ::TF_SessionOptions* ptr0 = arg0 == NULL ? NULL : (::TF_SessionOptions*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    jthrowable exc = NULL;
    try {
        TF_SetTarget(ptr0, ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_TF_1SetTarget__Lnative_1types_c_1api_c_1api_00024TF_1SessionOptions_2Lorg_bytedeco_javacpp_BytePointer_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::TF_SessionOptions* ptr0 = arg0 == NULL ? NULL : (::TF_SessionOptions*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        TF_SetTarget(ptr0, (const char*)ptr1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_TF_1SetConfig(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jlong arg2, jobject arg3) {
    ::TF_SessionOptions* ptr0 = arg0 == NULL ? NULL : (::TF_SessionOptions*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    char* ptr1 = arg1 == NULL ? NULL : (char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    ::TF_Status* ptr3 = arg3 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        TF_SetConfig(ptr0, (const void*)ptr1, (size_t)arg2, ptr3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_TF_1DeleteSessionOptions(JNIEnv* env, jclass cls, jobject arg0) {
    ::TF_SessionOptions* ptr0 = arg0 == NULL ? NULL : (::TF_SessionOptions*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        TF_DeleteSessionOptions(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_c_1api_TF_1NewGraph(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    ::TF_Graph* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TF_NewGraph();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 217);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_c_1api_TF_1DeleteGraph(JNIEnv* env, jclass cls, jobject arg0) {
    ::TF_Graph* ptr0 = arg0 == NULL ? NULL : (::TF_Graph*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        TF_DeleteGraph(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}







JNIEXPORT void JNICALL Java_native_1types_c_1api_eager_c_1api_deleteTensor(JNIEnv* env, jclass cls, jobject arg0) {
    tensorflow::Tensor* ptr0 = arg0 == NULL ? NULL : (tensorflow::Tensor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jthrowable exc = NULL;
    try {
        deleteTensor(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1OpSetAttrInt(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jlong arg2) {
    ::TFE_Op* ptr0 = arg0 == NULL ? NULL : (::TFE_Op*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        TFE_OpSetAttrInt(ptr0, (const char*)ptr1, (int64_t)arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1TensorHandleDeviceName(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::TFE_TensorHandle* ptr0 = arg0 == NULL ? NULL : (::TFE_TensorHandle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::TF_Status* ptr1 = arg1 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    const char* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const char*)TFE_TensorHandleDeviceName(ptr0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 9);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1DeleteTensorHandle(JNIEnv* env, jclass cls, jobject arg0) {
    ::TFE_TensorHandle* ptr0 = arg0 == NULL ? NULL : (::TFE_TensorHandle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        TFE_DeleteTensorHandle(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1NewContext(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::TFE_ContextOptions* ptr0 = arg0 == NULL ? NULL : (::TFE_ContextOptions*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::TF_Status* ptr1 = arg1 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    ::TFE_Context* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TFE_NewContext((const ::TFE_ContextOptions*)ptr0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 218);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1ContextOptionsSetAsync(JNIEnv* env, jclass cls, jobject arg0, jbyte arg1) {
    ::TFE_ContextOptions* ptr0 = arg0 == NULL ? NULL : (::TFE_ContextOptions*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        TFE_ContextOptionsSetAsync(ptr0, (unsigned char)arg1);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1NewContextOptions(JNIEnv* env, jclass cls) {
    jobject rarg = NULL;
    ::TFE_ContextOptions* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TFE_NewContextOptions();
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 219);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1NewTensorHandle__Lnative_1types_c_1api_c_1api_00024TF_1Tensor_2Lnative_1types_c_1api_c_1api_00024TF_1Status_2(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::TF_Tensor* ptr0 = arg0 == NULL ? NULL : (::TF_Tensor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::TF_Status* ptr1 = arg1 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    ::TFE_TensorHandle* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TFE_NewTensorHandle(ptr0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 220);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1NewTensorHandle__Lnative_1types_core_framework_Tensor_2(JNIEnv* env, jclass cls, jobject arg0) {
    tensorflow::Tensor* ptr0 = arg0 == NULL ? NULL : (tensorflow::Tensor*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    if (ptr0 == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "Pointer address of argument 0 is NULL.");
        return 0;
    }
    jlong position0 = arg0 == NULL ? 0 : env->GetLongField(arg0, JavaCPP_positionFID);
    ptr0 += position0;
    jobject rarg = NULL;
    ::TFE_TensorHandle* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TFE_NewTensorHandle(*(const tensorflow::Tensor*)ptr0);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 220);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1TensorHandleUnderlyingTensorInHostMemory(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::TFE_TensorHandle* ptr0 = arg0 == NULL ? NULL : (::TFE_TensorHandle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::TF_Status* ptr1 = arg1 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    const tensorflow::Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = (const tensorflow::Tensor*)TFE_TensorHandleUnderlyingTensorInHostMemory(ptr0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 15);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1NewOp(JNIEnv* env, jclass cls, jobject arg0, jstring arg1, jobject arg2) {
    ::TFE_Context* ptr0 = arg0 == NULL ? NULL : (::TFE_Context*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    const char* ptr1 = JavaCPP_getStringBytes(env, arg1);
    ::TF_Status* ptr2 = arg2 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jobject rarg = NULL;
    ::TFE_Op* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TFE_NewOp(ptr0, (const char*)ptr1, ptr2);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 221);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg1, ptr1);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1DeleteOp(JNIEnv* env, jclass cls, jobject arg0) {
    ::TFE_Op* ptr0 = arg0 == NULL ? NULL : (::TFE_Op*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        TFE_DeleteOp(ptr0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1TensorHandleNumDims(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::TFE_TensorHandle* ptr0 = arg0 == NULL ? NULL : (::TFE_TensorHandle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::TF_Status* ptr1 = arg1 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        int rval = TFE_TensorHandleNumDims(ptr0, ptr1);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jlong JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1TensorHandleDim(JNIEnv* env, jclass cls, jobject arg0, jint arg1, jobject arg2) {
    ::TFE_TensorHandle* ptr0 = arg0 == NULL ? NULL : (::TFE_TensorHandle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::TF_Status* ptr2 = arg2 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jlong rarg = 0;
    jthrowable exc = NULL;
    try {
        int64_t rval = (int64_t)TFE_TensorHandleDim(ptr0, arg1, ptr2);
        rarg = (jlong)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1OpSetDevice(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    ::TFE_Op* ptr0 = arg0 == NULL ? NULL : (::TFE_Op*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    ::TF_Status* ptr2 = arg2 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        TFE_OpSetDevice(ptr0, (const char*)ptr1, ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1OpAddInput(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jobject arg2) {
    ::TFE_Op* ptr0 = arg0 == NULL ? NULL : (::TFE_Op*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::TFE_TensorHandle* ptr1 = arg1 == NULL ? NULL : (::TFE_TensorHandle*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    ::TF_Status* ptr2 = arg2 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg2, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        TFE_OpAddInput(ptr0, ptr1, ptr2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jint JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1TensorHandleDataType(JNIEnv* env, jclass cls, jobject arg0) {
    ::TFE_TensorHandle* ptr0 = arg0 == NULL ? NULL : (::TFE_TensorHandle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    jint rarg = 0;
    jthrowable exc = NULL;
    try {
        TF_DataType rval = (TF_DataType)TFE_TensorHandleDataType(ptr0);
        rarg = (jint)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1OpSetAttrTypeInt(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jint arg2) {
    ::TFE_Op* ptr0 = arg0 == NULL ? NULL : (::TFE_Op*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    signed char* ptr1 = arg1 == NULL ? NULL : (signed char*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    jthrowable exc = NULL;
    try {
        TFE_OpSetAttrTypeInt(ptr0, (const char*)ptr1, arg2);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1Execute(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jintArray arg2, jobject arg3) {
    ::TFE_Op* ptr0 = arg0 == NULL ? NULL : (::TFE_Op*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    void** ptr1 = arg1 == NULL ? NULL : (void**)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jlong position1 = arg1 == NULL ? 0 : env->GetLongField(arg1, JavaCPP_positionFID);
    ptr1 += position1;
    int* ptr2 = arg2 == NULL ? NULL : env->GetIntArrayElements(arg2, NULL);
    ::TF_Status* ptr3 = arg3 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jthrowable exc = NULL;
    try {
        TFE_Execute(ptr0, (TFE_TensorHandle**)ptr1, (int*)ptr2, ptr3);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (arg2 != NULL) env->ReleaseIntArrayElements(arg2, (jint*)ptr2, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1Exec(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::TFE_Op* ptr0 = arg0 == NULL ? NULL : (::TFE_Op*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::TF_Status* ptr1 = arg1 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    ::TFE_TensorHandle* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TFE_Exec(ptr0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 220);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1TensorHandleResolve(JNIEnv* env, jclass cls, jobject arg0, jobject arg1) {
    ::TFE_TensorHandle* ptr0 = arg0 == NULL ? NULL : (::TFE_TensorHandle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::TF_Status* ptr1 = arg1 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    jobject rarg = NULL;
    ::TF_Tensor* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TFE_TensorHandleResolve(ptr0, ptr1);
        if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 215);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT jobject JNICALL Java_native_1types_c_1api_eager_c_1api_TFE_1TensorHandleCopyToDevice(JNIEnv* env, jclass cls, jobject arg0, jobject arg1, jstring arg2, jobject arg3) {
    ::TFE_TensorHandle* ptr0 = arg0 == NULL ? NULL : (::TFE_TensorHandle*)jlong_to_ptr(env->GetLongField(arg0, JavaCPP_addressFID));
    ::TFE_Context* ptr1 = arg1 == NULL ? NULL : (::TFE_Context*)jlong_to_ptr(env->GetLongField(arg1, JavaCPP_addressFID));
    const char* ptr2 = JavaCPP_getStringBytes(env, arg2);
    ::TF_Status* ptr3 = arg3 == NULL ? NULL : (::TF_Status*)jlong_to_ptr(env->GetLongField(arg3, JavaCPP_addressFID));
    jobject rarg = NULL;
    ::TFE_TensorHandle* rptr;
    jthrowable exc = NULL;
    try {
        rptr = TFE_TensorHandleCopyToDevice(ptr0, ptr1, (const char*)ptr2, ptr3);
        if (rptr == ptr0) {
            rarg = arg0;
        } else if (rptr != NULL) {
            rarg = JavaCPP_createPointer(env, 220);
            if (rarg != NULL) {
                env->SetLongField(rarg, JavaCPP_addressFID, ptr_to_jlong(rptr));
            }
        }
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    JavaCPP_releaseStringBytes(env, arg2, ptr2);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}

JNIEXPORT void JNICALL Java_native_1types_c_1api_eager_tape_1api_00024GradientTape_Watch(JNIEnv* env, jobject obj, jlong arg0) {
    tensorflow::eager:: GradientTape< int*, int* (int*) >* ptr = (tensorflow::eager:: GradientTape< int*, int* (int*) >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jthrowable exc = NULL;
    try {
        ptr->Watch((int64)arg0);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}
JNIEXPORT jboolean JNICALL Java_native_1types_c_1api_eager_tape_1api_00024GradientTape_ShouldRecord(JNIEnv* env, jobject obj, jlongArray arg0, jintArray arg1) {
    tensorflow::eager:: GradientTape< int*, int* (int*) >* ptr = (tensorflow::eager:: GradientTape< int*, int* (int*) >*)jlong_to_ptr(env->GetLongField(obj, JavaCPP_addressFID));
    if (ptr == NULL) {
        env->ThrowNew(JavaCPP_getClass(env, 8), "This pointer address is NULL.");
        return 0;
    }
    jlong position = env->GetLongField(obj, JavaCPP_positionFID);
    ptr += position;
    jlong* ptr0 = arg0 == NULL ? NULL : env->GetLongArrayElements(arg0, NULL);
    jlong size0 = arg0 == NULL ? 0 : env->GetArrayLength(arg0);
    void* owner0 = (void*)ptr0;
    ArraySliceAdapter< jlong > adapter0(ptr0, size0, owner0);
    int* ptr1 = arg1 == NULL ? NULL : env->GetIntArrayElements(arg1, NULL);
    jlong size1 = arg1 == NULL ? 0 : env->GetArrayLength(arg1);
    void* owner1 = (void*)ptr1;
    ArraySliceAdapter< gtl::ArraySlice<DataType> > adapter1((gtl::ArraySlice<DataType>)ptr1, size1, owner1);
    jboolean rarg = 0;
    jthrowable exc = NULL;
    try {
        unsigned char rval = ptr->ShouldRecord((tensorflow::gtl::ArraySlice< jlong >&)adapter0, (tensorflow::gtl::ArraySlice< gtl::ArraySlice<DataType> >&)adapter1);
        rarg = (jboolean)rval;
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    jlong* rptr0 = adapter0;
    void* rowner0 = adapter0.owner;
    if (rptr0 != ptr0) {
        ArraySliceAdapter< jlong >::deallocate(rowner0);
    }
    if (arg0 != NULL) env->ReleaseLongArrayElements(arg0, (jlong*)ptr0, 0);
    gtl::ArraySlice<DataType> rptr1 = (gtl::ArraySlice<DataType>)adapter1;
    void* rowner1 = adapter1.owner;
    if (rptr1 != (gtl::ArraySlice<DataType>)ptr1) {
        ArraySliceAdapter< gtl::ArraySlice<DataType> >::deallocate(rowner1);
    }
    if (arg1 != NULL) env->ReleaseIntArrayElements(arg1, (jint*)ptr1, 0);
    if (exc != NULL) {
        env->Throw(exc);
    }
    return rarg;
}
JNIEXPORT void JNICALL Java_native_1types_c_1api_eager_tape_1api_00024GradientTape_allocate(JNIEnv* env, jobject obj, jboolean arg0) {
    jthrowable exc = NULL;
    try {
        tensorflow::eager:: GradientTape< int*, int* (int*) >* rptr = new tensorflow::eager:: GradientTape< int*, int* (int*) >(arg0);
        jlong rcapacity = 1;
        JavaCPP_initPointer(env, obj, rptr, rcapacity, rptr, &JavaCPP_native_1types_c_1api_eager_tape_1api_00024GradientTape_deallocate);
    } catch (...) {
        exc = JavaCPP_handleException(env, 7);
    }

    if (exc != NULL) {
        env->Throw(exc);
    }
}




}

